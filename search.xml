<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git知识总结</title>
      <link href="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><h3 id="1-1git-定义"><a href="#1-1git-定义" class="headerlink" title="1.1git 定义"></a>1.1git 定义</h3><p>​ git 是一个免费的分布式版本控制系统，旨在快速高效地处理从小型到大型项目的所有事物。</p><p>不管是软件开发还是什么行业，代码、文档都不是一次性写完的，都需要有无数次的修改，无数个版本迭代，而 Git 是一个很好的版本管理工具。这次写的不满意，可以直接回滚到自己想要的版本。</p><p>​ Git 的作者是 Linus ，没错，就是写了 Linux 系统的那个大佬 Linus，是他花了两周的时间用 C 写了这款分布式版本控制系统，狠人就是狠人啊,现在基本上就是最大的分布式版本管理系统了。</p><h3 id="1-2Github-和码云"><a href="#1-2Github-和码云" class="headerlink" title="1.2Github 和码云"></a>1.2Github 和码云</h3><p>​ Github 是一个是一个用 git 做版本控制的项目托管平台，同样的中国还有码云。两者都是使用 git 做版本控制的项目托管平台，说白了，就是一个代码仓库。</p><p>​ Github 与 码云其实在功能使用上并没有什么大的区别，比较显著的区别， Github 是全球最大的代码托管仓库，资源丰富，一句话说就是只有你想不到，没有他做不到的。代码资源十分丰富，但是有些不可名状的原因，导致了其网速有点那啥，但是还是可以用的。码云相对来说资源并没有那么丰富，但是好在其是国内的代码仓库，速度相对来说稍微好一些。</p><p>​ 还有就是都提供了免费的静态网页功能，可以通过其规定特定的特殊，域名访问网站。还有应该是近来出现不久的免费的功能，免费的私有仓库，之前在 Github 上，要建私有仓库是需要花钱的。</p><p>​ 有一个挺不错的方法就是拿 Github 当作自己的网盘，平时来存储一些文件什么的还是挺不错的，当然了，还是有限制的，单个文件不能超过 100M ，然后每个项目不能超过 1G。其实一般来说足够了，毕竟是免费的。</p><p>​ <strong>简单来说， Git 是一种方法。而 GitHub 只是使用这种方法的一个代码仓库。方法只有一个，而采用这种方法的却又很多个，类似 Github 和码云的还有 Gitlab 等。</strong></p><h2 id="2-Git-和-Svn-区别"><a href="#2-Git-和-Svn-区别" class="headerlink" title="2.Git 和 Svn 区别"></a>2.Git 和 Svn 区别</h2><h3 id="2-1Svn"><a href="#2-1Svn" class="headerlink" title="2.1Svn"></a>2.1Svn</h3><p>​ SVN 是集中式版本控制系统，版本库是集中放在中央服务器的，而开发人员工作的时候，用的都是自己的电脑，所以首先要从中央服务器下载最新的版本，然后开发，开发完后，需要把自己开发的代码提交到中央服务器。</p><p>​ 集中式版本控制工具缺点：服务器单点故障, 容错性差</p><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210323112415151.png" alt="image-20210323112415151"></p><h3 id="2-2Git"><a href="#2-2Git" class="headerlink" title="2.2Git"></a>2.2Git</h3><h4 id="2-2-1-说明"><a href="#2-2-1-说明" class="headerlink" title="2.2.1 说明"></a>2.2.1 说明</h4><p>​ Git 是分布式版本控制系统（Distributed Version Control System，简称 DVCS） ，分为两种类型的仓库(本地仓库和远程仓库)。</p><p>​ 本地仓库：是在开发人员自己电脑上的 Git 仓库<br>​ 远程仓库：是在远程服务器上的 Git 仓库</p><p>​ Clone：克隆，就是将远程仓库复制到本地<br>​ Push：推送，就是将本地仓库代码上传到远程仓库<br>​ Pull：拉取，就是将远程仓库代码下载到本地仓库<br><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210323112556941.png" alt="image-20210323112556941"></p><h4 id="2-2-2-工作流程"><a href="#2-2-2-工作流程" class="headerlink" title="2.2.2 工作流程"></a>2.2.2 工作流程</h4><p>工作流程如下：<br>1．从远程仓库中克隆代码到本地仓库<br>2．从本地仓库中 checkout 代码然后进行代码修改<br>3．在提交前先将代码提交到暂存区<br>4．提交到本地仓库。本地仓库中保存修改的各个历史版本<br>5．修改完成后，需要和团队成员共享代码时，将代码 push 到远程仓库</p><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210323112802541.png" alt="image-20210323112802541"></p><h2 id="3-安装下载"><a href="#3-安装下载" class="headerlink" title="3.安装下载"></a>3.安装下载</h2><h4 id="3-1Linux-平台上安装"><a href="#3-1Linux-平台上安装" class="headerlink" title="3.1Linux 平台上安装"></a>3.1Linux 平台上安装</h4><h5 id="3-1-1Debian-Ubuntu"><a href="#3-1-1Debian-Ubuntu" class="headerlink" title="3.1.1Debian/Ubuntu"></a>3.1.1Debian/Ubuntu</h5><pre class=" language-sh"><code class="language-sh">#1.Debian/Ubuntu Git 安装命令为：$ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \  libz-dev libssl-dev$ apt-get install git$ git --versiongit version 1.8.1.2#2.Debian/Ubuntu Git 源码安装方式 最新源码包下载地址：https://git-scm.com/download$ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \  libz-dev libssl-dev$ tar -zxf git-1.7.2.2.tar.gz$ cd git-1.7.2.2$ make prefix=/usr/local all$ sudo make prefix=/usr/local install</code></pre><h5 id="3-1-2Centos-RedHat"><a href="#3-1-2Centos-RedHat" class="headerlink" title="3.1.2Centos/RedHat"></a>3.1.2Centos/RedHat</h5><pre class=" language-sh"><code class="language-sh">#1.命令安装$ yum install curl-devel expat-devel gettext-devel \  openssl-devel zlib-devel$ yum -y install git-core$ git --versiongit version 1.7.1#2.源码安装方式 最新源码包下载地址：https://git-scm.com/download$ yum install curl-devel expat-devel gettext-devel \  openssl-devel zlib-$ tar -zxf git-1.7.2.2.tar.gz$ cd git-1.7.2.2$ make prefix=/usr/local all$ sudo make prefix=/usr/local install</code></pre><h4 id="3-2-下载安装"><a href="#3-2-下载安装" class="headerlink" title="3.2 下载安装"></a>3.2 下载安装</h4><p>下载链接:<a href="https://git-scm.com/download" target="_blank" rel="noopener">https://git-scm.com/download</a></p><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210323112938347.png" alt="image-20210323112938347"></p><p>安装完成后在电脑桌面（也可以是其他目录）点击右键，如果能够看到如下两个菜单则说明 Git 安装成功。</p><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210323113735053.png" alt="image-20210323113735053"></p><p><strong>Git GUI：Git 提供的图形界面工具<br>Git Bash：Git 提供的命令行工具</strong></p><h2 id="4-Git-使用步骤"><a href="#4-Git-使用步骤" class="headerlink" title="4.Git 使用步骤"></a>4.Git 使用步骤</h2><h3 id="4-1-常用的-Git-代码托管服务"><a href="#4-1-常用的-Git-代码托管服务" class="headerlink" title="4.1 常用的 Git 代码托管服务"></a>4.1 常用的 Git 代码托管服务</h3><pre class=" language-sh"><code class="language-sh">#前面我们已经知道了Git中存在两种类型的仓库，即本地仓库和远程仓库。那么我们如何搭建Git远程仓库呢？我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有GitHub、码云、GitLab等。gitHub（ 地址：https://github.com/ ）是一个面向开源及私有软件项目的托管平台，因为只支持Git 作为唯一的版本库格式进行托管，故名gitHub码云（地址： https://gitee.com/ ）是国内的一个代码托管平台，由于服务器在国内，所以相比于GitHub，码云速度会更快GitLab （地址： https://about.gitlab.com/ ）是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务</code></pre><h3 id="4-2-以码云为例创建项目"><a href="#4-2-以码云为例创建项目" class="headerlink" title="4.2 以码云为例创建项目"></a>4.2 以码云为例创建项目</h3><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210323114455106.png" alt="image-20210323114455106"></p><p>说明：readme 文件是用来描述这个项目的，里面用 md 格式编写，然后能展示在项目的下面的。</p><p>例如：<img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210323145316575.png" alt="image-20210323145316575"></p><p>-</p><h2 id="5-Git-安装配置"><a href="#5-Git-安装配置" class="headerlink" title="5.Git 安装配置"></a>5.Git 安装配置</h2><h3 id="5-1git-配置"><a href="#5-1git-配置" class="headerlink" title="5.1git 配置"></a>5.1git 配置</h3><p><strong>Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。</strong></p><p><strong>这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</strong></p><ul><li><strong><code>/etc/gitconfig</code> 文件：系统中对所有用户都普遍适用的配置。若使用 <code>git config</code> 时用 <code>--system</code> 选项，读写的就是这个文件。</strong></li><li><strong><code>~/.gitconfig</code> 文件：用户目录下的配置文件只适用于该用户。若使用 <code>git config</code> 时用 <code>--global</code> 选项，读写的就是这个文件。</strong></li><li><strong>当前项目的 Git 目录中的配置文件（也就是工作目录中的 <code>.git/config</code> 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 <code>.git/config</code> 里的配置会覆盖 <code>/etc/gitconfig</code> 中的同名变量。</strong></li></ul><p><strong>在 Windows 系统上，Git 会找寻用户主目录下的 .gitconfig 文件。主目录即 $HOME 变量指定的目录，一般都是 C:\Documents and Settings$USER。</strong></p><p><strong>此外，Git 还会尝试找寻 /etc/gitconfig 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。</strong></p><h4 id="5-1-1-用户信息"><a href="#5-1-1-用户信息" class="headerlink" title="5.1.1 用户信息"></a>5.1.1 用户信息</h4><p><strong>配置个人的用户名称和电子邮件地址：</strong></p><pre class=" language-sh"><code class="language-sh">#当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息#1.设置用户信息git config --global user.name “itcast”git config --global user.email “kinggm520@163.com”    如果用了 --global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。    如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 --global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。这样只有这个项目使用这个信息。</code></pre><h4 id="5-1-2-编辑个人信息"><a href="#5-1-2-编辑个人信息" class="headerlink" title="5.1.2 编辑个人信息"></a>5.1.2 编辑个人信息</h4><pre class=" language-sh"><code class="language-sh">编辑 git 配置文件:$ git config -e    # 针对当前仓库或者：$ git config -e --global   # 针对系统上所有仓库</code></pre><h4 id="5-1-3-文本编辑器"><a href="#5-1-3-文本编辑器" class="headerlink" title="5.1.3 文本编辑器"></a>5.1.3 文本编辑器</h4><pre class=" language-sh"><code class="language-sh">#设置Git默认使用的文本编辑器, 一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置：$ git config --global core.editor emacs</code></pre><h4 id="5-1-4-查看配置信息"><a href="#5-1-4-查看配置信息" class="headerlink" title="5.1.4 查看配置信息"></a>5.1.4 查看配置信息</h4><pre class=" language-sh"><code class="language-sh">#1.查看配置信息git config --listgit config user.name</code></pre><h2 id="6-Git-工作流程"><a href="#6-Git-工作流程" class="headerlink" title="6.Git 工作流程"></a>6.Git 工作流程</h2><p>一般工作流程如下：</p><ul><li>克隆 Git 资源作为工作目录。</li><li>在克隆的资源上添加或修改文件。</li><li>如果其他人修改了，你可以更新资源。</li><li>在提交前查看修改。</li><li>提交修改。</li><li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li></ul><p>工作流程图：</p><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210425141221210.png" alt="image-20210425141221210"></p><h2 id="7-git-图解本地工作区·缓存区·本地仓库·远程仓库"><a href="#7-git-图解本地工作区·缓存区·本地仓库·远程仓库" class="headerlink" title="7. git 图解本地工作区·缓存区·本地仓库·远程仓库"></a>7. git 图解本地工作区·缓存区·本地仓库·远程仓库</h2><ul><li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li><li><strong>暂存区：</strong>英文叫 stage 或 index。一般存放在 <strong>.git</strong> 目录下的 index 文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li><li><strong>版本库：</strong>工作区有一个隐藏目录 <strong>.git</strong>，这个不算工作区，而是 Git 的版本库。</li></ul><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210423172659919.png" alt="image-20210423172659919"></p><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210423172723375.png" alt="image-20210423172723375"></p><ul><li>图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage/index），标记为 “master” 的是 master 分支所代表的目录树。</li><li>图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个”游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。</li><li>图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下，里面包含了创建的各种对象及内容。</li><li>当对工作区修改（或新增）的文件执行 <strong>git add</strong> 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的 ID 被记录在暂存区的文件索引中。</li><li>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</li><li>当执行 <strong>git reset HEAD</strong> 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</li><li>当执行 <strong>git rm –cached <file></file></strong> 命令时，会直接从暂存区删除文件，工作区则不做出改变。</li><li>当执行 <strong>git checkout .</strong> 或者 <strong>git checkout – <file></file></strong> 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</li><li>当执行 <strong>git checkout HEAD .</strong> 或者 <strong>git checkout HEAD <file></file></strong> 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</li></ul><h2 id="8-Git-创建仓库"><a href="#8-Git-创建仓库" class="headerlink" title="8.Git 创建仓库"></a>8.Git 创建仓库</h2><h4 id="8-1-获取-Git-仓库"><a href="#8-1-获取-Git-仓库" class="headerlink" title="8.1 获取 Git 仓库"></a>8.1 获取 Git 仓库</h4><pre class=" language-sh"><code class="language-sh">#要使用Git对我们的代码进行版本控制，首先需要获得Git仓库#获取Git仓库通常有两种方式：1.在本地初始化一个Git仓库2.从远程仓库克隆</code></pre><h5 id="8-1-1-从本地初始化一个-Git-仓库"><a href="#8-1-1-从本地初始化一个-Git-仓库" class="headerlink" title="8.1.1 从本地初始化一个 Git 仓库"></a>8.1.1 从本地初始化一个 Git 仓库</h5><pre class=" language-sh"><code class="language-sh">#1.使用当前目录作为Git仓库，我们只需使它初始化。git init#2.使用我们指定目录作为Git仓库。git init newrepo初始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：$ git add *.c$ git add README$ git commit -m '初始化项目版本'**注：** 在 Linux 系统中，commit 信息使用单引号 **'**，Windows 系统，commit 信息使用双引号 **"**。所以在 git bash 中 **git commit -m '提交说明'** 这样是可以的，在 Windows 命令行中就要使用双引号 **git commit -m "提交说明"**。</code></pre><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210323150352960.png" alt="image-20210323150352960"></p><h5 id="8-1-2-从远程仓库克隆"><a href="#8-1-2-从远程仓库克隆" class="headerlink" title="8.1.2 从远程仓库克隆"></a>8.1.2 从远程仓库克隆</h5><p>​ 可以通过 Git 提供的命令从远程仓库进行克隆，将远程仓库克隆到本地<br>​ 命令形式为：git clone 远程 Git 仓库地址</p><pre class=" language-sh"><code class="language-sh">#我们使用 git clone 从现有 Git 仓库中拷贝项目（类似 svn checkout）。克隆仓库的命令格式为：git clone <repo>#如果我们需要克隆到指定的目录，可以使用以下命令格式：git clone <repo> <directory>#执行该命令后，会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：$ git clone git://github.com/schacon/grit.git mygrit</code></pre><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210323151342389.png" alt="image-20210323151342389"></p><h2 id="9-Git-基本操作"><a href="#9-Git-基本操作" class="headerlink" title="9. Git 基本操作"></a>9. Git 基本操作</h2><p><strong>Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。</strong></p><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210426083747674.png" alt="image-20210426083747674"></p><h3 id="9-1-git-add-文件加入暂存区"><a href="#9-1-git-add-文件加入暂存区" class="headerlink" title="9.1 git add(文件加入暂存区)"></a>9.1 git add(文件加入暂存区)</h3><p><strong>git add</strong> 命令可将该文件添加到暂存区。</p><p><strong>1.添加一个或多个文件到暂存区</strong></p><pre class=" language-sh"><code class="language-sh">git add [file1] [file2] ...</code></pre><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210426084951892.png" alt="image-20210426084951892"></p><p><strong>2.添加指定目录到暂存区，包括子目录</strong></p><pre class=" language-sh"><code class="language-sh">git add [dir]</code></pre><p><strong>3.添加当前目录下的所有文件到暂存区</strong></p><pre class=" language-sh"><code class="language-sh">git add .</code></pre><h3 id="9-2-git-status-查看暂存区文件状态"><a href="#9-2-git-status-查看暂存区文件状态" class="headerlink" title="9.2 git status(查看暂存区文件状态)"></a>9.2 git status(查看暂存区文件状态)</h3><p><strong>git status 命令用于查看在你上次提交之后是否有对文件进行再次修改。</strong></p><pre class=" language-sh"><code class="language-sh">#查看的比较详细，其中绿色的表示提交的加入暂存区的文件git status</code></pre><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210426085755483.png" alt="image-20210426085755483"></p><p><strong>git status -s 通常我们使用 -s 参数来获得简短的输出结果</strong></p><pre class=" language-sh"><code class="language-sh">git status -s</code></pre><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210426085947648.png" alt="image-20210426085947648"></p><h3 id="9-3-git-diff-比较文件不同"><a href="#9-3-git-diff-比较文件不同" class="headerlink" title="9.3 git diff (比较文件不同)"></a>9.3 git diff (比较文件不同)</h3><p><strong>1.git diff：是查看 workspace 与 index 的差别的。</strong></p><pre class=" language-sh"><code class="language-sh">git diff</code></pre><p>我们新建文件 6.txt 然后加入 11111 文件然后使用 git add .提交到暂存区,然后在文件后面加上 2222，在使用 git diff 命令</p><p>修改前：</p><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210426102530373.png" alt="image-20210426102530373"></p><p>修改后：</p><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210426102827982.png" alt="image-20210426102827982"></p><p>结果：</p><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210426103012238.png" alt="image-20210426103012238"></p><pre class=" language-sh"><code class="language-sh">#结果说明：第一行表示结果为git格式的diffdiff --git a/6.txt b/6.txt进行比较的是,a版本的6(即变动前)和b版本的6(即变动后)。第二行表示两个版本的git哈希值和最后的六位数字是对象的模式index 56b6510..a05a48c 100644index区域的56b6510对象,与工作目录区域的a05a48c对象进行比较 后面100代表普通文件，644代表文件具有的权限（同linux文件权限）第三四行表示进行比较的两个文件--- a/6.txt+++ b/6.txt"-“表示变动前的版本，”+++"表示变动后的版本。第五行表示代码变动的位置用两个@作为起首和结束@@ -1 +1 @@"-1,7″分成三个部分：减号表示第一个文件(即f1)，"1″表示第1行，“7″表示连续7行。合在一起，就表示下面是第一个文件第1行做了开始同样的，”+1″表示变动后，成为第二个文件从第1行开始第三部分是变动的具体内容-11111\ No newline at end of file+111112222\ No newline at end of file变动的行，每一行最前面的标志位：“-”代表第一个文件删除的行用红色表示，“+”表示第二个文件新增的行用绿色表示，如果是白色无标志表示该行无变动。</code></pre><p><strong>2.git diff –cached 或 git diff –staged [file] 是查看 index 与 local repositorty 的差别的。</strong></p><p><strong>3.git diff HEAD：是查看 workspace 和 local repository 的差别的。（HEAD 指向的是 local repository 中最新提交的版本</strong></p><p><strong>4.$ git diff test</strong><br><strong>上面的命令会显示你当前工作目录与另外一个叫’test’分支的差别。</strong></p><p><strong>5.$ git diff HEAD – ./lib</strong><br><strong>上面这条命令会显示你当前工作目录下的 lib 目录与上次提交之间的差别(或者更准确的 说是在当前分支)。</strong></p><p><strong>6.$ git diff –stat</strong><br><strong>上面的命令会统计一下有哪些文件被改动，有多少行被改动</strong></p><h3 id="9-4-git-commit-提交到版本库"><a href="#9-4-git-commit-提交到版本库" class="headerlink" title="9.4 git commit(提交到版本库)"></a>9.4 git commit(提交到版本库)</h3><p><strong>1.git commit 命令将暂存区内容添加到本地仓库中。</strong></p><pre class=" language-sh"><code class="language-sh">#提交暂存区到本地仓库中:[message] 可以是一些备注信息。git commit -m [message]</code></pre><p><strong>2.提交多个指定文件到仓库区：</strong></p><pre class=" language-sh"><code class="language-sh">$ git commit [file1] [file2] ... -m [message]</code></pre><p><strong>3.-a 参数设置修改文件后不需要执行 git add 命令，直接来提交</strong></p><pre class=" language-sh"><code class="language-sh">#加了-a，在 commit 的时候，能帮你省一步 git add ，但也只是对修改和删除文件有效， 新文件还是要 git add，不然就是 untracked 状态$ git commit -a -m [message]</code></pre><p><strong>4.Git 工作目录下文件的状态</strong></p><ul><li><strong>#Git 工作目录下的文件存在两种状态：</strong></li><li><strong>untracked 未跟踪（未被纳入版本控制）</strong></li><li><strong>tracked 已跟踪（被纳入版本控制）</strong></li><li><strong>Unmodified 未修改状态</strong></li><li><strong>Modified 已修改状态</strong></li><li><strong>Staged 已暂存状态</strong></li><li><strong>这些文件的状态会随着我们执行 Git 的命令发生变化</strong></li></ul><h3 id="9-5-git-reset"><a href="#9-5-git-reset" class="headerlink" title="9.5 git reset"></a>9.5 git reset</h3><p><strong>git reset 并不会产生 commits 它只是改变了当前 HEAD 指向的 commits。</strong></p><h4 id="9-5-1-git-reset-–soft"><a href="#9-5-1-git-reset-–soft" class="headerlink" title="9.5.1 git reset –soft"></a>9.5.1 git reset –soft</h4><pre class=" language-sh"><code class="language-sh">#跳转到指定版本、不还原缓存区、不还原工作区。$ git  reset --soft 版本号          # 整个项目回退到指定版本$ git reset HEAD^            # 整个项目回退所有内容到上一个版本$ git reset HEAD^ hello.php  # 回退 hello.php 文件的版本到上一个版本$ git reset HEAD~1           # 整个项目回退所有内容到上一个版本$ git reset HEAD~1 hello.php # 回退 hello.php 文件的版本到上一个版本</code></pre><h4 id="9-5-2-git-reset-–mixed"><a href="#9-5-2-git-reset-–mixed" class="headerlink" title="9.5.2 git reset –mixed"></a>9.5.2 git reset –mixed</h4><pre class=" language-sh"><code class="language-sh"># --mixed 为默认，  跳转到指定版本、还原缓存区、不还原工作区。$ git  reset  版本号          # 整个项目回退到指定版本</code></pre><h4 id="9-5-3-git-reset-–hard"><a href="#9-5-3-git-reset-–hard" class="headerlink" title="9.5.3 git reset –hard"></a>9.5.3 git reset –hard</h4><pre class=" language-sh"><code class="language-sh"># --head 跳转到指定版本、还原缓存区、还原工作区（原理：将本库的头指针全部重置到指定版本）HEAD 就是当前活跃分支的游标。形象的记忆就是：你现在在哪儿，HEAD 就指向哪儿，所以 Git 才知道你在那儿！ 不过 HEAD并非只能指向分支的最顶端（时间节点距今最近的那个），实际上它可以指向任何一个节点，它就是 Git 内部用来追踪当前位置的东东。$ git  reset  --hard 版本号</code></pre><h3 id="9-6-git-rm-命令"><a href="#9-6-git-rm-命令" class="headerlink" title="9.6 git rm 命令"></a>9.6 git rm 命令</h3><h5 id="9-6-1-git-rm-文件名字-删除暂存区文件和工作区文件"><a href="#9-6-1-git-rm-文件名字-删除暂存区文件和工作区文件" class="headerlink" title="9.6.1 git rm 文件名字(删除暂存区文件和工作区文件)"></a>9.6.1 git rm 文件名字(删除暂存区文件和工作区文件)</h5><pre class=" language-sh"><code class="language-sh">#1. git rm 文件名字 将文件从暂存区和工作区中删除,注意文件夹要加 git rm -r 文件删除完工作区文件后查询状态显示删除,因为删除的是暂存区数据所以,这时候需要提交操作才能提交到本地仓库影响到本地仓库git rm <file></code></pre><h5 id="9-6-2-git-rm-–cached-文件名字-删除暂存区文件"><a href="#9-6-2-git-rm-–cached-文件名字-删除暂存区文件" class="headerlink" title="9.6.2 git rm –cached 文件名字(删除暂存区文件)"></a>9.6.2 git rm –cached 文件名字(删除暂存区文件)</h5><pre class=" language-sh"><code class="language-sh">git rm 文件名字 --cached</code></pre><h3 id="9-7git-mv-命令"><a href="#9-7git-mv-命令" class="headerlink" title="9.7git mv 命令"></a>9.7git mv 命令</h3><h4 id="9-7-1-git-mv-oldFile-new-File-移动或重命名"><a href="#9-7-1-git-mv-oldFile-new-File-移动或重命名" class="headerlink" title="9.7.1 git mv oldFile new File(移动或重命名)"></a>9.7.1 git mv oldFile new File(移动或重命名)</h4><pre class=" language-sh"><code class="language-sh">#将修改指定文件名字git mv [file] [newfile]</code></pre><h4 id="9-7-2-git-mv-f-oldFile-new-File-当文件名已经存在时候强制移动或重命名"><a href="#9-7-2-git-mv-f-oldFile-new-File-当文件名已经存在时候强制移动或重命名" class="headerlink" title="9.7.2 git mv -f oldFile new File(当文件名已经存在时候强制移动或重命名)"></a>9.7.2 git mv -f oldFile new File(当文件名已经存在时候强制移动或重命名)</h4><pre class=" language-sh"><code class="language-sh">#注意这时候这个文件会覆盖原本的文件git mv -f [file] [newfile]</code></pre><h3 id="9-8-git-remote-命令"><a href="#9-8-git-remote-命令" class="headerlink" title="9.8 git remote 命令"></a>9.8 git remote 命令</h3><h4 id="9-8-1-git-remote-查看远端仓库"><a href="#9-8-1-git-remote-查看远端仓库" class="headerlink" title="9.8.1 git remote(查看远端仓库)"></a>9.8.1 git remote(查看远端仓库)</h4><p>​ 如果想查看已经配置的远程仓库服务器，可以运行 <strong>git remote</strong> 命令。 它会列出指定的每一个远程服务器的简写。 如果已经克隆了远程仓库，那么至少应该能看到 origin ，这是 Git 克隆的仓库服务器的默认名字</p><pre class=" language-sh"><code class="language-sh">#查看远端仓库git remoteorigin: Git里面的origin就是一个名字，它是在你clone一个托管在Github上代码库时，git为你默认创建的指向这个远程代码库的标签。</code></pre><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210330221453369.png" alt="image-20210330221453369"></p><pre class=" language-sh"><code class="language-sh">#看详细版本信息git remote -v</code></pre><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210330221648280.png" alt="image-20210330221648280"></p><h4 id="9-8-2git-remote-rm-移除无效的远程仓库"><a href="#9-8-2git-remote-rm-移除无效的远程仓库" class="headerlink" title="9.8.2git remote rm(移除无效的远程仓库)"></a>9.8.2git remote rm(移除无效的远程仓库)</h4><p>如果因为一些原因想要移除一个远程仓库 ，可以使用 git remote rm</p><pre class=" language-sh"><code class="language-sh">#删除远端仓库 注意：此命令只是从本地移除远程仓库的记录，并不会真正影响到远程仓库git remote rm 仓库名字</code></pre><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210330221900433.png" alt="image-20210330221900433"></p><h4 id="9-8-3-git-remote-add-添加远程仓库"><a href="#9-8-3-git-remote-add-添加远程仓库" class="headerlink" title="9.8.3 git remote add (添加远程仓库)"></a>9.8.3 git remote add (添加远程仓库)</h4><p>运行 git remote add &lt; shortname&gt; &lt; url&gt; 添加一个新的远程 Git 仓库，同时指定一个可以引用的简写</p><pre class=" language-sh"><code class="language-sh">#添加远端仓库,仓库名称默认是origin 当我们添加远端仓库时候可以指定这个仓库名字 git remote add 仓库名字别名 仓库地址git remote add 仓库名字(仓库起一个别名) 仓库地址url例子:git remote add origin https://gitee.com/qaqxidu/demo1.git</code></pre><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210330222027857.png" alt="image-20210330222027857"></p><h4 id="9-8-34-git-remote-rename-重命名远程仓库"><a href="#9-8-34-git-remote-rename-重命名远程仓库" class="headerlink" title="9.8.34 (git remote rename)重命名远程仓库"></a>9.8.34 (git remote rename)重命名远程仓库</h4><pre class=" language-sh"><code class="language-sh"># 修改仓库名git remote rename old_name new_name</code></pre><h3 id="9-9-git-fetch-pull-push"><a href="#9-9-git-fetch-pull-push" class="headerlink" title="9.9 git fetch/pull/push"></a>9.9 git fetch/pull/push</h3><p>抓取：</p><p>​ git fetch 是从远程仓库获取最新版本到本地仓库，不会自动 merge</p><pre class=" language-sh"><code class="language-sh"># 1.抓取到本地仓库git fetch origin master#2. 进行合并 合并后工作区才回出现拉取下来的文件git merge origin/master</code></pre><p>拉取：</p><p>git pull 是从远程仓库获取最新版本并 merge 到本地仓库</p><pre class=" language-sh"><code class="language-sh">#命令（本地工作区直接最出现拉取下来的文件）下面命令表示，取回 origin/master 分支，再与本地的 master 分支合并,如果远程分支是与当前分支合并，则冒号后面的部分可以省略。同理推送时候也是git pull origin master:master**注意：**如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉取文件的时候会报错（fatal: refusing to merge unrelated histories ），解决此问题可以在git pull命令后加入参数–allow-unrelated-histories当执行git中的“git pull origin master –allow-unrelated-histories”命令时，会出现“ couldn’t find remote ref –allow-unrelated-histories”的错误，输入如下命令即可解决：git pull --rebase origin master</code></pre><p>概念说明:</p><pre class=" language-sh"><code class="language-sh">#你clone本地仓库的时候被clone的远端仓库默认被称为 origin。 所以如果你想向/从这个远端仓库push/pull 的时候，用 origin 指代这个远端仓库。你可以在 .git/config 之中进行修改事实上 git push origin master 的意思是 git push origin master:master （将本地的 master 分支推送至远端的 master 分支，如果没有就新建一个）</code></pre><p>推送:</p><p>您可以将新的更改推<code>master</code>回到<code>origin</code>：</p><pre class=" language-sh"><code class="language-sh">#命令形式：git push [remote-name] [branch-name]git push origin master</code></pre><h2 id="10-Git-分支管理"><a href="#10-Git-分支管理" class="headerlink" title="10.Git 分支管理"></a>10.Git 分支管理</h2><p>​ <strong>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</strong></p><p>​ <strong>有人把 Git 的分支模型称为必杀技特性，而正是因为它，将 Git 从版本控制系统家族里区分出来。</strong></p><h4 id="10-1-查看分支命令"><a href="#10-1-查看分支命令" class="headerlink" title="10.1 查看分支命令"></a>10.1 查看分支命令</h4><pre class=" language-sh"><code class="language-sh">#1.列出所有本地分支 其中绿色表示单前分支是mastergit branch#2.列出所有远程分支(其中前面带origin的就是远程分支)git branch -r#3.列出所有本地分支和远程分支git branch -a</code></pre><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210330225142644.png" alt="image-20210330225142644"></p><h4 id="10-2-创建分支"><a href="#10-2-创建分支" class="headerlink" title="10.2 创建分支"></a>10.2 创建分支</h4><pre class=" language-sh"><code class="language-sh">#创建分支git branch 分支名字</code></pre><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210330225448687.png" alt="image-20210330225448687"></p><h4 id="10-3-切换分支"><a href="#10-3-切换分支" class="headerlink" title="10.3 切换分支"></a>10.3 切换分支</h4><pre class=" language-sh"><code class="language-sh">#切换分支切换分支到master2,下图表示当前分支是在master上然后我们切换到master2上#当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。git checkout master2#表示创建master3分支并切换到这个分支git checkout -b master3</code></pre><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210330225704543.png" alt="image-20210330225704543"></p><h4 id="10-4-删除分支"><a href="#10-4-删除分支" class="headerlink" title="10.4 删除分支"></a>10.4 删除分支</h4><pre class=" language-sh"><code class="language-sh">#删除指定分支 不能删除当前分支git branch -d 删除的分支名字#如果要删除的分支中进行了一些开发动作（提交到远端），此时执行上面的删除命令并不会删除分支，如果坚持要删除此分支，可以将命令中的-d参数改为-Dgit branch -D 删除的分支名字#在删除远端的一个分支：git push origin :newBranch (分支名前的冒号代表删除)或 git push origin --delete 分支名字</code></pre><h4 id="10-5-合并分支"><a href="#10-5-合并分支" class="headerlink" title="10.5 合并分支"></a>10.5 合并分支</h4><pre class=" language-sh"><code class="language-sh">#合并分支git merge 当前要合并的分支名字说明:有时候合并操作不会如此顺利。 如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没办法合并它们，同时会提示文件冲突。此时需要我们打开冲突的文件并修复冲突内容，最后执行git add命令来标识冲突已解决#一般建议在做这样的操作之前, 新建一个 branch 当作备份. 但就算是你不备份, git reflog 也会是最后一道强大的防护网, 通过它能够回到最近的一系列 repo 的状态上.</code></pre><h4 id="10-6-推送至远程仓库分支"><a href="#10-6-推送至远程仓库分支" class="headerlink" title="10.6 推送至远程仓库分支"></a>10.6 推送至远程仓库分支</h4><pre class=" language-sh"><code class="language-sh">#把master2分支推送到远端仓库git push origin master2</code></pre><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210330225927391.png" alt="image-20210330225927391"></p><h4 id="10-7-合并分支"><a href="#10-7-合并分支" class="headerlink" title="10.7 合并分支"></a>10.7 合并分支</h4><pre class=" language-sh"><code class="language-sh">#合并分支git merge 当前要合并的分支名字说明:有时候合并操作不会如此顺利。 如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没办法合并它们，同时会提示文件冲突。此时需要我们打开冲突的文件并修复冲突内容，最后执行git add命令来标识冲突已解决#建议在做这样的操作之前, 新建一个 branch 当作备份. 但就算是你不备份, git reflog 也会是最后一道强大的防护网, 通过它能够回到最近的一系列 repo 的状态上.</code></pre><h4 id="10-8-综合使用"><a href="#10-8-综合使用" class="headerlink" title="10.8 综合使用"></a>10.8 综合使用</h4><p>​ <strong>因为创建、合并和删除分支非常快，所以 Git 鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</strong></p><p><strong>所以我们一般都是在新建自己的分支然后开发完成后把自己分支合并到主的 master 分支上</strong></p><pre class=" language-sh"><code class="language-sh">#1.首先，我们创建dev分支，然后切换到dev分支$ git checkout -b devSwitched to a new branch 'dev'#2.git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：$ git branch dev$ git checkout devSwitched to branch 'dev'#3.然后，用git branch命令查看当前分支：$ git branch* dev  master#4.git branch命令会列出所有分支，当前分支前面会标一个*号。#然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行：Creating a new branch is quick.#5.然后提交：$ git add readme.txt$ git commit -m "branch test"[dev fec145a] branch test 1 file changed, 1 insertion(+)#6.现在，dev分支的工作完成，我们就可以切换回master分支：$ git checkout masterSwitched to branch 'master'#7.切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：git-br-on-master#8.现在，我们把dev分支的工作成果合并到master分支上：$ git merge devUpdating d17efd8..fec145aFast-forward readme.txt |    1 + 1 file changed, 1 insertion(+)#9.git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。</code></pre><h2 id="11-查看提交历史"><a href="#11-查看提交历史" class="headerlink" title="11.查看提交历史"></a>11.查看提交历史</h2><p><strong>Git 提交历史一般常用两个命令：</strong></p><ul><li><strong>git log</strong> - 查看历史提交记录。</li><li><strong>git blame <file></file></strong> - 以列表形式查看指定文件的历史修改记录。</li></ul><h3 id="11-1-git-log"><a href="#11-1-git-log" class="headerlink" title="11.1 git log"></a>11.1 git log</h3><h4 id="11-1-1-git-log"><a href="#11-1-1-git-log" class="headerlink" title="11.1.1 git log"></a>11.1.1 git log</h4><pre class=" language-sh"><code class="language-sh">#命令列出历史提交记录如下默认是根据时间从上往下倒序git log#根据时间倒序查看git log --reverse</code></pre><h4 id="11-1-2-git-log-–oneline-简洁版日志"><a href="#11-1-2-git-log-–oneline-简洁版日志" class="headerlink" title="11.1.2 git log –oneline(简洁版日志)"></a>11.1.2 git log –oneline(简洁版日志)</h4><pre class=" language-sh"><code class="language-sh">#查看历史记录的简洁的版本。git log --oneline</code></pre><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210426142940501.png" alt="image-20210426142940501"></p><h4 id="11-1-2-git-log-–graph-开启了拓扑图选项"><a href="#11-1-2-git-log-–graph-开启了拓扑图选项" class="headerlink" title="11.1.2 git log –graph(开启了拓扑图选项)"></a>11.1.2 git log –graph(开启了拓扑图选项)</h4><pre class=" language-sh"><code class="language-sh">#开启了拓扑图选项git log --graph</code></pre><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210426143200275.png" alt="image-20210426143200275"></p><h4 id="11-1-13-git-log-–author-查看某个账号的日志记录"><a href="#11-1-13-git-log-–author-查看某个账号的日志记录" class="headerlink" title="11.1.13 git log –author(查看某个账号的日志记录)"></a>11.1.13 git log –author(查看某个账号的日志记录)</h4><pre class=" language-sh"><code class="language-sh">#查看指定用户提交记录git log --author例子：git log --author 15036563343@139.com</code></pre><h4 id="11-1-14-git-reflog"><a href="#11-1-14-git-reflog" class="headerlink" title="11.1.14. git reflog"></a>11.1.14. git reflog</h4><pre class=" language-sh"><code class="language-sh">#可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）</code></pre><h3 id="11-2-git-blame"><a href="#11-2-git-blame" class="headerlink" title="11.2 git blame"></a>11.2 git blame</h3><p>如果要查看指定文件的修改记录可以使用 git blame 命令，格式如下：</p><pre class=" language-sh"><code class="language-sh">git blame <file></code></pre><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210426143614939.png" alt="image-20210426143614939"></p><h2 id="12-Git-标签"><a href="#12-Git-标签" class="headerlink" title="12. Git 标签"></a>12. Git 标签</h2><p><strong>标签介绍</strong></p><p>​ <strong>发布一个版本时，我们通常先在版本库中打一个标签（tag），这样就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。</strong></p><p><strong>-a 选项意为”创建一个带注解的标签”。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。</strong></p><pre class=" language-sh"><code class="language-sh">Git有commit，为什么还要引入tag？"请把上周一的那个版本打包发布，commit号是6a5819e…""一串乱七八糟的数字不好找！"如果换一个办法："请把上周一的那个版本打包发布，版本号是v1.2""好的，按照tag v1.2查找commit就行！"所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</code></pre><h3 id="12-1-列出所有标签"><a href="#12-1-列出所有标签" class="headerlink" title="12.1 列出所有标签"></a>12.1 列出所有标签</h3><pre class=" language-sh"><code class="language-sh">#列出所有tag git tag</code></pre><h3 id><a href="#" class="headerlink" title></a><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210426165612095.png" alt="image-20210426165612095"></h3><h3 id="12-2-查看标签信息"><a href="#12-2-查看标签信息" class="headerlink" title="12.2 查看标签信息"></a>12.2 查看标签信息</h3><pre class=" language-sh"><code class="language-sh"> # 查看tag信息 git show [tag]</code></pre><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210421134607934.png" alt="image-20210421134607934"></p><h3 id="12-3-创建新标签"><a href="#12-3-创建新标签" class="headerlink" title="12.3 创建新标签"></a>12.3 创建新标签</h3><pre class=" language-sh"><code class="language-sh">#新建一个taggit tag -a <tagname> -m "runoob.com标签"#如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。git tag -a v0.9 -m "runoob.com标签" 版本号</code></pre><p><img src="/2021/07/16/Git%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/image-20210421134701333.png" alt="image-20210421134701333"></p><h3 id="12-4-将标签推送至远程仓库"><a href="#12-4-将标签推送至远程仓库" class="headerlink" title="12.4 将标签推送至远程仓库"></a>12.4 将标签推送至远程仓库</h3><pre class=" language-sh"><code class="language-sh">#提交指定taggit push origin [tag]</code></pre><h3 id="12-5-检出标签"><a href="#12-5-检出标签" class="headerlink" title="12.5 检出标签"></a>12.5 检出标签</h3><pre class=" language-sh"><code class="language-sh">#新建一个分支，指向某个taggit checkout -b [branch] [tag]</code></pre><h3 id="12-6-删除标签"><a href="#12-6-删除标签" class="headerlink" title="12.6 删除标签"></a>12.6 删除标签</h3><pre class=" language-sh"><code class="language-sh"># 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tag]</code></pre><h2 id="13-HEAD-说明"><a href="#13-HEAD-说明" class="headerlink" title="13.HEAD 说明"></a>13.HEAD 说明</h2><pre class=" language-sh"><code class="language-sh">1.在[版本回退])里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即`master`分支。`HEAD`严格来说不是指向提交，而是指向`master`，`master`才是指向提交的，所以，`HEAD`指向的就是当前分支。一开始的时候，`master`分支是一条线，Git用`master`指向最新的提交，再用`HEAD`指向`master`，就能确定当前分支，以及当前分支的提交点：2.每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长：当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：3.你看，Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：</code></pre><h2 id="14-解决冲突问题"><a href="#14-解决冲突问题" class="headerlink" title="14.解决冲突问题"></a>14.解决冲突问题</h2><h3 id="14-1-说明"><a href="#14-1-说明" class="headerlink" title="14.1 说明"></a>14.1 说明</h3><pre class=" language-sh"><code class="language-sh">#复制代码提交时发生冲突,你能解释冲突是如何产生的吗?你是如 何解决的?#方法11.如果开发时候远端修改了一个文件的第一行,而本地修改了一个文件第二行,那么可以直接用本地分支和远端分支进行合并就好了。如果远端修改第一行数据，本地也修改第一行数据,那么合并就会冲突,这时候需要手动进行删除分隔符然后手动合并。#方法22.发生冲突，也可以使用命令:通过git stash命令，把工作区的修改提交到栈区，目的是保存工作区的修改； 通过git pull命令，拉取远程分支上的代码并合并到本地分支，目的是消除冲突； 通过git stash pop命令，把保存在栈区的修改部分合并到最新的工作空间中,然后在提交一般什么情况下 我们会用到git stash命令？命令git stash是把工作区修改的内容存储在栈区。#说明：如果本地修改的这个文件第二行,而远端和修改这个文件的第二行,那么我么即使把本地第二行做的修改提交到stash中然后把远端第二行更新下来,然后在把栈的数据合并到本地时候,这时候也会提示合并冲突也需要进行手动修改.git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。git stash pop: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。git stash list: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。git stash clear: 清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。以下几种情况会使用到它：解决冲突文件时，会先执行git stash，然后解决冲突； 遇到紧急开发任务但目前任务不能提交时，会先执行git stash，然后进行紧急任务的开发，然后 通过git stash pop取出栈区的内容继续开发； 切换分支时，当前工作空间内容不能提交时，会先执行git stash再进行分支切换#3.强行冲掉之前的分支,用本地文件强行覆盖远程文件git push origin [分支名称] --force#4.如果使用merge我们提交到了远端了怎么撤回? 步骤1：先回退本地版本 git reset --soft 版本号 步骤2：使用--force强行提交会用本地版本覆盖远端的版本 git push origin 分支 --force</code></pre><h2 id="15-常见错误解决"><a href="#15-常见错误解决" class="headerlink" title="15.常见错误解决"></a>15.常见错误解决</h2><h3 id="1-git-push-u-和-git-branch-–set-upstream-to-区别"><a href="#1-git-push-u-和-git-branch-–set-upstream-to-区别" class="headerlink" title="1.git push -u 和 git branch –set-upstream-to 区别"></a>1.git push -u 和 git branch –set-upstream-to 区别</h3><pre class=" language-sh"><code class="language-sh"># git push -u origin/master master表示先把远程分支origin/master和本地分支master建立一个关联通道,然后在执行 push操作# git branch  --set-upstream-to=origin/master master表示把远程分支origin/master 和本地分支建立一个关联也就是：git push -u origin mybranch1 相当于 git push origin mybranch1 + git branch --set-upstream-to=origin/mybranch1 mybranch1当然只有我们有多个远程仓库或者,没有关联远程仓库时候才会这样进行操作,因为这样先执行本地分支和远程分支关联,否则会提示远程分支为被跟踪。</code></pre><p>解释说明：</p><p>​ 一般只有同时存在多个远程仓库时才会用到–set-upstream。每个 git branch 可以有个对应的 upstream。假设你有两个 upstream，分别叫 server1 和 server2，本地 master branch 的 upstream 是 server1 上的 master，那么当你不带参数直接输入 git pull 或者 git push 时，默认是对 server1 进行 pull/push。如果你成功运行”git push -u server2 master”，那么除了本地 branch 会被 push 到 server2 之外，还会把 server2 设置成 upstream。</p><p>​ $ git push -u origin master</p><p>​ 如果当前分支与多个主机存在追踪关系，那么这个时候-u 选项会指定一个默认主机，这样后面就可以不加任何参数使用 git push。</p><p>​ 上面命令将本地的 master 分支推送到 origin 主机，同时制定 origin 为默认主机,后面可以不加任何参数使用 git push 了<br>不带任何参数 git push 默认只推送当前分支，这种叫做 simple 方式此外,还有一种 matching 的方式,会推送所有对应的远程分支的本地分支，git2.0 之前默认采用的是 matching 方法,现在默采用 simple 方式</p>]]></content>
      
      
      <categories>
          
          <category> 版本控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gulp 基础知识总结</title>
      <link href="/2021/07/14/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/gulp/"/>
      <url>/2021/07/14/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/gulp/</url>
      
        <content type="html"><![CDATA[<h1 id="Gulp-基础知识总结"><a href="#Gulp-基础知识总结" class="headerlink" title="Gulp 基础知识总结"></a>Gulp 基础知识总结</h1><p><a href="https://www.bilibili.com/video/BV1yA411s72G?p=1" target="_blank" rel="noopener">参考链接</a></p><h2 id="一、了解-gulp"><a href="#一、了解-gulp" class="headerlink" title="一、了解 gulp"></a>一、了解 gulp</h2><h3 id="1-gulp-是什么"><a href="#1-gulp-是什么" class="headerlink" title="1. gulp 是什么"></a>1. gulp 是什么</h3><ul><li>是一个前端自动化打包构建工具；<ul><li>打包：就是把文件进行压缩、整合、移动等一系列操作；</li></ul></li></ul><h3 id="2-常见的前端打包构建工具"><a href="#2-常见的前端打包构建工具" class="headerlink" title="2. 常见的前端打包构建工具"></a>2. 常见的前端打包构建工具</h3><ul><li><strong>gulp</strong>：它是基于 <strong>流</strong> 的打包构建工具；</li><li><strong>webpack</strong>：它是基于 <strong>js</strong> 文件的打包构建工具；</li></ul><h3 id="3-什么是流"><a href="#3-什么是流" class="headerlink" title="3. 什么是流"></a>3. 什么是流</h3><ul><li><strong>流文件: 流</strong><ul><li>是一种文件传输的格式；</li><li>一段一段的文件传输；.</li></ul></li><li><strong>流格式: 流</strong><ul><li>是从头到尾的一个过程，相当于链式调用的结构过程；</li><li>需要从 源 开始一步一步经过加工，每一个步骤需要依赖上一步的结果，最终给出一个完整的结果；</li></ul></li><li><strong>gulp</strong> 是基于流格式的一种打包构建工具；</li></ul><h3 id="4-gulp-的依赖环境"><a href="#4-gulp-的依赖环境" class="headerlink" title="4. gulp 的依赖环境"></a>4. gulp 的依赖环境</h3><ul><li>依赖于 <strong>node</strong> 环境进行开发；</li><li>底层封装的内容就是 <strong>node</strong> 里面的读写文件（ <strong>fs</strong> 模块儿）；</li></ul><h3 id="5-gulp-的作用"><a href="#5-gulp-的作用" class="headerlink" title="5. gulp 的作用"></a>5. gulp 的作用</h3><ul><li><strong>css</strong> 文件：可以进行压缩、转码（自动添加解决兼容性的前缀）；</li><li><strong>js</strong> 文件： 可以进行压缩、转码（将 ES6 的语法转换成 ES5 的语法）；</li><li><strong>html</strong> 文件：压缩、转码（通过配置项自定义如何处理 <strong>html</strong> 文件）；</li><li>对于静态资源文件的处理；</li><li>对于第三方文件的处理；</li><li>……</li></ul><h3 id="6-gulp-的安装检测"><a href="#6-gulp-的安装检测" class="headerlink" title="6. gulp 的安装检测"></a>6. gulp 的安装检测</h3><ul><li><p>是一个 <strong>JavaScript</strong> 相关的工具，可以直接使用 npm 进行安装，需要安装再你的电脑环境里面, 一次安装多次使用，使用命令：</p><p><code>npm install --global gulp</code></p></li><li><p>检测 <strong>gulp</strong>：</p><p><code>gulp --version</code> 检测出 <strong>gulp cli 2.3.0</strong> 版本号代表 <strong>gulp@4</strong> 安装成功，检测出 <strong>gulp 3.9.1</strong> 代表 <strong>gulp@3</strong> 安装成功；</p></li></ul><h2 id="二、使用-gulp-的准备工作"><a href="#二、使用-gulp-的准备工作" class="headerlink" title="二、使用 gulp 的准备工作"></a>二、使用 gulp 的准备工作</h2><h3 id="1-首先准备一个项目"><a href="#1-首先准备一个项目" class="headerlink" title="1. 首先准备一个项目"></a>1. 首先准备一个项目</h3><ul><li><p>确定好目录结构</p><ul><li>gulp-demo<ul><li>src&emsp;&emsp;&emsp;&emsp;源码目录<ul><li>pages&emsp;&emsp;&emsp;html 文件目录</li><li>css&emsp;&emsp;&emsp;&emsp;css 文件目录</li><li>js&emsp;&emsp;&emsp;&emsp;&emsp;js 文件目录</li><li>sass&emsp;&emsp;&emsp;&emsp;scss 文件目录</li><li>images&emsp;&emsp;&emsp;图片</li><li>videos&emsp;&emsp;&emsp;视频</li><li>audios&emsp;&emsp;&emsp;音频</li><li>lib&emsp;&emsp;&emsp;&emsp;&emsp;第三方插件</li><li>fonts&emsp;&emsp;&emsp;&emsp;字体图标</li></ul></li></ul></li></ul></li><li><p>准备一个 gulpfile.js 的文件</p><ul><li>gulpfile.js 是 gulp 进行打包的依据，每一个项目需要一个 gulpfile.js，在这个文件里面进行本项目的打包配置；</li><li>gulp 在运行的时候, 会自动读取 gulpfile.js 文件里面的配置，按照你再 <strong>gulpfile.js</strong> 文件里面的配置进行打包工作；</li><li>注意: <strong>直接写在项目根目录, 和 src 同级</strong>；</li></ul></li><li><p>项目里面再次安装 gulp</p><ul><li><p>注意: <strong>项目里面的 gulp 是以第三方模块的形式出现的</strong>；</p></li><li><p>专门给你提供配置打包流程的 API 的，每一个项目都要安装一次，安装命令如下：</p><p><code>npm install gulp -D</code></p></li></ul></li><li><p>在 <strong>gulpfile.js</strong> 里面书写配置文件</p><ul><li>编写该项目的打包流程，写完以后, 按照打包流程去执行 gulp 指令运行 gulpfile.js 文件；</li></ul></li><li><p><strong>package.json</strong> 记录的第三方依赖</p><ul><li><strong>dependencies</strong>：表示项目的 <strong>项目依赖</strong>，比如 <strong>jquery, swiper</strong>，指项目运行需要用到的内容, 将来上线以后也需要用到的内容；</li><li><strong>devDependencies</strong>：表示项目的 <strong>开发依赖</strong>，比如 <strong>gulp</strong>，指项目开发阶段需要用到的内容, 将来上线以后不需要用到的依赖；</li><li><strong>gulp</strong> 第三方包最好是放在 <strong>devDependencies</strong>，在你安装第三方依赖的时候, 书写<code>$ npm install --dev</code> 包名，就会把依赖项记录在 <strong>devDependencies</strong></li></ul></li></ul><h2 id="三、认识-gulp-常用的-API"><a href="#三、认识-gulp-常用的-API" class="headerlink" title="三、认识 gulp 常用的 API"></a>三、认识 gulp 常用的 API</h2><p>前提：需要在项目中安装了 gulp 第三方后，通过<code>const xxx = require(&#39;xxx&#39;)</code>使用;</p><h3 id="1-gulp-task"><a href="#1-gulp-task" class="headerlink" title="1. gulp.task()"></a>1. gulp.task()</h3><ul><li><p>语法：<strong>gulp.task(任务名称, 任务处理函数)</strong>;</p></li><li><p>作用：创建一个基于流的任务；</p></li><li><p>例子：</p><pre class=" language-js"><code class="language-js">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'htmlHandler'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 找到 html 源文件, 进行压缩, 打包, 放入指定目录</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="2-gulp-src"><a href="#2-gulp-src" class="headerlink" title="2. gulp.src()"></a>2. gulp.src()</h3><ul><li><p>语法：<strong>gulp.src(路径信息)</strong>；</p></li><li><p>作用：找到源文件；</p></li><li><p>书写方式：</p><pre class=" language-js"><code class="language-js">gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./a/b.html'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2-1. -> 找到指定一个文件</span>gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./a/*.html'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2-2. -> 找到指定目录下, 指定后缀的文件</span>gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./a/**'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2-3. -> 找到指令目录下的所有文件</span>gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./a/** /*'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2-4. -> 找到 a 目录下所有子目录里面的所有文件</span>gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./a/** /*.html'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2-5. -> 找到 a 目录下所有子目录里面的所有 .html 文件</span></code></pre></li></ul><h3 id="3-gulp-dest"><a href="#3-gulp-dest" class="headerlink" title="3. gulp.dest()"></a>3. gulp.dest()</h3><ul><li>语法：<strong>gulp.dest(路径信息)</strong>；</li><li>作用：把一个内容放入指定目录内；</li><li>例子：<strong>gulp.dest(‘./abc’)</strong>， 把他接收到的内容放到 <strong>abc</strong> 目录下；</li></ul><h3 id="4-gulp-watch"><a href="#4-gulp-watch" class="headerlink" title="4. gulp.watch()"></a>4. gulp.watch()</h3><ul><li>语法：<strong>gulp.watch(路径信息, 任务名称)</strong>；</li><li>作用：监控指定目录下的文件, 一旦发生变化, 重新执行后面的任务；</li><li>例子: <code>gulp.watch(&#39;./src/pages/*.html&#39;, htmlHandler)</code> 当指定目录下的 html 文件发生变化, 就会执行 htmlHandler 这个任务;</li></ul><h3 id="5-gulp-series"><a href="#5-gulp-series" class="headerlink" title="5. gulp.series()"></a>5. gulp.series()</h3><ul><li>语法：<strong>gulp.series(任务 1, 任务 2, 任务 3, …)</strong>；</li><li>作用: 逐个执行多个任务, 前一个任务结束, 第二个任务开始；</li></ul><h3 id="6-gulp-parallel"><a href="#6-gulp-parallel" class="headerlink" title="6. gulp.parallel()"></a>6. gulp.parallel()</h3><ul><li>语法：<strong>gulp.parallel(任务 1, 任务 2, 任务 3, …)</strong>；</li><li>作用：<strong>并行</strong>开始多个任务（不能控制结束的顺序）</li></ul><h3 id="7-pipe"><a href="#7-pipe" class="headerlink" title="7. pipe()"></a>7. pipe()</h3><ul><li>管道函数，所有的 <strong>gulp API</strong> 都是基于<strong>流</strong>，接收当前流, 进入下一个流过程的管道函数；</li><li>例子：<code>gulp.src().pipe(压缩任务).pipe(转码).pipe(gulp.dest(&#39;abc&#39;))</code>；</li></ul><h2 id="四、gulp-常用插件和使用"><a href="#四、gulp-常用插件和使用" class="headerlink" title="四、gulp 常用插件和使用"></a>四、gulp 常用插件和使用</h2><h3 id="1-gulp-cssmin"><a href="#1-gulp-cssmin" class="headerlink" title="1. gulp-cssmin"></a>1. gulp-cssmin</h3><ul><li><p>下载：<code>npm i gulp-cssmin -D</code>；</p></li><li><p>导入：<code>const cssmin = require(&#39;gulp-cssmin&#39;)</code></p></li><li><p>导入以后得到一个处理流文件的函数，直接再管道函数里面执行就好了</p></li><li><p>配置如下：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** gulpfile.js */</span><span class="token comment" spellcheck="true">/*   因为 gulp 是依赖于 node 环境运行的  将来的运行也是以 node 为基础运行的  书写 gulpfile.js 文件就按照 node 的模块化语法进行书写(CommonJS) */</span><span class="token keyword">const</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1. 导入 gulp-cssmin</span><span class="token keyword">const</span> cssmin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-cssmin'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*  创建一个打包 css 的任务  gulp@3 的标准书写语法：*/</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'cssHandler'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 需要捕获到该任务的结束, 需要把这个流 return 出去,</span>  <span class="token comment" spellcheck="true">// task 就会处理流</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./src/css/*.css'</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span> 找到源文件    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">cssmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">.</span> 压缩文件    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./dist/css/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">.</span> 把压缩好的内容放在指定目录下<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">*</span>  gulp@<span class="token number">4</span> 的标准书写语法：需要在 gulpfile<span class="token punctuation">.</span>js 文件里面把这个函数名导出<span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">const</span> cssHandler <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./src/css/*.css'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">cssmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./dist/css/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 导出任务</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>cssHandler <span class="token operator">=</span> cssHandler</code></pre></li><li><p>执行指令：<code>gulp cssHandler</code>之后就会将 <strong>./src/css/</strong> 下的 <strong>css</strong> 文件压缩后输出到 <strong>./dist/css/</strong> 文件夹下；</p></li></ul><h3 id="2-gulp-autoprefixer"><a href="#2-gulp-autoprefixer" class="headerlink" title="2. gulp-autoprefixer"></a>2. gulp-autoprefixer</h3><ul><li>下载：<code>npm i gulp-autoprefixer -D</code>；</li><li>导入：<code>const autoPrefixer = require(&#39;gulp-autoprefixer&#39;)</code>；</li><li>导入以后得到一个处理流文件的函数，直接再管道函数里面使用, 需要传递参数；</li><li>配置需要兼容的浏览器及版本{ browsers: [要兼容的浏览器] }；</li></ul><h3 id="3-gulp-sass"><a href="#3-gulp-sass" class="headerlink" title="3. gulp-sass"></a>3. gulp-sass</h3><ul><li>下载：<code>npm i gulp-sass -D</code>；<ul><li>很容易报错, 基本下载不成功，因为 <strong>gulp-sass</strong> 依赖另一个第三方, <strong>node-sass</strong>；</li><li>解决: 给 <strong>node-sass</strong> 单独配置一个下载地址：<ul><li><code>set SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/</code></li><li><code>npm i node-sass -D</code></li><li><code>npm i gulp-sass -D</code></li></ul></li></ul></li><li>导入：<code>const sass = require(&#39;gulp-sass&#39;)</code>；</li><li>导入以后得到一个可以处理流文件的函数, 直接再管道函数里面执行就可以了；</li></ul><h3 id="4-gulp-uglify"><a href="#4-gulp-uglify" class="headerlink" title="4. gulp-uglify"></a>4. gulp-uglify</h3><ul><li>用来压缩 <strong>js</strong> 文件的；</li><li>下载：<code>npm i -D gulp-uglify</code>；</li><li>导入：<code>const uglify = require(&#39;gulp-uglify&#39;)</code>；</li><li>导入以后得到一个可以处理流文件的函数，直接再管道函数中使用就可以了；</li><li>注意: 你不能写 ES6 语法, 一旦有了 ES6 语法就会报错；</li></ul><h3 id="5-gulp-babel"><a href="#5-gulp-babel" class="headerlink" title="5. gulp-babel"></a>5. gulp-babel</h3><ul><li>专门进行 <strong>ES6</strong> 转 <strong>ES5</strong> 的插件；</li><li><strong>gulp-babel</strong> 的版本：<ul><li><strong>gulp-babel@7</strong>: 大部分使用再 gulp@3 里面；</li><li><strong>gulp-babel@8</strong>: 大部分使用再 gulp@4 里面；</li></ul></li><li>下载：<ul><li><strong>gulp-babel</strong> 需要依赖另外两个包, 我们要一起下载；</li><li>另外两个包: <strong>@babel/core @babel/preset-env</strong>；</li></ul></li><li>导入：<ul><li>只要导入一个包就够了, 他会自动导入另外两个包;</li><li><code>const babel = require(&#39;gulp-babel&#39;)</code>;</li></ul></li><li>导入以后得到一个可以处理流文件的函数，直接再管道函数中使用就可以了；</li></ul><h3 id="6-gulp-htmlmin"><a href="#6-gulp-htmlmin" class="headerlink" title="6. gulp-htmlmin"></a>6. gulp-htmlmin</h3><ul><li><p>作用：是用来处理 <strong>html</strong> 文件的 gulp 插件；</p></li><li><p>下载：<code>npm i -D gulp-htmlmin</code>；</p></li><li><p>导入: const htmlmin = require(‘gulp-htmlmin’)；</p></li><li><p>导入以后得到一个可以处理流文件的函数，直接再管道函数中使用，需要传递参数；</p></li></ul><h3 id="7-del"><a href="#7-del" class="headerlink" title="7. del"></a>7. del</h3><ul><li>下载：`npm i -D del；；</li><li>作用: 删除文件目录；</li><li>导入：<code>const del = require(&#39;del&#39;)</code>；</li><li>导入以后得到一个函数, 直接使用传递参数就可以了；</li></ul><h3 id="8-gulp-webserver"><a href="#8-gulp-webserver" class="headerlink" title="8. gulp-webserver"></a>8. gulp-webserver</h3><ul><li>作用: 启动一个基于 <strong>node</strong> 书写的服务器；</li><li>下载：<code>npm i -D gulp-webserver</code>；</li><li>导入：<code>const webserver = require(&#39;gulp-webserver&#39;)</code>；</li><li>导入以后得到一个处理流文件的函数，我们再管道函数内调用就可以了, 需要传递参数；</li></ul><h3 id="9-gulp-file-include"><a href="#9-gulp-file-include" class="headerlink" title="9. gulp-file-include"></a>9. gulp-file-include</h3><ul><li>作用：在一个 html 页面里面导入一个 <strong>html 片段</strong>；</li><li>下载：<code>npm i -D gulp-file-include</code>；</li><li>导入：<code>const fileInclude = require(&#39;gulp-file-include&#39;)</code>；</li><li>导入以后得到一个处理流文件的函数，在管道函数内调用就可以了, 需要传递参数；</li></ul><h3 id="10-整合一下常用插件"><a href="#10-整合一下常用插件" class="headerlink" title="10. 整合一下常用插件"></a>10. 整合一下常用插件</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** gulpfile.js */</span><span class="token comment" spellcheck="true">// 0. 导入第三方gulp</span><span class="token keyword">const</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 0-2. 导入 gulp-cssmin</span><span class="token keyword">const</span> cssmin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-cssmin'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 0-3. 导入 gulp-autoprefixer</span><span class="token keyword">const</span> autoPrefixer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-autoprefixer'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 0-4. 导入 gulp-sass</span><span class="token keyword">const</span> sass <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-sass'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 0-5. 导入 gulp-uglify</span><span class="token keyword">const</span> uglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-uglify'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 0-6. 导入 gulp-babel</span><span class="token keyword">const</span> babel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-babel'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 0-7. 导入 gulp-htmlmin</span><span class="token keyword">const</span> htmlmin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-htmlmin'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 0-8. 导入 del</span><span class="token keyword">const</span> del <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'del'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 0-9. 导入 gulp-webserver</span><span class="token keyword">const</span> webserver <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-webserver'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 0-10. 导入 gulp-file-include</span><span class="token keyword">const</span> fileInclude <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-file-include'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1. 创建任务</span><span class="token comment" spellcheck="true">// 1-1. 创建一个打包 css 的任务</span><span class="token keyword">const</span> cssHandler <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./src/css/*.css'</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token number">1</span><span class="token punctuation">.</span> 找到内容    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">autoPrefixer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">.</span> 自动添加前缀    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">cssmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">.</span> 压缩    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./dist/css/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">.</span> 放到指定目录<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">/</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">.</span> 创建一个打包 sass 文件的任务<span class="token keyword">const</span> sassHandler <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./src/sass/*.scss'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">sass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">autoPrefixer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">cssmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./dist/sass/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">/</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">.</span> 创建一个打包 js 文件的任务<span class="token keyword">const</span> jsHandler <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./src/js/*.js'</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token number">1</span><span class="token punctuation">.</span> 找到 js 文件    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>      <span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token operator">/</span><span class="token operator">/</span> babel@<span class="token number">7</span><span class="token punctuation">,</span> presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'es2015'</span><span class="token punctuation">]</span>        presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'@babel/env'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./dist/js/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">/</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">.</span> 创建一个打包 html 文件的任务<span class="token keyword">const</span> htmlHandler <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./src/pages/*.html'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>      <span class="token function">fileInclude</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token operator">/</span><span class="token operator">/</span> 根据你的配置导入对应的 html 片段        prefix<span class="token punctuation">:</span> <span class="token string">'@-@'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 你自定义的一个标识符        basepath<span class="token punctuation">:</span> <span class="token string">'./src/components'</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 基准目录<span class="token punctuation">,</span> 你的组件文件都在哪一个目录里面      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>      <span class="token function">htmlmin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token operator">/</span><span class="token operator">/</span> 通过你配置的参数来进行压缩        <span class="token operator">/</span><span class="token operator">/</span> collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 表示移出空格        removeEmptyAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token function">表示移出空的属性</span><span class="token punctuation">(</span>仅限于原生属性<span class="token punctuation">)</span>        collapseBooleanAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 移出 checked 类似的布尔值属性        removeAttributeQuotes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 移出属性上的双引号        minifyCSS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 压缩内嵌式 css <span class="token function">代码</span><span class="token punctuation">(</span>只能基本压缩<span class="token punctuation">,</span> 不能自动添加前缀<span class="token punctuation">)</span>        minifyJS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 压缩内嵌式 JS <span class="token function">代码</span><span class="token punctuation">(</span>只能基本压缩<span class="token punctuation">,</span> 不能进行转码<span class="token punctuation">)</span>        removeStyleLinkTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 移出 style 和 link 标签上的 type 属性        removeScriptTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span> 移出 script 标签上默认的 type 属性      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./dist/pages/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">/</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">.</span> 创建一个打包 images 文件的任务<span class="token keyword">const</span> imgHandler <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./src/images/**'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./dist/images/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">/</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">.</span> 创建一个打包 videos 文件的任务<span class="token keyword">const</span> videoHandler <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./src/videos/**'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./dist/videos/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">/</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">.</span> 创建一个打包 audios 文件的任务<span class="token keyword">const</span> audioHandler <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./src/audios/**'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./dist/audios/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">/</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">.</span> 创建一个打包 第三方 的任务<span class="token keyword">const</span> libHandler <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./src/lib/**/*'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./dist/lib/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 1-9. 创建一个打包 fonts 文件的任务</span><span class="token keyword">const</span> fontHandler <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./src/fonts/**/*'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./dist/fonts/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 1-10. 创建一个删除 dist 目录的任务</span><span class="token keyword">const</span> delHandler <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// del 直接执行就可以了, 不需要流</span>  <span class="token comment" spellcheck="true">// 参数以数组的形式传递你要删除的文件夹</span>  <span class="token keyword">return</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./dist/'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 1-11. 创建一个启动 服务器 的任务</span><span class="token keyword">const</span> webHandler <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>    <span class="token function">webserver</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 域名(可以配置自定义域名)</span>      port<span class="token punctuation">:</span> <span class="token string">'8080'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 端口号</span>      livereload<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 当文件修改的时候, 是否自动刷新页面</span>      open<span class="token punctuation">:</span> <span class="token string">'./pages/login.html'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认打开哪一个文件(从 dist 目录以后的目录开始书写)</span>      proxies<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">// 配置你的所有代理</span>        <span class="token comment" spellcheck="true">// 每一个代理就是一个对象数据类型</span>        <span class="token comment" spellcheck="true">// 注意: 如果你没有代理, 不要写空对象</span>        <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 代理标识符</span>          source<span class="token punctuation">:</span> <span class="token string">'/dt'</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 代理目标地址</span>          target<span class="token punctuation">:</span> <span class="token string">'https://www.duitang.com/napi/blog/list/by_filter_id/'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          source<span class="token punctuation">:</span> <span class="token string">'/gx'</span><span class="token punctuation">,</span>          target<span class="token punctuation">:</span> <span class="token string">'http://localhost:80/server.php'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          source<span class="token punctuation">:</span> <span class="token string">'/gx2'</span><span class="token punctuation">,</span>          target<span class="token punctuation">:</span> <span class="token string">'http://localhost:80/'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 1-12. 创建一个监控任务</span><span class="token keyword">const</span> watchHandler <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 使用 gulp.watch()</span>  gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'./src/sass/*.scss'</span><span class="token punctuation">,</span> sassHandler<span class="token punctuation">)</span>  gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'./src/css/*.css'</span><span class="token punctuation">,</span> cssHandler<span class="token punctuation">)</span>  gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'./src/js/*.js'</span><span class="token punctuation">,</span> jsHandler<span class="token punctuation">)</span>  gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'./src/pages/*.html'</span><span class="token punctuation">,</span> htmlHandler<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 3. 配置一个默认任务</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token operator">=</span> gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>  delHandler<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 执行删除任务，删除原有的结果文件</span>  gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span>    cssHandler<span class="token punctuation">,</span>    sassHandler<span class="token punctuation">,</span>    jsHandler<span class="token punctuation">,</span>    htmlHandler<span class="token punctuation">,</span>    imgHandler<span class="token punctuation">,</span>    videoHandler<span class="token punctuation">,</span>    audioHandler<span class="token punctuation">,</span>    libHandler<span class="token punctuation">,</span>    fontHandler  <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 并行执行指定任务</span>  webHandler<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 开启基于node的服务</span>  watchHandler <span class="token comment" spellcheck="true">// 监控指定文件，文件一旦发生变化就会执行指定的任务</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css3渐变颜色</title>
      <link href="/2021/07/09/CSS/css3%E6%B8%90%E5%8F%98%E9%A2%9C%E8%89%B2/"/>
      <url>/2021/07/09/CSS/css3%E6%B8%90%E5%8F%98%E9%A2%9C%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="CSS3-渐变色"><a href="#CSS3-渐变色" class="headerlink" title="CSS3 渐变色"></a>CSS3 渐变色</h3><h4 id="1-线性渐变"><a href="#1-线性渐变" class="headerlink" title="1. 线性渐变"></a>1. 线性渐变</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box1</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/** 渐变属性是设置在background-image上的 */</span>  <span class="token comment" spellcheck="true">/** 线性渐变 linear-gradient 默认从上到下渐变 */</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token hexcode">#e66465</span>, <span class="token hexcode">#9198e5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.box2</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/** 线性渐变 linear-gradient 默认从左上往右下渐变 */</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right bottom, <span class="token hexcode">#e66465</span>, <span class="token hexcode">#9198e5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.box3</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/** 线性渐变 linear-gradient  */</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to left, <span class="token hexcode">#e66465</span>, <span class="token hexcode">#9198e5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.box4</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/** 线性渐变 linear-gradient  */</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token hexcode">#e66465</span>, <span class="token hexcode">#9198e5</span>, green<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.box5</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/** 线性渐变 linear-gradient */</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">repeating-linear-gradient</span><span class="token punctuation">(</span>    <span class="token hexcode">#e66465</span> <span class="token number">5%</span>,    <span class="token hexcode">#9198e5</span> <span class="token number">10%</span>,    green <span class="token number">20%</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js常见手写代码</title>
      <link href="/2021/05/25/JS/js%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81/"/>
      <url>/2021/05/25/JS/js%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h3 id="1-使用函数柯里化实现累加"><a href="#1-使用函数柯里化实现累加" class="headerlink" title="1. 使用函数柯里化实现累加"></a>1. 使用函数柯里化实现累加</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> es6Add <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 将实参转化为数组</span>  <span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>args2<span class="token punctuation">)</span>    list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>list2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 每次调用都进行数组合并</span>    <span class="token keyword">return</span> fn <span class="token comment" spellcheck="true">// 通过递归 return fn 的方式让函数可以实现多次调用</span>  <span class="token punctuation">}</span>  fn<span class="token punctuation">.</span>toString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重写函数的 toString 方法</span>    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 计算数组的累加</span>      <span class="token keyword">return</span> pre <span class="token operator">+</span> next    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> fn<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">es6Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// fn 10</span></code></pre><h3 id="2-手写-js-的深拷贝"><a href="#2-手写-js-的深拷贝" class="headerlink" title="2. 手写 js 的深拷贝"></a>2. 手写 js 的深拷贝</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> deepClone <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 首先判断 target 是否被 map 记录过</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果被 map 记录过就直接返回</span>    <span class="token keyword">return</span> target  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 获取 target 的构造器</span>  <span class="token keyword">let</span> constructor <span class="token operator">=</span> target<span class="token punctuation">.</span>constructor  <span class="token comment" spellcheck="true">// 判断 constructor 是否是 RegRxp 和 Date 类型</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/^(RegExp|Date)$/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断为 true 的话，实例化创建对应类型的对象然后返回</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">constructor</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 判断 target 是 Object 或者 Function 并且 不为null</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>    target <span class="token operator">!==</span> <span class="token keyword">null</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 将 target 放入map 标记为 true， 用于上面的判断</span>    map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 判断 target 是否数组 设置数据类型 初始值</span>    <span class="token keyword">let</span> resultTarget <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 过滤调原型上的属性 只对独有属性进行拷贝</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        resultTarget<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> resultTarget  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 到这里的都是 基本数据类型 直接返回</span>    <span class="token keyword">return</span> target  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 基本数据类型验证</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// b 1</span>b <span class="token operator">=</span> <span class="token number">2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// b 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// a 1</span><span class="token comment" spellcheck="true">// 引用类型 验证</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'xiaozhao'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token string">'24'</span><span class="token punctuation">,</span>  cars<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'小鹏'</span><span class="token punctuation">,</span> <span class="token string">'雅阁'</span><span class="token punctuation">,</span> <span class="token string">'凯迪拉克'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> cloneObj <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>cloneObj<span class="token punctuation">.</span>cars<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'兰博基尼'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'cloneObj'</span><span class="token punctuation">,</span> cloneObj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {age: "24"</span><span class="token comment" spellcheck="true">// cars: (3) ["小鹏", "雅阁", "兰博基尼"]</span><span class="token comment" spellcheck="true">// name: "xiaozhao"</span><span class="token comment" spellcheck="true">// __proto__: Object}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj'</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {age: "24"</span><span class="token comment" spellcheck="true">// cars: (3) ["小鹏", "雅阁", "凯迪拉克"]</span><span class="token comment" spellcheck="true">// name: "xiaozhao"</span><span class="token comment" spellcheck="true">// __proto__: Object}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>W3C 标准和 Web语义化</title>
      <link href="/2021/05/07/W3C%E6%A0%87%E5%87%86%E5%92%8CWeb%E8%AF%AD%E4%B9%89%E5%8C%96/"/>
      <url>/2021/05/07/W3C%E6%A0%87%E5%87%86%E5%92%8CWeb%E8%AF%AD%E4%B9%89%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="W3C-标准和-Web-语义化"><a href="#W3C-标准和-Web-语义化" class="headerlink" title="W3C 标准和 Web 语义化"></a>W3C 标准和 Web 语义化</h1><h2 id="w3c-标准"><a href="#w3c-标准" class="headerlink" title="w3c 标准"></a>w3c 标准</h2><p>W3C 是万维网联盟（World Wide Web Consortium）</p><h3 id="一、使用-W3C-的目的"><a href="#一、使用-W3C-的目的" class="headerlink" title="一、使用 W3C 的目的"></a>一、使用 W3C 的目的</h3><p>​ 我们开发者作为中间件也就是 <strong>转换器</strong> adapter，我们需要想方设法让我们的页面、我们的程序能够支持所有的浏览器、能够满足尽可能多的用户。我们要满足所有的客户，即使做不到，我们也要满足我们技术范围之内的所有用户。</p><h3 id="二、标准内容"><a href="#二、标准内容" class="headerlink" title="二、标准内容"></a>二、标准内容</h3><h4 id="1-什么是-DOCTYPE"><a href="#1-什么是-DOCTYPE" class="headerlink" title="1. 什么是 DOCTYPE"></a>1. 什么是 DOCTYPE</h4><p>​ DOCTYPE 是 document type(文档类型)的简写，用来说明你用的 XHTML 或者 HTML 是什么版本。其中的 DTD(例如 xhtml1-transitional.dtd)叫文档类型定义，里面包含了文档的规则，浏览器就根据你定义的 DTD 来解释你页面的标识，并展现出来。要建立符合标准的网页，DOCTYPE 声明是必不可少的关键组成部分；除非你的 XHTML 确定了一个正确的 DOCTYPE，否则你的标识和 CSS 都不会生效。</p><p>​ XHTML 1.0 提供了三种 DTD 声明可供选择：</p><ul><li><p><strong>过渡的</strong>(Transitional)：要求非常宽松的 DTD，它允许你继续使用 HTML4.01 的标识(但是要符合 xhtml 的写法)。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"></span></code></pre></li><li><p><strong>严格的</strong>(Strict)：要求严格的 DTD，你不能使用任何表现层的标识和属性：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"></span></code></pre></li><li><p><strong>框架的</strong>(Frameset)：专门针对框架页面设计使用的 DTD，如果你的页面中包含有框架，需要采用这种 DTD:</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"></span></code></pre></li></ul><h4 id="2-名字空间（namespace）"><a href="#2-名字空间（namespace）" class="headerlink" title="2.名字空间（namespace）"></a>2.名字空间（namespace）</h4><p><code>&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;gb2312&quot;&gt;</code></p><p>通常我们 HTML4.0 的代码只是<html>，这里的”xmlns”是什么呢？</html></p><p>​ 这个“xmlns”是 XHTML namespace 的缩写，叫做“名字空间”声明。XHTML 是 HTML 向 XML 过渡的标识语言，它需要符合 XML 文档规则，因此也需要定义名字空间。又因为 XHTML1.0 不能自定义标识，所以它的名字空间都相同，就是”<a href="http://www.w3.org/1999/xhtml&quot;。目前阶段我们只要照抄代码就可以了。" target="_blank" rel="noopener">http://www.w3.org/1999/xhtml&quot;。目前阶段我们只要照抄代码就可以了。</a></p><h4 id="3-定义语言编码"><a href="#3-定义语言编码" class="headerlink" title="3.定义语言编码"></a>3.定义语言编码</h4><p><code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=gb2312&quot; /&gt;</code></p><p>​ 为了被浏览器正确解释和通过 W3C 代码校验，所有的 XHTML 文档都必须声明它们所使用的编码语言，我们一般使用 gb2312(简体中文)，制作多国语言页面也有可能用 Unicode、ISO-8859-1 等，根据你的需要定义。</p><blockquote><p>注：如果忘记了定义语言编码,可能就会出现,你在 DW(dreamweaver)做完一个页面，第二次打开时所有的中文变成了乱码。</p></blockquote><h4 id="4-Javascript-定义"><a href="#4-Javascript-定义" class="headerlink" title="4.Javascript 定义"></a>4.Javascript 定义</h4><p>​ js 必须要用 <code>&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;</code> 来开头定义：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  //<span class="token cdata">&lt;![CDATA[  function show_layout(selObj) {    var n = selObj.options[selObj.selectedIndex].value    document.getElementById('stylesheet').href = n  }  //]]></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="5-CSS-定义"><a href="#5-CSS-定义" class="headerlink" title="5.CSS 定义"></a>5.CSS 定义</h4><p>​ CSS 必须要用 <code>&lt;style type=&quot;text/css&quot;&gt;</code> 开头来定义，而不是原来的直接<code>&lt;style&gt;</code>，也不建议直接写在内容代码里如：<code>&lt;div style=&quot;padding-left:20px;&quot;&gt;&lt;/div&gt;</code>，并需要加个注释符<!-- --></p><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;style type="text/css" media="screen">&lt;!--body </span><span class="token punctuation">{</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">12</span>px<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">}</span>-->&lt;/style></code></pre><h4 id="6-不要再注释内容中使用‘–’"><a href="#6-不要再注释内容中使用‘–’" class="headerlink" title="6.不要再注释内容中使用‘–’"></a>6.不要再注释内容中使用‘–’</h4><p>​ ‘–’ 只能出现在 XHTML 注释的开头和结束，在内容中间不再有效</p><p>例如：<!-- 注释------------注释 --> 是无效的，正确的应用是用=或空格代替内部的虚线；</p><h4 id="7-标签的元素和属性名必须小写"><a href="#7-标签的元素和属性名必须小写" class="headerlink" title="7.标签的元素和属性名必须小写"></a>7.标签的元素和属性名必须小写</h4><p>​ XHTML 大小写是敏感的，<title> 和 <TITLE> 是不同的标签。XHTML 要求所有的标签和属性的名字都必须使用小写，大小写夹杂也是不被认可的，通常 Dreamweaver 自动生成的属性名”onMouseOver”也必须修改为”onmouseover”；</TITLE></title></p><h4 id="8-所有的属性必须用””括起来"><a href="#8-所有的属性必须用””括起来" class="headerlink" title="8.所有的属性必须用””括起来"></a>8.所有的属性必须用””括起来</h4><p>​ 在 HTML 中，可以不需要给属性值加引号，但在 XHTML 中，它们必须被加引号，例如&lt;height=80&gt;必须修改为&lt;height=”80”&gt;</p><blockquote><p>如果必须在属性值里使用双引号，可以用”,单引号可以使用&apos;</p></blockquote><h4 id="9-把所有-lt-和-amp-特殊符号用编码表示"><a href="#9-把所有-lt-和-amp-特殊符号用编码表示" class="headerlink" title="9.把所有&lt;和&amp;特殊符号用编码表示"></a>9.把所有&lt;和&amp;特殊符号用编码表示</h4><p>​ 任何小于号(&lt;),不是标签的一部分，都必须被编码为<kbd><code>&amp;lt;</code></kbd></p><p>​ 任何大于号(&gt;),不是标签的一部分，都必须被编码为<kbd><code>&amp;gt;</code></kbd></p><p>​ 任何与号(&amp;),不是实体的一部分，都必须被编码为<kbd><code>&amp;amp;</code></kbd></p><h4 id="10-给所有属性赋值"><a href="#10-给所有属性赋值" class="headerlink" title="10.给所有属性赋值"></a>10.给所有属性赋值</h4><p>​ XHTML 规定所有的属性都必须有一个值，没有值的就重复本身;</p><h4 id="11-所有的标记都必须有一个相应的结束标记"><a href="#11-所有的标记都必须有一个相应的结束标记" class="headerlink" title="11.所有的标记都必须有一个相应的结束标记"></a>11.所有的标记都必须有一个相应的结束标记</h4><p>XHTML 要求有严谨的结构，所有标签必须关闭，如果是单独不成对的标签，在标签最后加一个”/“来关闭它;</p><h4 id="12-所有标记都必须合理嵌套"><a href="#12-所有标记都必须合理嵌套" class="headerlink" title="12.所有标记都必须合理嵌套"></a>12.所有标记都必须合理嵌套</h4><p>​ 错误：<code>&lt;p&gt;&lt;b&gt;&lt;/p&gt;&lt;/b&gt;</code></p><p>​ 正确：<code>&lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;</code></p><h4 id="13-图片添加有意义的-alt"><a href="#13-图片添加有意义的-alt" class="headerlink" title="13.图片添加有意义的 alt"></a>13.图片添加有意义的 alt</h4><p>​ 尽可能让作为内容的图片都带有属于自己的属性。</p><p>​ 同理：添加文字链接的 title 属性</p><h4 id="14-在-form-表单中增加-lable，以增加用户友好度"><a href="#14-在-form-表单中增加-lable，以增加用户友好度" class="headerlink" title="14.在 form 表单中增加 lable，以增加用户友好度"></a>14.在 form 表单中增加 lable，以增加用户友好度</h4><h2 id="Web-语义化"><a href="#Web-语义化" class="headerlink" title="Web 语义化"></a>Web 语义化</h2><h3 id="web-语义化的目的"><a href="#web-语义化的目的" class="headerlink" title="web 语义化的目的"></a>web 语义化的目的</h3><ul><li><p><strong>代码结构:</strong> 使页面没有 css 的情况下，也能够呈现出很好的内容结构；</p></li><li><p><strong>有利于 SEO:</strong> 爬虫依赖标签来确定关键字的权重，因此可以和搜索引擎建立良好的沟通，帮助爬虫抓取更多的有效信息；</p></li><li><p><strong>提升用户体验：</strong> 例如<strong>title</strong>、<strong>alt</strong>可以用于解释名称或者解释图片信息，以及<strong>label</strong>标签的灵活运用；</p></li><li><p><strong>便于团队开发和维护:</strong> 语义化使得代码更具有可读性，让其他开发人员更加理解你的 html 结构，减少差异化；</p></li><li><p><strong>方便其他设备解析:</strong> 如屏幕阅读器、盲人阅读器、移动设备等，以有意义的方式来渲染网页；</p></li></ul><h3 id="什么是语义元素？"><a href="#什么是语义元素？" class="headerlink" title="什么是语义元素？"></a>什么是语义元素？</h3><p>语义是指对一个词或者句子含义的正确解释。很多 html 标签也具有语义的意义，也就是说元素本身传达了关于标签所包含内容类型的一些信息。例如，当浏览器解析到<code>&lt;h1&gt;&lt;/h1&gt;</code>标签时，它将该标签解释为包含这一块内容的最重要的标题。h1 标签的语义就是用它来标识特定网页或部分最重要的标题。</p><h4 id="常见的语义化标签"><a href="#常见的语义化标签" class="headerlink" title="常见的语义化标签"></a>常见的语义化标签</h4><table><thead><tr><th align="center"><strong>结构体</strong></th><th align="center"><strong>文本</strong></th><th align="center"><strong>一致</strong></th></tr></thead><tbody><tr><td align="center">header<br>h1<br>h2<br>h3<br>nav<br>footer<br>article<br>section</td><td align="center">p<br>ul<br>ol<br>li<br>block<br>quote</td><td align="center">a<br>strong<br>em<br>q<br>abbrs<br>mall</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端工程化、模块儿化、组件化</title>
      <link href="/2021/05/01/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
      <url>/2021/05/01/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="简单介绍一下对前端工程化、模块儿化、组件化的理解"><a href="#简单介绍一下对前端工程化、模块儿化、组件化的理解" class="headerlink" title="简单介绍一下对前端工程化、模块儿化、组件化的理解"></a>简单介绍一下对前端工程化、模块儿化、组件化的理解</h3><h4 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h4><ul><li><p>前端工程化是一种思想：我们拿到一个项目之后，把它当成一项系统的工程来对待，对它进行分工、组织和构建、从而达到分工明确、开发人员配合默契以及高效开发的目的；</p></li><li><p>工程化的思维就是将“结构、样式和动作” 分离：例如将静态资源放在assets和static中，将工具类的js放在utils中，将组件放在components中；</p></li></ul><h4 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h4><ul><li><p>前端模块儿化：可以理解为将一组功能单独提取出来，在需要使用的时候通过require()或者import引入使用，可以达到按需加载；</p></li><li><p>CSS实现模块儿化通过：scss、less、stylus;</p></li><li><p>CommonJs：将一个js文件单独提取出来，通过module.exports将内容作为模块儿导出；</p></li><li><p>Module：是es6的模块化，将js文件中的内容通过export.default作为模块儿导出，需要时通过<code>import XXX from &#39;XXX&#39;;</code>导入使用;</p></li><li><p>另外还有AMD、CMD、UMD都实现了前端模块儿化；</p></li></ul><h4 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h4><ul><li><p>我们熟悉的Vue、React框架都采用了组件化开发，我们清晰的体验到组件化开发的高效、便利以及代码的清晰度；</p></li><li><p>组件化相当于将一个页面视作一个容器，组件就相当于其中的头部、脚部、列表等很多东西、这些东西作为组件在需要时添加进去，组件是可以复用的，而且相互之间不会产生影响；</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack知识</title>
      <link href="/2021/04/28/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/webpack%E7%9F%A5%E8%AF%86/"/>
      <url>/2021/04/28/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/webpack%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="说一下-webpack-的配置分离和配置合并是如何实现的"><a href="#说一下-webpack-的配置分离和配置合并是如何实现的" class="headerlink" title="说一下 webpack 的配置分离和配置合并是如何实现的"></a>说一下 webpack 的配置分离和配置合并是如何实现的</h3><ul><li><p>安装<code>webpack-merge</code>，用于将文件合并</p></li><li><p>创建三个文件，一个用来放 webpack 的公共配置，一个放开发环境打包配置，一个放生产环境打包配置</p></li><li><p>通过<code>const webpackMerge = require(&#39;webpack-merge&#39;)</code>的 webpackMerge()函数来合并各自环境配置和公共配置</p></li><li><p>在 package.json 配置文件中，配置相应的命令以及各自文件的路径</p></li></ul><h3 id="webpack-dev-server-的作用和用法"><a href="#webpack-dev-server-的作用和用法" class="headerlink" title="webpack-dev-server 的作用和用法"></a>webpack-dev-server 的作用和用法</h3><ul><li><p>作用：</p><ul><li>是 webpack 官方提供的一个小型 express 服务器，可以为 webpack 打包生成的静态资源文件提供 web 服务</li><li>自动刷新和热替换</li><li>通过配置 proxy 可以解决开发过程中的跨域问题</li></ul></li><li><p>使用：</p><ul><li>安装<code>npm install webpack-dev-server --save-dev</code></li><li>在 package.json 中配置 webpack-dev-server 的打包命令，执行命令会将包打在内存中</li><li>webpack 配置文件中使用以下配置：</li></ul><pre class=" language-js"><code class="language-js">devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>  host<span class="token punctuation">:</span> <span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>  port<span class="token punctuation">:</span> port<span class="token punctuation">,</span>  open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/** 配置代理请求，可以解决跨域问题 */</span>  proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'/api'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      target<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`http://192.168.0.113:58037`</span></span><span class="token punctuation">,</span>      changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'^/api'</span><span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  disableHostCheck<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></li></ul><h3 id="webpack-dev-server-和-http-服务器比如-nginx-的区别"><a href="#webpack-dev-server-和-http-服务器比如-nginx-的区别" class="headerlink" title="webpack-dev-server 和 http 服务器比如 nginx 的区别"></a>webpack-dev-server 和 http 服务器比如 nginx 的区别</h3><ul><li>webpack-dev-server 是使用内存来存储 webpack 在开发环境下的打包文件，并且可以使用热更新模块儿，比传统的 http 服务器开发更加简单高效</li></ul><h3 id="webpack-处理样式文件"><a href="#webpack-处理样式文件" class="headerlink" title="webpack 处理样式文件"></a>webpack 处理样式文件</h3><ul><li><p>假设我们的项目中有 sass 文件，有 css 文件，有样式文件的引入关系，同时要解决浏览器兼容问题</p></li><li><p>在 webpack 配置文件中的 module 模块儿中的 rules 添加处理文件的配置，需要用到以下 4 个 loader</p><ul><li>style-loader：作用是将 css 样式内容放在打包后的 html 页面上；</li><li>css-loader：作用是用来处理 css 文件之间的引用关系；</li><li>postcss-loader：作用是处理指定浏览器以及版本的兼容性问题，需要创建 postcss 配置文件，在里面引用插件<code>autoprefixer</code>，最后在 package.json 文件中配置所需要兼容的浏览器类型和版本<code>browsersList</code>;</li><li>sass-loader：作用时将 sass 解析成 css</li><li>另外 loader 的执行顺序是按照配置的倒叙进行的</li></ul></li></ul><h3 id="webpack-处理图片"><a href="#webpack-处理图片" class="headerlink" title="webpack 处理图片"></a>webpack 处理图片</h3><ul><li>使用 url-loader,建议通过配置项将小图片打包成 base64 字符串，需要配置 options 的 limit，否则默认将所有图片转化问 base64</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex知识</title>
      <link href="/2021/04/26/Vue/vuex%E7%9F%A5%E8%AF%86/"/>
      <url>/2021/04/26/Vue/vuex%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="1-vuex-的几个核心属性"><a href="#1-vuex-的几个核心属性" class="headerlink" title="1. vuex 的几个核心属性"></a>1. vuex 的几个核心属性</h3><ul><li><p>vuex 是一个全局的状态管理器；</p></li><li><p>state：state 是数据源存放地，对应 vue 组件中的 data，其中的数据都是响应式的；vue 组件可以从 store 中读取数据，当 store 中的数据发生改变的时候，那么依赖它的视图也会更新；</p></li><li><p>mutations：其中定义的方法是用来动态修改 state 中的状态数据的，通过 commit 提交来调用，方法必须是同步的；</p></li><li><p>actions：就是将 mutations 中处理数据的方式变成异步的，异步拿数据，通过 commit 调用 mutations 中的方法更新数据，actions 通过 store.dispatch 分发</p></li><li><p>modules：模块儿化 vuex</p></li><li><p>getters：主要用来过滤数据，对应 vue 组件中的计算属性(computed)，可以在多组件之间复用</p></li></ul><h3 id="2-为什么-mutations-中的方法必须是同步的-在严格模式下"><a href="#2-为什么-mutations-中的方法必须是同步的-在严格模式下" class="headerlink" title="2. 为什么 mutations 中的方法必须是同步的(在严格模式下)"></a>2. 为什么 mutations 中的方法必须是同步的(在严格模式下)</h3><ul><li><p>Vuex 中所有的状态更新的唯一途径都是 mutation，异步操作通过 Action 来提交 mutation 实现，这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</p></li><li><p>每个 mutation 执行完成后都会对应到一个新的状态变更，这样 devtools 就可以打个快照存下来，然后就可以实现 time-travel 了。如果 mutation 支持异步操作，就没有办法知道状态是何时更新的，无法很好的进行状态的追踪，给调试带来困难。</p></li></ul><h3 id="3-如何在-vue-组件中使用-vuex-的内容"><a href="#3-如何在-vue-组件中使用-vuex-的内容" class="headerlink" title="3. 如何在 vue 组件中使用 vuex 的内容"></a>3. 如何在 vue 组件中使用 vuex 的内容</h3><ul><li><p>直接获取、修改</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//state</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token comment" spellcheck="true">//getter</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>count<span class="token comment" spellcheck="true">//调用 action 修改 state 值，不带参数</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//调用 action 修改 state 值，带参数</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>通过辅助函数获取、修改</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** vuex提供了三种辅助函数用于获取、修改vuex：  mapState、mapGetters、mapActions  将vuex的变量或者方法映射到vue组件this指针上。  */</span><span class="token comment" spellcheck="true">//使用state获取共享变量</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>  computed <span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token string">'count'</span><span class="token punctuation">,</span>        <span class="token string">'buttonShow'</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">//使用mapGetters获取共享变量，</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>  computed <span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token string">'count'</span><span class="token punctuation">,</span>        <span class="token string">'buttonShow'</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">//使用actions修改共享变量</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span> mapActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>  methods <span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>increment<span class="token punctuation">:</span><span class="token string">'increment'</span><span class="token punctuation">,</span>decrement<span class="token punctuation">:</span><span class="token string">'decrement'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-router知识</title>
      <link href="/2021/04/22/Vue/vue-router%E7%9F%A5%E8%AF%86/"/>
      <url>/2021/04/22/Vue/vue-router%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="1-vue-router-的跳转和-location-href-跳转的区别？"><a href="#1-vue-router-的跳转和-location-href-跳转的区别？" class="headerlink" title="1. vue-router 的跳转和 location.href 跳转的区别？"></a>1. vue-router 的跳转和 location.href 跳转的区别？</h3><ul><li><p>location.href 跳转虽然简单方便，但是每次跳转的是页面，需要刷新页面；</p></li><li><p>vue-router 跳转是采用了 diff 算法实现了按需加载，减少了 dom 的消耗</p></li></ul><h3 id="2-vue-router-的跳转方式"><a href="#2-vue-router-的跳转方式" class="headerlink" title="2. vue-router 的跳转方式"></a>2. vue-router 的跳转方式</h3><ul><li><p>vue-router 实现单页面路由跳转，提供了三种方式：hash、history、abstract，根据参数 mode 来设置使用哪种方式；</p></li><li><p>hash 和 history 的区别：</p><ul><li>hash 模式在地址栏中会有一个’#’号，history 模式没有；</li><li>虽然 hash 出现在地址栏中，但是它不会影响 HTTP 请求，因此不会对后端产生影响，也不会导致页面的重新加载；</li><li>history 模式是利用了 HTML5 提供的 pushState()和 pushReplace(),这两个方式应用于浏览器的历史记录栈，在原有的 go、back、forward 的基础上，它们提供了对历史记录进行修改的功能，知识当他们修改的时候，虽然改变了当前 url，但是浏览器不会立即向后端发送请求</li><li>hash 可以支持低版本的 IE 浏览器，history 需要特定浏览器支持；</li><li>history 一般需要后端将所有页面配置重定向到首页路由；</li></ul></li></ul><h3 id="3-路由之间的跳转方式"><a href="#3-路由之间的跳转方式" class="headerlink" title="3. 路由之间的跳转方式"></a>3. 路由之间的跳转方式</h3><ul><li><p>声明式（标签式）：router-link 标签配合它的 to 属性</p></li><li><p>编程式：在 js 中进行路由跳转 <code>this.$router.push(&#39;/&#39;)</code></p></li></ul><h3 id="4-路由传参中-params-和-query-的区别"><a href="#4-路由传参中-params-和-query-的区别" class="headerlink" title="4. 路由传参中 params 和 query 的区别"></a>4. 路由传参中 params 和 query 的区别</h3><ul><li><p>用法上的：query 需要用 path 来引入，params 需要用 name 引入，接收参数基本一样：<code>this.$route.query || this.$route.params</code>，注意接收的时候使用的是 <strong>$route</strong></p></li><li><p>展示上来看：query 相当于我们 ajax 中的 get 请求，参数会显示在地址栏中；params 相当于 post 请求，参数不显示在地址栏中</p></li><li><p>注意：query 刷新不会丢失参数、params 刷新会丢失参数</p></li></ul><h3 id="5-router-和-route-的区别"><a href="#5-router-和-route-的区别" class="headerlink" title="5. $router 和 $route 的区别"></a>5. $router 和 $route 的区别</h3><ul><li><p>$router：是‘路由实例’，包含了路由的跳转方法以及钩子函数等；</p></li><li><p>$route：是‘路由信息对象’，包括 path，params，hash，query，fullPath，matched，name 等路由信息参数。</p></li></ul><h3 id="6-vue-的动态路由如何定义，以及怎么获取动态参数"><a href="#6-vue-的动态路由如何定义，以及怎么获取动态参数" class="headerlink" title="6. vue 的动态路由如何定义，以及怎么获取动态参数"></a>6. vue 的动态路由如何定义，以及怎么获取动态参数</h3><ul><li><p>什么是动态路由：举个例子，比如商品详情页，页面结构都是一致的，只有 id 不一样，这个时候就要用到动态路由</p></li><li><p>创建动态路由：在 routes 中在使用 path 的时候使用动态路径参数，以冒号开头</p></li><li><p>获取动态路由的参数：<code>this.$route.params</code></p></li></ul><h3 id="7-vue-router-的导航守卫有哪些"><a href="#7-vue-router-的导航守卫有哪些" class="headerlink" title="7. vue-router 的导航守卫有哪些"></a>7. vue-router 的导航守卫有哪些</h3><ul><li><p>全局前置守卫：<code>router.beforeEach((to,from,next) =&gt; {})</code></p><ul><li>to：指的是要进入的 route 对象</li><li>from：指的是导航正要离开的 route 对象</li><li>next：Function() 该方法一定要被调用，它可以让导航进入下一个钩子、可以中断导航<code>next(false)</code>、可以中断当前导航进入指定的其它导航<code>next({path: &#39;/&#39;})</code></li></ul></li><li><p>全局解析守卫：<code>router.beforeResolve</code> 用法和全局前置守卫基本一致，区别是在导航被确认之前，同时在所有组件内守卫和异步路由组件解析之后被调用</p></li><li><p>全局后置钩子：<code>router.afterEach((to,from) =&gt; {})</code> 只有两个参数，不接受 next 函数也不影响导航本身</p></li><li><p>路由独享守卫：<code>beforeEnter((to,from,next) =&gt; {})</code> 在路由配置的时候直接加上的守卫，参数和方法与全局前置守卫一致</p></li><li><p>组件内的守卫：</p><ul><li>beforeRouteEnter()：在渲染该组件的对应路由确认前被调用、不能获取 this 实例因为当守卫被执行前组件实例还没被创建，可以通过<code>next(vm =&gt; {})</code>传参‘vm’来使用实例</li><li>beforeRouteUpdate()：当前路由发生改变，同时组件被复用的时候执行，举个例子（动态路由之间的跳转会触发这个守卫）、可以访问 <strong>this</strong></li><li>beforeRouteLeave()：当行离开该组件路由的时候被调用、可以使用 <strong>this</strong>，通常用来检查用户操作未保存时突然离开、通过<code>next(false)</code>取消导航</li></ul></li></ul><h3 id="8-完整的导航解析流程"><a href="#8-完整的导航解析流程" class="headerlink" title="8. 完整的导航解析流程"></a>8. 完整的导航解析流程</h3><ul><li><p>导航被触发</p></li><li><p>调用失活的组件中的<code>beforeRouteLeave</code></p></li><li><p>调用 router 实例的全局前置守卫<code>beforeEach</code></p></li><li><p>如果组件被复用的话调用组件内守卫<code>beforeRouteUpdate</code></p></li><li><p>调用路由配置中的独享守卫<code>beforeEnter</code></p></li><li><p>解析异步路由组件</p></li><li><p>在被激活的组件中调用<code>beforeRouteEnter</code></p></li><li><p>调用全局解析守卫<code>beforeResolve</code></p></li><li><p>导航被确认</p></li><li><p>调用全局后置钩子<code>afterEach</code></p></li><li><p>触发 DOM 更新</p></li><li><p>调用<code>beforeRouteEnter</code>中的 next 中的回调函数，创建好的实例会作为回调函数的参数传入</p></li></ul><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><ul><li>当参数或查询条件的改变是不会触发引入或离开的导航守卫，一般通过 watch 来观察$route 的变化或者使用 beforeRouteUpdate 组件内守卫</li></ul><h3 id="9-vue-router-实现路由懒加载"><a href="#9-vue-router-实现路由懒加载" class="headerlink" title="9. vue-router 实现路由懒加载"></a>9. vue-router 实现路由懒加载</h3><ul><li><p>路由懒加载就是采用异步组件和 webpack 的代码分割功能实现的</p></li><li><p>如果不使用路由懒加载的话，打包构建后的应用的 javaScript 包会特别大，影响页面加载，所以我们要把不同的路由对应的组件分割成不同的代码块儿，当路由被访问的时候才去加载对应的组件；</p></li><li><p>对于 SPA 来说，路由懒加载可以有效地降低首页的加载压力，优化项目性能；</p></li><li><p>常见用法：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** 第一种，也是最常用的 */</span><span class="token comment" spellcheck="true">// 注释的意思是将chunkname相同的所有组件打包在同一个异步模块儿中</span><span class="token keyword">const</span> Index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* webpackChunkName: "group-home" */</span> <span class="token string">'@/views/index'</span><span class="token punctuation">)</span><span class="token keyword">const</span> routers <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'index'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> Index<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">/** 第二种 */</span><span class="token keyword">const</span> Index <span class="token operator">=</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  require<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./views/index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'group-home'</span><span class="token punctuation">)</span><span class="token keyword">const</span> routers <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'index'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> Index<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuejs知识了解</title>
      <link href="/2021/04/16/Vue/vuejs%E7%9F%A5%E8%AF%86/"/>
      <url>/2021/04/16/Vue/vuejs%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="1-谈谈对-Vue-js-的理解"><a href="#1-谈谈对-Vue-js-的理解" class="headerlink" title="1. 谈谈对 Vue.js 的理解"></a>1. 谈谈对 Vue.js 的理解</h3><ul><li><p>Vue 是一套用于构建用户界面的 <strong>渐进式框架</strong>，它的目标是通过 API 实现响应数据绑定和试图更新；</p></li><li><p>官方对 Vue 的评价是易用性、高效性、灵活性，从这三点来看：</p><ul><li><p>易用性：Vue 提供了响应式数据，可以在数据改变的时候更新视图，这就令开发者只需要关心核心代码逻辑；</p></li><li><p>灵活性：我们的应用足够小的时候，我们只需要使用 vue 的核心库就可以了；当业务逐渐复杂的时候，可以引入 vue-router、vuex 等其他工具；</p></li><li><p>高效性：vue 操作的是虚拟 DOM，采用 diff 算法来更新 DOM，相比传统的 dom 操作更加高效；</p></li></ul></li><li><p>缺点：不支持 IE8 及以下版本；</p></li></ul><h3 id="2-什么是-SPA？"><a href="#2-什么是-SPA？" class="headerlink" title="2. 什么是 SPA？"></a>2. 什么是 SPA？</h3><ul><li><p>SPA 就是单页面应用，也就是只有一个 web 页面的应用</p></li><li><p>相对于传统的多页面应用来说：减少了应用体积、加快了页面的响应速度、降低了服务器的压力以及更好的用户体验</p></li><li><p>缺点：因为使用了 ajax，导致页面不利于 SEO（SEO 原则：搜索引擎的蜘蛛只识别 href 的一般超链接，而不识别 JavaScript 代码，遇到一般超链接就会爬进去，遇到 JavaScript 不会爬进去。即，搜索引擎抓不到 AJAX 动态加载的内容），但是可以通过其他技术去规避；</p><ul><li>服务端渲染、页面静态化</li></ul></li></ul><h3 id="3-Vue-的生命周期"><a href="#3-Vue-的生命周期" class="headerlink" title="3. Vue 的生命周期"></a>3. Vue 的生命周期</h3><h4 id="什么是-vue-的生命周期"><a href="#什么是-vue-的生命周期" class="headerlink" title="什么是 vue 的生命周期"></a>什么是 vue 的生命周期</h4><ul><li>生命周期就是 vue 实例从创建到销毁的过程</li></ul><h4 id="vue-的生命周期总共有几个阶段"><a href="#vue-的生命周期总共有几个阶段" class="headerlink" title="vue 的生命周期总共有几个阶段"></a>vue 的生命周期总共有几个阶段</h4><ul><li>创建前、创建后、载入前、载入后、更新前、更新后、销毁前、销毁后</li></ul><h4 id="生命周期中钩子函数的作用"><a href="#生命周期中钩子函数的作用" class="headerlink" title="生命周期中钩子函数的作用"></a>生命周期中钩子函数的作用</h4><ul><li>生命周期中有多个事件函数，它们的存在是为了让我们形成更好的开发逻辑</li></ul><h4 id="第一次页面加载会触发哪几个钩子函数"><a href="#第一次页面加载会触发哪几个钩子函数" class="headerlink" title="第一次页面加载会触发哪几个钩子函数"></a>第一次页面加载会触发哪几个钩子函数</h4><ul><li>beforeCreate、created、beforeMount、mounted</li></ul><h4 id="生命周期钩子的一些使用方法"><a href="#生命周期钩子的一些使用方法" class="headerlink" title="生命周期钩子的一些使用方法"></a>生命周期钩子的一些使用方法</h4><ul><li><p>beforeCreate：一般加入 loading 事件</p></li><li><p>created：结束 loading 事件，获取异步请求数据</p></li><li><p>mounted：dom 挂载完成，可以获取 dom 节点信息</p></li><li><p>updated：如果对数据进行了统一处理，这里写上响应函数</p></li><li><p>beforeDestroy：通常关闭组件中占用内存的东西，比如 setTimeout</p></li><li><p>nextTick：如果再修改数据之后操作 dom 的话需要在此函数内</p></li></ul><h3 id="4-MVVM"><a href="#4-MVVM" class="headerlink" title="4. MVVM"></a>4. MVVM</h3><ul><li><p>MVVM 就是 Model-View-ViewModel 的缩写</p></li><li><p>Model：数据模型，通常指的是后端传过来的数据；</p></li><li><p>View：代表 UI 组件，它负责将数据模型转换成 UI 展现出来；</p></li><li><p>ViewModel：是 MVVM 的核心。是连接 View 和 Model 的桥梁，用来同步 View 和 Model 的对象；</p></li><li><p>优点：</p><ul><li>分离视图 View 和数据模型 Model，降低代码耦合、以及提高了视图或逻辑的复用性；</li><li>自动更新 DOM，避免了 DOM 的重复操作</li></ul></li></ul><h3 id="5-为什么组件中的-data-必须是一个函数"><a href="#5-为什么组件中的-data-必须是一个函数" class="headerlink" title="5. 为什么组件中的 data 必须是一个函数"></a>5. 为什么组件中的 data 必须是一个函数</h3><ul><li><p>因为 vue 组件是一个封装自己单独功能的模块儿，有自己的 html 模板，也应该有自己的 data</p></li><li><p>vue 组件不能直接访问 vue 实例上的数据，就算可以访问，那所有的参数放在 vue 实例上会显得臃肿。而且多个组件使用同一组数据的话，他们对数据的操作会影响到其他组件</p></li><li><p>因此 vue 组件需要自己的 data，而且必须是一个函数返回一个对象</p></li></ul><h3 id="6-vue-的两个核心点"><a href="#6-vue-的两个核心点" class="headerlink" title="6. vue 的两个核心点"></a>6. vue 的两个核心点</h3><ul><li><p>数据驱动：ViewModel，它的主要作用就是保证视图与数据一致性（也就是 vue 实现响应式的原理）</p></li><li><p>组件系统：组件化、页面上可以使用多个组件而且可以实现组件复用、令 vue 开发更加灵活</p></li></ul><h3 id="7-vue-父子组件的通讯"><a href="#7-vue-父子组件的通讯" class="headerlink" title="7. vue 父子组件的通讯"></a>7. vue 父子组件的通讯</h3><ul><li><p>父组件通过属性传递数据到子组件，子组件通过 props 接收参数；</p></li><li><p>子组件通过$emit 向父组件传递参数，父组件通过事件接收参数；</p></li><li><p>兄弟组件不能通过这种方式，因为他们之间没有任何可以相互依赖的关系；实现通讯的话就需要借助第三方：</p><ul><li>eventBus：建立一个事件中心来传递事件，进行数据传递</li><li>Vuex：全局状态管理，所有组件都可以调用状态（数据）</li></ul></li></ul><h3 id="8-函数式组件的优势"><a href="#8-函数式组件的优势" class="headerlink" title="8. 函数式组件的优势"></a>8. 函数式组件的优势</h3><ul><li>渲染开销特别小、因为它只是一个函数，没有状态没有实例</li></ul><h3 id="9-vue-的事件修饰符"><a href="#9-vue-的事件修饰符" class="headerlink" title="9. vue 的事件修饰符"></a>9. vue 的事件修饰符</h3><ul><li><p>.stop：用来阻止事件冒泡；</p></li><li><p>.prevent：阻止组件本来应该发生的事件，常用于 a 标签事件；</p></li><li><p>.capture：将冒泡事件顺序改变，必须放在最外层进行修饰；</p></li><li><p>.once：用来修饰事件响应较慢但不能多次触发，只能触发一次的事件；</p></li><li><p>.self：只有点击当前自身元素才触发的修饰符；</p></li></ul><h3 id="10-vue-自定义指令的原理"><a href="#10-vue-自定义指令的原理" class="headerlink" title="10. vue 自定义指令的原理"></a>10. vue 自定义指令的原理</h3><ul><li><p>本质上相当于装饰器，是 vue 对 html 的扩展，语义化 html，也就是在 vue 编译 dom 时，找到指令所修饰的对象，执行指令中的 js 代码</p></li><li><p>生命周期钩子：bind、inserted、update、componentUpdated、unbind</p></li></ul><h3 id="11-vue-为什么要采用异步更新"><a href="#11-vue-为什么要采用异步更新" class="headerlink" title="11. vue 为什么要采用异步更新"></a>11. vue 为什么要采用异步更新</h3><ul><li><p>异步更新是指：本轮数据更新结束之后，再去更新视图；</p></li><li><p>vue 的更新是组件级更新，每次更新都会渲染整个组件，如果使用同步更新的话，只要 data 的数据发生变化就会触发 watcher，然后对应 watcher 下的 update 方法更新视图，这样就会导致组件更新特别频繁，资源浪费；</p></li><li><p>vue 异步更新流程</p><ul><li><p>当 data 数据发生变化时，会触发 dep.notify() 通知 watcher 执行 update();</p></li><li><p>调用 queueWatcher 将 watcher 去重后加入队列等待执行；</p></li><li><p>在 nextTick 的回调 flushSchedulerQueue 内将刚刚加入的 watcher 逐个执行 run 进行更新；</p></li><li><p>最后执行 restSchedulerState()重置状态等待下一轮更新</p></li></ul></li></ul><h3 id="12-vue3-的-proxy-与-vue2-的-Object-defineProperty-的对比"><a href="#12-vue3-的-proxy-与-vue2-的-Object-defineProperty-的对比" class="headerlink" title="12. vue3 的 proxy()与 vue2 的 Object.defineProperty()的对比"></a>12. vue3 的 proxy()与 vue2 的 Object.defineProperty()的对比</h3><ul><li><p>proxy</p><ul><li>proxy 可以直接监听对象，而不仅仅是属性；</li><li>proxy 也可以直接监听数组的变化；</li><li>proxy 可以返回一个新对象，可以操作新对象来达到目的，而 Object.defineProperty 只能遍历属性进行修改；</li><li>proxy 作为新标准，将会受到各个浏览器厂商的持续优化</li></ul></li><li><p>Object.defineProperty</p><ul><li>Object.defineProperty()兼容 IE9 版本</li></ul></li></ul><h3 id="13-子组件为什么不能修改父组件传递的-prop"><a href="#13-子组件为什么不能修改父组件传递的-prop" class="headerlink" title="13. 子组件为什么不能修改父组件传递的 prop"></a>13. 子组件为什么不能修改父组件传递的 prop</h3><ul><li>Vue 中提倡的是单向数据流，父组件修改了 props 的时候是会流向子组件的，反过来就不行，为了防止子组件意外的更新了父组件的状态，如果破坏了单向数据流，那么当应用复杂的时候，debug 的成本会非常高</li></ul><h3 id="14-使用-v-for-的时候为什么要用-key"><a href="#14-使用-v-for-的时候为什么要用-key" class="headerlink" title="14. 使用 v-for 的时候为什么要用 key"></a>14. 使用 v-for 的时候为什么要用 key</h3><ul><li>key 的唯一性，它的存在可以让 diff 算法更快的找到需要更新的 dom 节点，注意：key 一定要唯一，否则可能会出现一些特别隐蔽的更新异常；</li></ul><h3 id="15-为什么不建议-v-for-和-v-if-同时使用"><a href="#15-为什么不建议-v-for-和-v-if-同时使用" class="headerlink" title="15. 为什么不建议 v-for 和 v-if 同时使用"></a>15. 为什么不建议 v-for 和 v-if 同时使用</h3><ul><li><p>因为 v-for 的优先级高于 v-if，表示每一次遍历都会通过 v-if 进行判断，如果需要遍历的数组长度特别大，就会造成很严重的性能浪费；</p></li><li><p>因此遇到这种情况的话我一般会先用 computed 进行数据的筛选之后遍历</p></li></ul><h3 id="16-keep-alive-的作用以及什么时候使用"><a href="#16-keep-alive-的作用以及什么时候使用" class="headerlink" title="16. keep-alive 的作用以及什么时候使用"></a>16. keep-alive 的作用以及什么时候使用</h3><ul><li><p>keep-alive：是 vue 内置的一个组件，它可以使被包含的组件保留状态，当组件切换的时候避免重新渲染；</p></li><li><p>props:</p><ul><li>include：字符串或正则表达式。只有匹配的组件会被缓存。</li><li>exclude：字符串或正则表达式。任何匹配的组件都不会被缓存。</li></ul></li><li><p>当组件在 keep-alive 内被切换，它的 activated 和 deactivated 这两个生命周期钩子函数将会被对应执行。<strong>主要用于保留组件状态或避免重新渲染</strong>。</p></li><li><p>keep-alive 不会在函数式组件中正常工作，因为它们没有缓存实例。</p></li></ul><h3 id="17-vue-的模板编译"><a href="#17-vue-的模板编译" class="headerlink" title="17. vue 的模板编译"></a>17. vue 的模板编译</h3><ul><li><p>模板编译的作用：是生成渲染函数–&gt;执行渲染函数生成最新的 vnode–&gt;根据 vnode 来渲染 dom</p></li><li><p>渲染函数的生成过程：首先将模板编译成 AST(抽象语法树)，然后遍历 AST 将其中的静态节点进行标记，最后根据 AST 生成渲染函数</p></li></ul><h3 id="18-scoped-的实现及原理"><a href="#18-scoped-的实现及原理" class="headerlink" title="18. scoped 的实现及原理"></a>18. scoped 的实现及原理</h3><ul><li><p>为了避免 css 样式的污染，vue 组件中给 css 提供了 scoped 来实现样式私有化、模块化</p></li><li><p>包含 scoped 的组件的所有节点都会有一个唯一的标识（[data-v-xxxxx]）</p></li><li><p>包含 scoped 组件中的所有样式选择器后面会加上节点上的那个唯一标识</p></li></ul><h3 id="19-SPA-首次进入页面出现白屏的原因以及解决方法"><a href="#19-SPA-首次进入页面出现白屏的原因以及解决方法" class="headerlink" title="19. SPA 首次进入页面出现白屏的原因以及解决方法"></a>19. SPA 首次进入页面出现白屏的原因以及解决方法</h3><ul><li><p>因为 SPA 运行时浏览器会在进入应用的时候下载所有需要的资源，当资源过多时就会出现白屏的情况；</p></li><li><p>解决方法：采用图片懒加载、路由懒加载以及组件按需引入的方式</p></li></ul><h3 id="20-vue-项目的行能优化"><a href="#20-vue-项目的行能优化" class="headerlink" title="20. vue 项目的行能优化"></a>20. vue 项目的行能优化</h3><ul><li><p>不要在模板中写过多表达式</p></li><li><p>在循环调用子组件时要用 key</p></li><li><p>页面上频繁切换的情况用 v-show、很少切换的用 v-if</p></li><li><p>尽量少用 float、可以使用 flex</p></li><li><p>使用组件的按需加载 require 和 import 的方式</p></li><li><p>路由懒加载和图片懒加载</p></li></ul><h3 id="21-slot-插槽的作用"><a href="#21-slot-插槽的作用" class="headerlink" title="21. slot 插槽的作用"></a>21. slot 插槽的作用</h3><ul><li>简单来说，假如父组件需要在子组件内放一些 DOM，那么这些 DOM 是显示、不显示、在哪个地方显示、如何显示，就是 slot 分发负责的活</li></ul><h3 id="22-slot-的种类"><a href="#22-slot-的种类" class="headerlink" title="22. slot 的种类"></a>22. slot 的种类</h3><ul><li><p>匿名插槽：最简单常用的插槽子组件中只需要<code>&lt;slot&gt;&lt;/slot&gt;</code>就行了，父组件在组件内部放入内容；</p></li><li><p>具名插槽：子组件在<code>&lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</code>中加入 name 属性，父组件<code>&lt;template v-slot:header&gt;&lt;/template&gt;</code></p></li><li><p>作用域插槽：当父组件想要控制子组件显示子组件 data 中的数据时，需要用的作用于插槽，将子组件的数据传入父组件</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 子组件</span><span class="token operator">&lt;</span>slot v<span class="token operator">-</span>bind<span class="token punctuation">:</span>user<span class="token operator">=</span><span class="token string">"userInfo"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span><span class="token comment" spellcheck="true">// 父组件</span><span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><h3 id="23-简单说一下封装组件的过程"><a href="#23-简单说一下封装组件的过程" class="headerlink" title="23. 简单说一下封装组件的过程"></a>23. 简单说一下封装组件的过程</h3><ul><li><p>先把组件的架子搭起来：html + js + css，然后思考逻辑</p></li><li><p>准备好组件的数据输入，也就是定好 props 的数据以及类型</p></li><li><p>准备好数据输出，就是向父组件传递的结果</p></li><li><p>引入注册使用</p></li></ul><h3 id="24-vue-组件的渲染和更新"><a href="#24-vue-组件的渲染和更新" class="headerlink" title="24. vue 组件的渲染和更新"></a>24. vue 组件的渲染和更新</h3><ul><li><p>初次渲染</p><ul><li>将模板解析为 render 函数；</li><li>触发响应式，将 data 中的数据通过 Object.defineProperty 的 getter 进行依赖收集；</li><li>执行 render 函数，生成 vnode，渲染视图（patch）</li></ul></li><li><p>组件更新</p><ul><li>修改 data 中的数据，触发 setter 中的 dep.notify(),通知所有的 watcher 对象进行视图更新；</li><li>重新执行 render 函数，生成新的虚拟节点；</li><li>最后进行 patch 过程（diff 算法）</li></ul></li></ul><h3 id="25-为什么使用异步组件"><a href="#25-为什么使用异步组件" class="headerlink" title="25. 为什么使用异步组件"></a>25. 为什么使用异步组件</h3><ul><li><p>异步组件可以优化打包结果，将异步组件分开打包，实现异步加载，可以有效地解决组件过大的问题，如果不使用异步组件，打包出来之后会出现首屏加载过慢甚至白屏的出现；</p></li><li><p>按需加载组件，组件定义的时候什么都不做，当组件第一次使用的时候再进行渲染，渲染之后会缓存下来方便之后的使用；</p></li><li><p>提升用户体验，优化项目性能</p></li></ul><h3 id="26-diff-算法的作用"><a href="#26-diff-算法的作用" class="headerlink" title="26. diff 算法的作用"></a>26. diff 算法的作用</h3><ul><li>vue 中数据的双向绑定实现了修改数据的时候，自动更新视图的功能，而且是只更新需要更新的地方；也就是数据发生变化的时候，会根据新数据生成新的 vdom，通过对比新旧 vdom 来更新 dom，dom-diff 做的就是这些事</li></ul><h3 id="27-DOM-diff-做了哪些事儿"><a href="#27-DOM-diff-做了哪些事儿" class="headerlink" title="27. DOM-diff 做了哪些事儿"></a>27. DOM-diff 做了哪些事儿</h3><ul><li><p>DOM-diff 也叫 patch，打补丁的意思，核心思想就是将旧的 VNode 通过修补得到新的 VNode，然后更新 dom，总而言之，它干了三件事儿：新增节点、删除节点、更新节点；</p><ul><li><p>创建节点：VNode 类中有六种节点，但实际上能够被创建的节点只有三种：元素节点、注释节点、文本节点</p><ul><li>首先判断该节点是不是元素节点，只需要判断 vnode 中是否含有 tag 标签，如果包含那么一定是元素节点，调用 createElement 方法创建节点，然后创建子结点最后插入到 dom 中</li><li>判断是不是注释节点，在 VNode 类中对注释节点有一个特殊的标记 isComment，我们只需要判断 isComment 是否为 true，如果是就调用 createComment 方法来创建注释节点，最后插入 dom 中</li><li>判断是不是文本节点，如果前两种都不符合的话就调用 createTextNode 方法创建文本节点，最后插入 dom</li></ul></li><li><p>删除节点：如果新的 VDOM 上没有的节点，而旧的 VDOM 上有的话，我们就需要把这些节点从旧的 VDOM 上删除，我们只需要调用被删除节点的父节点的 removeChild 方法</p></li><li><p>更新节点：更新之前我们需要将新旧 dom 进行对比，当遇到静态节点时候直接返回，因为静态节点是不会因为数据的改变而发生变化的</p><ul><li>如果新旧 VNode 是文本节点的话，就调用 setTextNode 方法来修改文本内容</li><li>如果 VNode 是元素节点的话，分两种情况：<ul><li>该节点包含子节点<ul><li>如果新节点包含子节点的话，就看旧节点是否包含子节点，如果旧节点包含子节点，那就通过递归来对比子节点并更新；如果就节点不包含子节点，那么这个旧节点有可能是空节点或者是文本节点，如果旧的节点是空节点就把新的节点里的子节点创建一份然后插入到旧的节点里面，如果旧的节点是文本节点，则把文本清空，然后把新的节点里的子节点创建一份然后插入到旧的节点里面。</li></ul></li><li>该节点不包含子节点<ul><li>如果该节点不包含子节点，同时它又不是文本节点，那就说明该节点是个空节点，那就好办了，不管旧节点之前里面都有啥，直接清空即可。</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="28-vue-中为什么要使用虚拟（Virtual）DOM"><a href="#28-vue-中为什么要使用虚拟（Virtual）DOM" class="headerlink" title="28. vue 中为什么要使用虚拟（Virtual）DOM"></a>28. vue 中为什么要使用虚拟（Virtual）DOM</h3><ul><li><p>创建真实 DOM 的成本高：真实 dom 的节点的属性有很多，而虚拟 dom 的节点只需要实现几个必要的属性就可以了，成本低很多</p></li><li><p>如果不使用 VDOM，频繁操作 dom 的时候会多次进行页面的回流和重绘，使用 VDOM 的话，让一次数据变动产生的所有 node 变化，通过 diff 算法对 vnode 进行修改，最后只需要对 DOM tree 进行一次修改，减少回流和重绘，提高性能；</p></li><li><p>VDOM 本质上是一个 js 对象，因此天生就具有跨平台的能力，可以实现在不同平台的准确使用</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3.x的响应式原理</title>
      <link href="/2021/03/28/Vue/vue3-reactive/"/>
      <url>/2021/03/28/Vue/vue3-reactive/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue3的响应式是通过ES6的-Proxy-实现的"><a href="#Vue3的响应式是通过ES6的-Proxy-实现的" class="headerlink" title="Vue3的响应式是通过ES6的 Proxy 实现的"></a>Vue3的响应式是通过ES6的 Proxy 实现的</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2.x的响应式原理</title>
      <link href="/2021/03/27/Vue/vue-reactive/"/>
      <url>/2021/03/27/Vue/vue-reactive/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>可能很多接触过Vue的同行都会知道：vue实现数据的响应式是借助了<kbd>Object.defineProperty</kbd>方法，而这个方法的作用是监测Object的读取和修改。</strong></p><h3 id="实现对Object的变化监测"><a href="#实现对Object的变化监测" class="headerlink" title="实现对Object的变化监测"></a>实现对Object的变化监测</h3><ul><li><p>也就是让我们能够知道数据在什么时候被读取，什么时候被赋值；</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">let</span> car <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token number">3000</span>  <span class="token comment" spellcheck="true">// 通过 defineProperty 方法给car添加了 price 属性 </span>  <span class="token comment" spellcheck="true">// 并且对 price 属性的读和写通过 getter 和 setter 进行了拦截</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>car<span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'price属性被读取了'</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> val      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'price属性被修改了'</span><span class="token punctuation">)</span>          val <span class="token operator">=</span> newVal      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/03/27/Vue/vue-reactive/01.png" alt="实现对象属性的‘可观测’"></p></li><li><p>从图片中我们可以看到，当我们读写car的price属性时，它已经可以将读写信息反馈出来了；</p></li><li><p>接下来了解一下<strong>vue2</strong>中是如何监测obj所有属性的读写情况的；</p><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 源码位置：src/core/observer/index.js</span>  <span class="token comment" spellcheck="true">/**   * Observer类会通过递归的方式把一个对象的所有属性都转化成可观测对象   */</span>  <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>      constructor <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value          <span class="token comment" spellcheck="true">// 给value新增一个__ob__属性，值为该value的Observer实例</span>          <span class="token comment" spellcheck="true">// 相当于为value打上标记，表示它已经被转化成响应式了，避免重复操作</span>          <span class="token function">def</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span><span class="token string">'__ob__'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 当value为数组时的逻辑</span>              <span class="token comment" spellcheck="true">// ...</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 过滤掉数组之后只剩下对象</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      walk <span class="token punctuation">(</span>obj<span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取obj的所有属性</span>          <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 使一个对象转化成可观测对象   * @param { Object } obj 对象   * @param { String } key 对象的key   * @param { Any } val 对象的某个key的值   */</span>  <span class="token keyword">function</span> defineReactive <span class="token punctuation">(</span>obj<span class="token punctuation">,</span>key<span class="token punctuation">,</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果只传了obj和key，那么val = obj[key]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          val <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 如果该属性是个 object 类型的对象，就使用递归重新创建Observer对象</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>          enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">属性被读取了`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> val<span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token keyword">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">===</span> newVal<span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token keyword">return</span>              <span class="token punctuation">}</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">属性被修改了`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>              val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre></li><li><p>因此，当我们这样定义对象的话，就可以监测出对象所有属性的读写情况；</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">'brand'</span><span class="token punctuation">:</span><span class="token string">'BMW'</span><span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">:</span><span class="token number">3000</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul><h4 id="什么是依赖收集"><a href="#什么是依赖收集" class="headerlink" title="什么是依赖收集"></a>什么是依赖收集</h4><ul><li><p>前面我们实现了让object数据变的可观测。变的可观测以后，我们就能知道数据什么时候发生了变化，那么当数据发生变化时，我们去通知视图更新就好了。那么问题又来了，视图那么大，我们到底该通知谁去变化？总不能一个数据变化了，把整个视图全部更新一遍吧，这样显然是不合理的。因此我们需要做到视图中谁用到了这个数据就更新谁；</p></li><li><p>我们把”谁用到了这个数据”称为”谁依赖了这个数据”,我们给每个数据都建一个依赖数组(因为一个数据可能被多处使用)，谁依赖了这个数据(即谁用到了这个数据)我们就把谁放入这个数据的依赖数组中，那么当这个数据发生变化的时候，我们就去它对应的依赖数组中，把每个依赖都通知一遍，告诉他们：”你们依赖的数据变啦，你们该更新啦！”。这个过程就是依赖收集；</p></li></ul><h4 id="何时依赖收集，何时通知依赖更新"><a href="#何时依赖收集，何时通知依赖更新" class="headerlink" title="何时依赖收集，何时通知依赖更新"></a>何时依赖收集，何时通知依赖更新</h4><ul><li>总结一句话就是：<strong>在getter中收集依赖，在setter中通知依赖更新。</strong></li></ul><h4 id="把依赖收集在哪里"><a href="#把依赖收集在哪里" class="headerlink" title="把依赖收集在哪里"></a>把依赖收集在哪里</h4><ul><li><p>我们给每个数据都建一个依赖数组，谁依赖了这个数据我们就把谁放入这个依赖数组中。单单用一个数组来存放依赖的话，功能好像有点欠缺并且代码过于耦合。我们应该将依赖数组的功能扩展一下，更好的做法是我们应该为每一个数据都建立一个 <strong>依赖管理器</strong>，把这个数据所有的依赖都管理起来。OK，到这里，我们的依赖管理器 <strong>Dep</strong> 类应运而生，代码如下：</p><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 源码位置：src/core/observer/dep.js</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>      constructor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>      addSub <span class="token punctuation">(</span>sub<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 删除一个依赖</span>      removeSub <span class="token punctuation">(</span>sub<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">,</span> sub<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 添加一个依赖</span>      depend <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>target<span class="token punctuation">)</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 通知所有依赖更新</span>      notify <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> subs <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> subs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              subs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 从数组中删除一个元素   */</span>  <span class="token keyword">export</span> <span class="token keyword">function</span> remove <span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> index <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li><p>在上面的依赖管理器 <strong>Dep</strong> 类中，我们先初始化了一个 <strong>subs</strong> 数组，用来存放依赖，并且定义了几个实例方法用来对依赖进行添加，删除，通知等操作。</p></li><li><p>有了依赖管理器 <strong>Dep</strong> 之后，我们就可以在getter中添加依赖，在setter中通知依赖更新；</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> defineReactive <span class="token punctuation">(</span>obj<span class="token punctuation">,</span>key<span class="token punctuation">,</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果只传了obj和key，那么val = obj[key]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      val <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 如果该属性是个 object 类型的对象，就使用递归重新创建Observer对象</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>      enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 在getter中收集依赖</span>          <span class="token keyword">return</span> val<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">===</span> newVal<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span>          <span class="token punctuation">}</span>          val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>          dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 在setter中通知依赖更新</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>在上述代码中，我们在getter中调用了<strong>dep.depend()</strong>方法收集依赖，在setter中调用<strong>dep.notify()</strong>方法通知所有依赖更新。</p></li></ul><h4 id="依赖到底指的是谁"><a href="#依赖到底指的是谁" class="headerlink" title="依赖到底指的是谁"></a>依赖到底指的是谁</h4><ul><li><p>其实在Vue中还实现了一个叫做 <strong>Watcher</strong> 的类，而Watcher类的实例就是我们上面所说的那个”谁”。换句话说就是：谁用到了数据，谁就是依赖，我们就为谁创建一个Watcher实例。在之后数据变化时，我们不直接去通知依赖更新，而是通知依赖对应的Watch实例，由Watcher实例去通知真正的视图。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>vm<span class="token punctuation">,</span>expOrFn<span class="token punctuation">,</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> <span class="token function">parsePath</span><span class="token punctuation">(</span>expOrFn<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      window<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm      <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>      window<span class="token punctuation">.</span>target <span class="token operator">=</span> undefined<span class="token punctuation">;</span>      <span class="token keyword">return</span> value  <span class="token punctuation">}</span>  update <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> oldValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** Parse simple path.* 把一个形如'data.a.b.c'的字符串路径所表示的值，从真实的data对象中取出来* 例如：* data = {a:{b:{c:2}}}* parsePath('a.b.c')(data)  // 2*/</span><span class="token keyword">const</span> bailRE <span class="token operator">=</span> <span class="token regex">/[^\w.$]/</span><span class="token keyword">export</span> <span class="token keyword">function</span> parsePath <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>bailRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> segments <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> segments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">)</span> <span class="token keyword">return</span>          obj <span class="token operator">=</span> obj<span class="token punctuation">[</span>segments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>          <span class="token punctuation">}</span>      <span class="token keyword">return</span> obj  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>谁用到了数据，谁就是依赖，我们就为谁创建一个Watcher实例，在创建Watcher实例的过程中会自动的把自己添加到这个数据对应的依赖管理器中，以后这个Watcher实例就代表这个依赖，当数据变化时，我们就通知Watcher实例，由Watcher实例再去通知真正的依赖。</p></li></ul><p><strong>那么，在创建Watcher实例的过程中它是如何的把自己添加到这个数据对应的依赖管理器中呢？</strong></p><ul><li><p>当实例化Watcher类时，会先执行其构造函数;</p></li><li><p>在构造函数中调用了this.get()实例方法;</p></li><li><p>在get()方法中，首先通过window.target = this把实例自身赋给了全局的一个唯一对象window.target上，然后通过let value = this.getter.call(vm, vm)获取一下被依赖的数据，获取被依赖数据的目的是触发该数据上面的getter，上文我们说过，在getter里会调用dep.depend()收集依赖，而在dep.depend()中取到挂载window.target上的值并将其存入依赖数组中，在get()方法最后将window.target释放掉;</p></li><li><p>而当数据变化时，会触发数据的setter，在setter中调用了dep.notify()方法，在dep.notify()方法中，遍历所有依赖(即watcher实例)，执行依赖的update()方法，也就是Watcher类中的update()实例方法，在update()方法中调用数据变化的更新回调函数，从而更新视图;</p></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>大致流程</strong></p><ul><li><p>Data通过observer转换成了getter/setter的形式来追踪变化；</p></li><li><p>当外界通过Watcher读取数据时，会触发getter从而将Watcher添加到依赖中；</p></li><li><p>当数据发生了变化时，会触发setter，从而向Dep中的依赖（即Watcher）发送通知；</p></li><li><p>Watcher接收到通知后，会向外界发送通知，变化通知到外界后可能会触发视图更新，也有可能触发用户的某个回调函数等；</p></li></ul><h3 id="实现对Array类型的变化监测"><a href="#实现对Array类型的变化监测" class="headerlink" title="实现对Array类型的变化监测"></a>实现对Array类型的变化监测</h3><h4 id="Array类型的数据在哪里收集依赖"><a href="#Array类型的数据在哪里收集依赖" class="headerlink" title="Array类型的数据在哪里收集依赖"></a>Array类型的数据在哪里收集依赖</h4><ul><li>Array类型同样是在 <strong>getter</strong> 中收集依赖；</li></ul><h4 id="使Array型数据可观测"><a href="#使Array型数据可观测" class="headerlink" title="使Array型数据可观测"></a>使Array型数据可观测</h4><h5 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h5><ul><li><p>Object的变化时通过setter来追踪的，只有某个数据发生了变化，就一定会触发这个数据上的setter。但是Array型数据没有setter，怎么办？</p></li><li><p>试想一下，要想让Array型数据发生变化，那必然是操作了Array，而JS中提供的操作数组的方法就那么几种，我们可以把这些方法都重写一遍，在不改变原有功能的前提下，我们为其新增一些其他功能，例如下面这个例子：</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>  Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>newPush <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'arr被修改了'</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  arr<span class="token punctuation">.</span><span class="token function">newPush</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></code></pre></li><li><p>在上面这个例子中，我们针对数组的原生push方法定义个一个新的newPush方法，这个newPush方法内部调用了原生push方法，这样就保证了新的newPush方法跟原生push方法具有相同的功能，而且我们还可以在新的newPush方法内部干一些别的事情，比如通知变化， <strong>Vue内部就是这样实现的</strong> 。</p></li></ul><h5 id="数组方法拦截器"><a href="#数组方法拦截器" class="headerlink" title="数组方法拦截器"></a>数组方法拦截器</h5><ul><li><p>经过整理，Array原型中可以改变数组自身内容的方法有7个，分别是：<kbd>push</kbd>，<kbd>pop</kbd>，<kbd>shift</kbd>，<kbd>unshift</kbd>，<kbd>splice</kbd>，<kbd>sort</kbd>，<kbd>reverse</kbd>。那么源码中的拦截器代码如下：</p><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 源码位置：/src/core/observer/array.js</span>  <span class="token keyword">const</span> arrayProto <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype  <span class="token comment" spellcheck="true">// 创建一个对象作为拦截器</span>  <span class="token keyword">export</span> <span class="token keyword">const</span> arrayMethods <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>arrayProto<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 改变数组自身内容的7个方法</span>  <span class="token keyword">const</span> methodsToPatch <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token string">'push'</span><span class="token punctuation">,</span>      <span class="token string">'pop'</span><span class="token punctuation">,</span>      <span class="token string">'shift'</span><span class="token punctuation">,</span>      <span class="token string">'unshift'</span><span class="token punctuation">,</span>      <span class="token string">'splice'</span><span class="token punctuation">,</span>      <span class="token string">'sort'</span><span class="token punctuation">,</span>      <span class="token string">'reverse'</span>  <span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">/**   * Intercept mutating methods and emit events   */</span>  methodsToPatch<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> original <span class="token operator">=</span> arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span>      <span class="token comment" spellcheck="true">// 缓存原生方法</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>arrayMethods<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token punctuation">{</span>          enumerable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          writable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          value<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token function">mutator</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">const</span> result <span class="token operator">=</span> original<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>              <span class="token keyword">return</span> result          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>在上面的代码中，首先创建了继承自Array原型的空对象arrayMethods，接着在arrayMethods上使用object.defineProperty方法将那些可以改变数组自身的7个方法遍历逐个进行封装。最后，当我们使用push方法的时候，其实用的是arrayMethods.push，而arrayMethods.push就是封装的新函数mutator，也就后说，实标上执行的是函数mutator，而mutator函数内部执行了original函数，这个original函数就是Array.prototype上对应的原生方法。 那么，接下来我们就可以在mutator函数中做一些其他的事，比如说发送变化通知。</p></li></ul><h5 id="使用拦截器"><a href="#使用拦截器" class="headerlink" title="使用拦截器"></a>使用拦截器</h5><ul><li><p>把它挂载到数组实例与 <strong>Array.prototype</strong> 之间，这样拦截器才能够生效，其实挂载不难，我们只需把数据的<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>proto<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>属性设置为拦截器 <strong>arrayMethods</strong> 即可，源码实现如下：</p><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 源码位置：/src/core/observer/index.js</span>  <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>      constructor <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value          <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">const</span> augment <span class="token operator">=</span> hasProto                  <span class="token operator">?</span> protoAugment                  <span class="token punctuation">:</span> copyAugment              <span class="token function">augment</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> arrayMethods<span class="token punctuation">,</span> arrayKeys<span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 能力检测：判断__proto__是否可用，因为有的浏览器不支持该属性</span>  <span class="token keyword">export</span> <span class="token keyword">const</span> hasProto <span class="token operator">=</span> <span class="token string">'__proto__'</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">const</span> arrayKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>arrayMethods<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/**   * Augment an target Object or Array by intercepting   * the prototype chain using __proto__   */</span>  <span class="token keyword">function</span> protoAugment <span class="token punctuation">(</span>target<span class="token punctuation">,</span> src<span class="token punctuation">:</span> Object<span class="token punctuation">,</span> keys<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>      target<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> src  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * Augment an target Object or Array by defining   * hidden properties.   */</span>  <span class="token comment" spellcheck="true">/* istanbul ignore next */</span>  <span class="token keyword">function</span> copyAugment <span class="token punctuation">(</span>target<span class="token punctuation">:</span> Object<span class="token punctuation">,</span> src<span class="token punctuation">:</span> Object<span class="token punctuation">,</span> keys<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> key <span class="token operator">=</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span>          <span class="token function">def</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> src<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li><p>上面代码中首先判断了浏览器是否支持<kbd><u>&nbsp;&nbsp;&nbsp;&nbsp;</u>proto<u>&nbsp;&nbsp;&nbsp;&nbsp;</u></kbd>，如果支持，则调用protoAugment函数把value.<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>proto<u>&nbsp;&nbsp;&nbsp;&nbsp;</u> = arrayMethods；如果不支持，则调用copyAugment函数把拦截器中重写的7个方法循环加入到value上。</p></li><li><p>拦截器生效以后，当数组数据再发生变化时，我们就可以在拦截器中通知变化了，也就是说现在我们就可以知道数组数据何时发生变化了，OK，以上我们就完成了对Array型数据的可观测。</p></li></ul><h4 id="收集依赖"><a href="#收集依赖" class="headerlink" title="收集依赖"></a>收集依赖</h4><h5 id="把依赖收集在哪里-1"><a href="#把依赖收集在哪里-1" class="headerlink" title="把依赖收集在哪里"></a>把依赖收集在哪里</h5><ul><li>数组数据的依赖也在<strong>getter</strong>中收集，而给数组数据添加<strong>getter/setter</strong>都是在<strong>Observer</strong>类中完成的，所以我们也应该在<strong>Observer</strong>类中收集依赖，源码如下：</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 源码位置：/src/core/observer/index.js</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value    <span class="token keyword">this</span><span class="token punctuation">.</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 实例化一个依赖管理器，用来收集数组依赖</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> augment <span class="token operator">=</span> hasProto        <span class="token operator">?</span> protoAugment        <span class="token punctuation">:</span> copyAugment      <span class="token function">augment</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> arrayMethods<span class="token punctuation">,</span> arrayKeys<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在<strong>Observer</strong>类中实例化了一个依赖管理器，用来收集数组依赖。</p><h5 id="如何收集依赖"><a href="#如何收集依赖" class="headerlink" title="如何收集依赖"></a>如何收集依赖</h5><ul><li>数组的依赖也在getter中收集，那么在getter中到底该如何收集呢？这里有一个需要注意的点，那就是依赖管理器定义在Observer类中，而我们需要在getter中收集依赖，也就是说我们必须在getter中能够访问到Observer类中的依赖管理器，才能把依赖存进去。源码是这么做的：</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> defineReactive <span class="token punctuation">(</span>obj<span class="token punctuation">,</span>key<span class="token punctuation">,</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> childOb <span class="token operator">=</span> <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>    enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>childOb<span class="token punctuation">)</span> <span class="token punctuation">{</span>        childOb<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">===</span> newVal<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span>      <span class="token punctuation">}</span>      val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>      dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 在setter中通知依赖更新</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 尝试为value创建一个Observer实例，如果创建成功，直接返回新创建的Observer实例。 * 如果 Value 已经存在一个Observer实例，则直接返回它 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> observe <span class="token punctuation">(</span>value<span class="token punctuation">,</span> asRootData<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> value <span class="token keyword">instanceof</span> <span class="token class-name">VNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> ob  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">'__ob__'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>__ob__ <span class="token keyword">instanceof</span> <span class="token class-name">Observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ob <span class="token operator">=</span> value<span class="token punctuation">.</span>__ob__  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    ob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> ob<span class="token punctuation">}</span></code></pre><ul><li><p>在上面代码中，我们首先通过observe函数为被获取的数据arr尝试创建一个Observer实例，在observe函数内部，先判断当前传入的数据上是否有<kbd>__ob__</kbd>属性，因为在上篇文章中说了，如果数据有<kbd>__ob__</kbd>属性，表示它已经被转化成响应式的了，如果没有则表示该数据还不是响应式的，那么就调用<strong>new Observer(value)</strong>将其转化成响应式的，并把数据对应的Observer实例返回。</p></li><li><p>而在defineReactive函数中，首先获取数据对应的Observer实例childOb，然后在getter中调用Observer实例上依赖管理器，从而将依赖收集起来。</p></li></ul><h5 id="如何通知依赖"><a href="#如何通知依赖" class="headerlink" title="如何通知依赖"></a>如何通知依赖</h5><ul><li><p>到现在为止，依赖已经收集好了，并且也已经存放好了，那么我们该如何通知依赖呢？</p></li><li><p>其实不难，在前文说过，我们应该在拦截器里通知依赖，要想通知依赖，首先要能访问到依赖。要访问到依赖也不难，因为我们只要能访问到被转化成响应式的数据value即可，因为vaule上的__ob__就是其对应的Observer类实例，有了Observer类实例我们就能访问到它上面的依赖管理器，然后只需调用依赖管理器的dep.notify()方法，让它去通知依赖更新即可。源码如下：</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Intercept mutating methods and emit events */</span>methodsToPatch<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> original <span class="token operator">=</span> arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span>  <span class="token function">def</span><span class="token punctuation">(</span>arrayMethods<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token keyword">function</span> mutator <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> original<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token keyword">const</span> ob <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__ob__    <span class="token comment" spellcheck="true">// notify change</span>    ob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>上面代码中，由于我们的拦截器是挂载到数组数据的原型上的，所以拦截器中的this就是数据value，拿到value上的Observer类实例，从而你就可以调用Observer类实例上面依赖管理器的dep.notify()方法，以达到通知依赖的目的。</li></ul><h4 id="深度侦测"><a href="#深度侦测" class="headerlink" title="深度侦测"></a>深度侦测</h4><ul><li>在前文所有讲的Array型数据的变化侦测都仅仅说的是数组自身变化的侦测，比如给数组新增一个元素或删除数组中一个元素，而在Vue中，不论是Object型数据还是Array型数据所实现的数据变化侦测都是深度侦测，所谓<strong>深度侦测就是不但要侦测数据自身的变化，还要侦测数据中所有子数据的变化</strong>。举个例子：</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'NLRX'</span>，    age<span class="token punctuation">:</span><span class="token string">'18'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><ul><li>数组中包含了一个对象，如果该对象的某个属性的变化被侦测到的话，就是深度侦测。源码如下：</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>  value<span class="token punctuation">:</span> any<span class="token punctuation">;</span>  dep<span class="token punctuation">:</span> Dep<span class="token punctuation">;</span>  constructor <span class="token punctuation">(</span>value<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value    <span class="token keyword">this</span><span class="token punctuation">.</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">def</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">'__ob__'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> augment <span class="token operator">=</span> hasProto        <span class="token operator">?</span> protoAugment        <span class="token punctuation">:</span> copyAugment      <span class="token function">augment</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> arrayMethods<span class="token punctuation">,</span> arrayKeys<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 将数组中的所有元素都转化为可被侦测的响应式</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * Observe a list of Array items.   */</span>  observeArray <span class="token punctuation">(</span>items<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">observe</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> observe <span class="token punctuation">(</span>value<span class="token punctuation">,</span> asRootData<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> value <span class="token keyword">instanceof</span> <span class="token class-name">VNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> ob  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">'__ob__'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>__ob__ <span class="token keyword">instanceof</span> <span class="token class-name">Observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ob <span class="token operator">=</span> value<span class="token punctuation">.</span>__ob__  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    ob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> ob<span class="token punctuation">}</span></code></pre><ul><li><p>在上面代码中，对于Array型数据，调用了observeArray()方法，该方法内部会遍历数组中的每一个元素，然后通过调用observe函数将每一个元素都转化成可侦测的响应式数据。</p></li><li><p>而对应object数据，在defineReactive函数中进行了递归操作。</p></li></ul><h4 id="数组新增元素的侦测"><a href="#数组新增元素的侦测" class="headerlink" title="数组新增元素的侦测"></a>数组新增元素的侦测</h4><ul><li><p>对于数组中已有的元素我们已经可以将其全部转化成可侦测的响应式数据了，但是如果向数组里新增一个元素的话，我们也需要将新增的这个元素转化成可侦测的响应式数据。</p></li><li><p>这个实现起来也很容易，我们只需拿到新增的这个元素，然后调用observe函数将其转化即可。我们知道，可以向数组内新增元素的方法有3个，分别是：push、unshift、splice。我们只需对这3中方法分别处理，拿到新增的元素，再将其转化即可。源码如下：</p></li></ul><pre class=" language-js"><code class="language-js">methodsToPatch<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// cache original method</span>  <span class="token keyword">const</span> original <span class="token operator">=</span> arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span>  <span class="token function">def</span><span class="token punctuation">(</span>arrayMethods<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token keyword">function</span> mutator <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> original<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token keyword">const</span> ob <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__ob__    <span class="token keyword">let</span> inserted    <span class="token keyword">switch</span> <span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">'push'</span><span class="token punctuation">:</span>      <span class="token keyword">case</span> <span class="token string">'unshift'</span><span class="token punctuation">:</span>        inserted <span class="token operator">=</span> args   <span class="token comment" spellcheck="true">// 如果是push或unshift方法，那么传入参数就是新增的元素</span>        <span class="token keyword">break</span>      <span class="token keyword">case</span> <span class="token string">'splice'</span><span class="token punctuation">:</span>        inserted <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 如果是splice方法，那么传入参数列表中下标为2的就是新增的元素</span>        <span class="token keyword">break</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inserted<span class="token punctuation">)</span> ob<span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>inserted<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调用observe函数将新增的元素转化成响应式</span>    <span class="token comment" spellcheck="true">// notify change</span>    ob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>在上面拦截器定义代码中，如果是push或unshift方法，那么传入参数就是新增的元素;如果是splice方法，那么传入参数列表中下标为2的就是新增的元素，拿到新增的元素后，就可以调用observe函数将新增的元素转化成响应式的了。</li></ul><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul><li><p>首先我们分析了对于Array型数据也在getter中进行依赖收集；其次我们发现，当数组数据被访问时我们轻而易举可以知道，但是被修改时我们却很难知道，为了解决这一问题，我们创建了数组方法拦截器，从而成功的将数组数据变的可观测。接着我们对数组的依赖收集及数据变化如何通知依赖进行了深入分析；最后我们发现Vue不但对数组自身进行了变化侦测，还对数组中的每一个元素以及新增的元素都进行了变化侦测，我们也分析了其实现原理。</p></li><li><p><strong>以上就是对Array型数据的变化侦测分析。</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js判断数据类型的方式</title>
      <link href="/2021/03/25/JS/js%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2021/03/25/JS/js%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>首先定义几种类型的变量：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'hahaha'</span><span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'xiaozhao'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/ssss/</span><span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="1、typeof"><a href="#1、typeof" class="headerlink" title="1、typeof"></a>1、typeof</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * typeof: *      经常用来判断基本数据类型 boolean undefined string number symbol *      而 null、Array、Object 检测出来都是object */</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// number</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> flag<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// boolean</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> reg<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> fn<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// function</span></code></pre><h3 id="2、instanceof"><a href="#2、instanceof" class="headerlink" title="2、instanceof"></a>2、instanceof</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * instanceof: *      经常用来判断复杂数据类型（引用数据类型）：Array、Object、RegExp *      原理是利用 判断对象的原型链中是否含有指定数据类型 */</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="2、Object-prototype-toString-call"><a href="#2、Object-prototype-toString-call" class="headerlink" title="2、Object.prototype.toString.call()"></a>2、Object.prototype.toString.call()</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Object.prototype.toString.call() *      可以准确地判断所有的数据类型 */</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [object Number]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [object String]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [object Boolean]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [object Object]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [object Array]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [object RegExp]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [object Function]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex弹性布局</title>
      <link href="/2021/03/15/CSS/css-flex/"/>
      <url>/2021/03/15/CSS/css-flex/</url>
      
        <content type="html"><![CDATA[<h3 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h3><h4 id="1-父级节点"><a href="#1-父级节点" class="headerlink" title="1.父级节点"></a>1.父级节点</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.parentNode</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 如果节点设置了此css属性，相当于在它的所有子节点上添加了浮动属性；如果父级节点使用了弹性布局，那么它的子结点就不需要添加float属性*/</span></code></pre><h4 id="2-父节点的其他属性"><a href="#2-父节点的其他属性" class="headerlink" title="2.父节点的其他属性"></a>2.父节点的其他属性</h4><h5 id="（1）justify-content"><a href="#（1）justify-content" class="headerlink" title="（1）justify-content"></a>（1）justify-content</h5><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.parentNode</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置子元素水平居中 */</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置子元素两端对齐 */</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置子元素都有独自的左右距离 */</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置子元素水平居左，此为默认属性 */</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置子元素水平居右 */</span><span class="token punctuation">}</span></code></pre><h5 id="（2）align-items"><a href="#（2）align-items" class="headerlink" title="（2）align-items"></a>（2）align-items</h5><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.parentNode</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置子元素垂直居中 */</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置子元素垂直居上 */</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置子元素垂直居下 */</span><span class="token punctuation">}</span></code></pre><h5 id="（3）align-content"><a href="#（3）align-content" class="headerlink" title="（3）align-content"></a>（3）align-content</h5><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 此属性只对多行子元素生效 */</span><span class="token selector"><span class="token class">.parentNode</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置子元素垂直居中 */</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置子元素垂直居上 */</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置子元素垂直居下 */</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 拉伸 ，默认值 */</span><span class="token punctuation">}</span></code></pre><h5 id="（4）flex-direction"><a href="#（4）flex-direction" class="headerlink" title="（4）flex-direction"></a>（4）flex-direction</h5><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 此属性设置子元素的排列方向 */</span><span class="token selector"><span class="token class">.parentNode</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 子元素横向排列 */</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row-reverse<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 子元素横向倒序排列 */</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 子元素纵向排列 */</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column-reverse<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 子元素纵向倒序排列 */</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 这里需要注意：当你设置了子元素纵向排列方向后，前两个属性也会随着改变方向！！！ */</span></code></pre><h5 id="（5）flex-wrap"><a href="#（5）flex-wrap" class="headerlink" title="（5）flex-wrap"></a>（5）flex-wrap</h5><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 此属性设置子元素是否正常换行 */</span><span class="token selector"><span class="token class">.parentNode</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 子元素正常换行 */</span>  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 子元素不换行 默认值 */</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 这里需要注意：当你设置了子元素纵向排列方向后，前两个属性也会随着改变方向！！！ */</span></code></pre><h5 id="（6）flex-flow"><a href="#（6）flex-flow" class="headerlink" title="（6）flex-flow"></a>（6）flex-flow</h5><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 设置子元素纵向排列正常换行 */</span><span class="token selector"><span class="token class">.parentNode</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-flow</span><span class="token punctuation">:</span> column warp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 相当于（4）和（5）的组合 */</span></code></pre><h4 id="3-子元素上的属性"><a href="#3-子元素上的属性" class="headerlink" title="3.子元素上的属性"></a>3.子元素上的属性</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.children</span> </span><span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 用来设置每个节点的宽度，子元素在划分父级宽度的时候，会先排除固定的宽度 */</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 此属性可以覆盖父节点的align-items的垂直排列 */</span>  <span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置元素的放大比例，默认值为0 */</span>  <span class="token property">order</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 规定子元素的排列顺序，数值越小越靠前 默认值为0 */</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
          <category> 布局 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
            <tag> flex </tag>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中连接MQTT服务器</title>
      <link href="/2021/03/03/Vue/vue-MQTT/"/>
      <url>/2021/03/03/Vue/vue-MQTT/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>MQTT是一个基于客户端-服务器的消息发布/订阅传输协议。MQTT协议是轻量、简单、开放和易于实现的，这些特点使它适用范围非常广泛。在很多情况下，包括受限的环境中，如：机器与机器（M2M）通信和物联网（IoT）。其在，通过卫星链路通信传感器、偶尔拨号的医疗设备、智能家居、及一些小型化设备中已广泛使用。</strong></p><h4 id="在vue项目中连接MQTT服务器"><a href="#在vue项目中连接MQTT服务器" class="headerlink" title="在vue项目中连接MQTT服务器"></a>在vue项目中连接MQTT服务器</h4><h5 id="1-命令行安装mqtt"><a href="#1-命令行安装mqtt" class="headerlink" title="1.命令行安装mqtt"></a>1.命令行安装mqtt</h5><p><code>npm install mqtt --save</code></p><h5 id="2-项目中导入mqtt"><a href="#2-项目中导入mqtt" class="headerlink" title="2.项目中导入mqtt"></a>2.项目中导入mqtt</h5><p><code>import mqtt from &#39;mqtt&#39;</code></p><h5 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>van<span class="token operator">-</span>nav<span class="token operator">-</span>bar title<span class="token operator">=</span><span class="token string">"MQTT服务器连接测试"</span> left<span class="token operator">-</span>arrow <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>van<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> size<span class="token operator">=</span><span class="token string">"small"</span> @click<span class="token operator">=</span><span class="token string">"connectServer"</span> block<span class="token operator">></span>      点击连接mqtt服务器    <span class="token operator">&lt;</span><span class="token operator">/</span>van<span class="token operator">-</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>van<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"danger"</span> size<span class="token operator">=</span><span class="token string">"small"</span> @click<span class="token operator">=</span><span class="token string">"endServer"</span> block<span class="token operator">></span>      点击断开    <span class="token operator">&lt;</span><span class="token operator">/</span>van<span class="token operator">-</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>van<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"info"</span> size<span class="token operator">=</span><span class="token string">"small"</span> @click<span class="token operator">=</span><span class="token string">"sendContent"</span> block<span class="token operator">></span>      发送信息    <span class="token operator">&lt;</span><span class="token operator">/</span>van<span class="token operator">-</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>van<span class="token operator">-</span>popup round closeable position<span class="token operator">=</span><span class="token string">"bottom"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"showSubscribe"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>van<span class="token operator">-</span>cell<span class="token operator">-</span>group style<span class="token operator">=</span><span class="token string">"margin: 10px 0"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>van<span class="token operator">-</span>field v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"subscribe1"</span> label<span class="token operator">=</span><span class="token string">"订阅号"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入订阅号"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>van<span class="token operator">-</span>field v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"username"</span> label<span class="token operator">=</span><span class="token string">"用户名"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入用户名"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>van<span class="token operator">-</span>field v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"url"</span> label<span class="token operator">=</span><span class="token string">"连接地址"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入地址Url"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>van<span class="token operator">-</span>cell<span class="token operator">-</span>group<span class="token operator">></span>      <span class="token operator">&lt;</span>van<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"info"</span> size<span class="token operator">=</span><span class="token string">"small"</span> @click<span class="token operator">=</span><span class="token string">"connect"</span> block<span class="token operator">></span>点击连接<span class="token operator">&lt;</span><span class="token operator">/</span>van<span class="token operator">-</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>van<span class="token operator">-</span>popup<span class="token operator">></span>    <span class="token operator">&lt;</span>van<span class="token operator">-</span>popup round closeable position<span class="token operator">=</span><span class="token string">"bottom"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"showContent"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>van<span class="token operator">-</span>cell<span class="token operator">-</span>group<span class="token operator">></span>        <span class="token operator">&lt;</span>van<span class="token operator">-</span>field v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"subscribe2"</span> label<span class="token operator">=</span><span class="token string">"订阅号"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入订阅号"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>van<span class="token operator">-</span>field          v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"message"</span>          label<span class="token operator">=</span><span class="token string">"信息"</span>          rows<span class="token operator">=</span><span class="token string">"3"</span>          autosize          type<span class="token operator">=</span><span class="token string">"textarea"</span>          maxlength<span class="token operator">=</span><span class="token string">"50"</span>          placeholder<span class="token operator">=</span><span class="token string">"请输入要发送的信息"</span>          show<span class="token operator">-</span>word<span class="token operator">-</span>limit        <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>van<span class="token operator">-</span>cell<span class="token operator">-</span>group<span class="token operator">></span>      <span class="token operator">&lt;</span>van<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"info"</span> size<span class="token operator">=</span><span class="token string">"small"</span> @click<span class="token operator">=</span><span class="token string">"send"</span> block<span class="token operator">></span>点击发送<span class="token operator">&lt;</span><span class="token operator">/</span>van<span class="token operator">-</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>van<span class="token operator">-</span>popup<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> mqtt <span class="token keyword">from</span> <span class="token string">'mqtt'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      client<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      subscribe1<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      subscribe2<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      username<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      url<span class="token punctuation">:</span> <span class="token string">'ws://address:port'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// ip地址和端口</span>      message<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      showSubscribe<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      showContent<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">connectServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>showSubscribe <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接中。。"</span><span class="token punctuation">)</span>      <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 连接mqtt服务器</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>client <span class="token operator">=</span> mqtt<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>        connectTimeout<span class="token punctuation">:</span> <span class="token number">5000</span><span class="token punctuation">,</span>        clientId<span class="token punctuation">:</span> <span class="token string">'小赵老弟'</span><span class="token punctuation">,</span>        username<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// password: 'zzdy123.',</span>        clean<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 连接成功之后的监听</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connect'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接成功！！！"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 订阅主题</span>        _this<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subscribe1<span class="token punctuation">,</span> <span class="token punctuation">{</span>qos<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'订阅成功'</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>showSubscribe <span class="token operator">=</span> <span class="token boolean">false</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'订阅失败'</span><span class="token punctuation">)</span>            _this<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 接收消息处理</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>topic<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log('收到来自', topic, '的消息', JSON.stringify(res))</span>        <span class="token keyword">const</span> resData <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 处理接收到的数据</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'接收到消息'</span><span class="token punctuation">,</span>resData<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"断开连接！！！"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">sendContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>showContent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subscribe2<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>showContent <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/** 断开连接 */</span>    <span class="token function">endServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h5 id="4-参考文档"><a href="#4-参考文档" class="headerlink" title="4.参考文档"></a>4.参考文档</h5><p><a href="https://www.npmjs.com/package/mqtt#handleMessage" target="_blank" rel="noopener">参考文档 mqtt-npm</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 通讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中常见的几种报错类型</title>
      <link href="/2021/02/15/JS/js%E8%BF%90%E8%A1%8C%E4%B8%AD%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
      <url>/2021/02/15/JS/js%E8%BF%90%E8%A1%8C%E4%B8%AD%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="JS-中常见的几种报错类型"><a href="#JS-中常见的几种报错类型" class="headerlink" title="JS 中常见的几种报错类型"></a>JS 中常见的几种报错类型</h2><h3 id="1、SyntaxError（语法错误）"><a href="#1、SyntaxError（语法错误）" class="headerlink" title="1、SyntaxError（语法错误）"></a>1、SyntaxError（语法错误）</h3><p>解析代码时发生的语法错误：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> 1a<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//Uncaught SyntaxError: Invalid or unexpected token 变量名错误</span>console<span class="token punctuation">.</span>log <span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Uncaught SyntaxError: Unexpected string 缺少括号</span></code></pre><h3 id="2、ReferenceError（引用错误）"><a href="#2、ReferenceError（引用错误）" class="headerlink" title="2、ReferenceError（引用错误）"></a>2、ReferenceError（引用错误）</h3><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//Uncaught ReferenceError: a is not defined 引用了一个不存在的变量</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Uncaught ReferenceError: Invalid left-hand side in assignment 将变量赋值给一个无法被赋值的对象</span></code></pre><h3 id="3、RangeError（范围错误）"><a href="#3、RangeError（范围错误）" class="headerlink" title="3、RangeError（范围错误）"></a>3、RangeError（范围错误）</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Uncaught RangeError: Invalid array length 超出有效范围</span></code></pre><h3 id="4、TypeError（类型错误）"><a href="#4、TypeError（类型错误）" class="headerlink" title="4、TypeError（类型错误）"></a>4、TypeError（类型错误）</h3><p>变量或参数不是预期类型，比如，对字符串、布尔值、数值等原始类型的值使用 new 命令，就会抛出这种错误，因为 new 命令的参数应该是一个构造函数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">123</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Uncaught TypeError: 123 is not a function</span></code></pre><p>调用对象不存在的方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> aa<span class="token punctuation">.</span><span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Uncaught TypeError: Cannot read property 'aa' of undefined</span></code></pre><h3 id="5、URLError（URL-错误）"><a href="#5、URLError（URL-错误）" class="headerlink" title="5、URLError（URL 错误）"></a>5、URLError（URL 错误）</h3><p>与 url 相关函数参数不正确，主要是 <strong>encodeURI()、decodeURI()、encodeURIComponent()、decodeURIComponent()、escape()和 unescape()</strong> 这六个函数。</p><pre class=" language-js"><code class="language-js"><span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token string">'%2'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Uncaught URIError: URI malformed</span></code></pre><h3 id="6、EvalError（eval-错误）"><a href="#6、EvalError（eval-错误）" class="headerlink" title="6、EvalError（eval 错误）"></a>6、EvalError（eval 错误）</h3><p>eval 函数没有被正确执行</p><h3 id="7、手动抛出异常"><a href="#7、手动抛出异常" class="headerlink" title="7、手动抛出异常"></a>7、手动抛出异常</h3><p>以上这 6 种派生错误，连同原始的 Error 对象，都是构造函数。开发者可以使用它们，人为生成错误对象的实例。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'出错了！'</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RangeError</span><span class="token punctuation">(</span><span class="token string">'出错了，变量超出有效范围！'</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'出错了，变量类型无效！'</span><span class="token punctuation">)</span></code></pre><blockquote><p>上面代码表示新建错误对象的实例，实质就是手动抛出错误。可以看到，错误对象的构造函数接受一个参数，代表错误提示信息（message）。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket知识了解</title>
      <link href="/2021/02/13/websocket-topic/"/>
      <url>/2021/02/13/websocket-topic/</url>
      
        <content type="html"><![CDATA[<h3 id="websocket-是什么？"><a href="#websocket-是什么？" class="headerlink" title="websocket 是什么？"></a>websocket 是什么？</h3><ul><li><p>webscoket 是 HTML5 提供的协议，支持持久连接，而 HTTP 不支持持久连接，实现了浏览器和客户端的全双工通信，也就是在浏览器向服务器发送数据的同时服务器也可以向浏览器发送数据，是一种在单个 TCP 连接上传输的全双工通信协议；</p></li><li><p>webscoket 是基于 HTTP 协议的，或者说是借用了 HTTP 协议来完成一部分握手</p><pre class=" language-header"><code class="language-header">GET /chat HTTP/1.1Host: http://127.0.0.1:8000Upgrade: websocketConnection: UpgradeSec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==Sec-WebSocket-Version: 13</code></pre></li></ul><blockquote><p>与一般的 http 握手相比是多了 Upgrade 和 Connection , 目的是为了告诉服务器发送的是 websocket</p></blockquote><h3 id="在项目开发过程中为什么会使用到-websocket-技术"><a href="#在项目开发过程中为什么会使用到-websocket-技术" class="headerlink" title="在项目开发过程中为什么会使用到 websocket 技术"></a>在项目开发过程中为什么会使用到 websocket 技术</h3><ul><li>手机或者网站上会出现一些需要实时更新的数据以及资源，这时如果我们高频次的向服务器发送请求来获取新数据也可以实现效果，但是当数据长时间未发生变化的时候，这种方法就会大量的浪费资源，是不可取的，websocket 刚好可以解决这个问题；</li></ul><h3 id="TCP-和-UDP-的区别"><a href="#TCP-和-UDP-的区别" class="headerlink" title="TCP 和 UDP 的区别"></a>TCP 和 UDP 的区别</h3><ul><li><p>特点：首先 TCP 是面向连接的可靠传输，在数据传输过程中是安全的，使用流量控制和拥塞控制；UDP 是无连接的不可靠传输，数据传输是不安全的，会出现丢包的现象；</p></li><li><p>TCP 只支持一对一的传输，UDP 不仅支持一对一，还有一对多、多对多传输；</p></li><li><p>传输方式：TCP 面向字节流； UDP 面向报文</p></li><li><p>头部开销：TCP 最小 20 字节最大 60 字节；UDP 仅 8 字节</p></li><li><p>适用场景：TCP 安全，常用于文件传输； UDP 适用于实时应用（IP 电话，视频通话，直播）</p></li></ul><h3 id="socket-和-websocket-的区别"><a href="#socket-和-websocket-的区别" class="headerlink" title="socket 和 websocket 的区别"></a>socket 和 websocket 的区别</h3><ul><li><p>socket 是应用层与 TCP/IP 协议通信的中间软件抽象层，它是一组接口。而 WebSocket 则不同，它是一个完整的应用层协议，包含一套标准的 API。</p></li><li><p>相比来说 socket 更灵活，webscoket 使用更简单方便；</p></li></ul><h3 id="websocket-和-http-的区别"><a href="#websocket-和-http-的区别" class="headerlink" title="websocket 和 http 的区别"></a>websocket 和 http 的区别</h3><ul><li><p>websocket 协议是在 http 的基础上进行的；</p></li><li><p>http 协议是短连接，在客户端发送请求的时候建立连接，请求结束之后连接断开，下次请求需要重新建立连接；</p></li><li><p>websocket 协议是长连接，只在初始化的时候建立一次连接，之后客户端和服务端的请求和响应都是通过这个 TCP 链接来进行的；</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 通讯 </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue项目中使用mock模拟接口返回数据</title>
      <link href="/2020/12/25/Vue/vue-mock-js/"/>
      <url>/2020/12/25/Vue/vue-mock-js/</url>
      
        <content type="html"><![CDATA[<p><strong>我们在项目开发过程中经常会使用前后端分离的方式，但是当后台接口没有完成的情况下，前端开发可能会出现卡壳的情况，为了解决这个问题，我们可以使用mockjs来解决；</strong></p><h4 id="1-使用npm安装mock-js"><a href="#1-使用npm安装mock-js" class="headerlink" title="1.使用npm安装mock.js"></a>1.使用npm安装mock.js</h4><pre class=" language-js"><code class="language-js">npm install mockjs <span class="token operator">--</span>save<span class="token operator">-</span>dev</code></pre><h4 id="2-创建mock-js文件"><a href="#2-创建mock-js文件" class="headerlink" title="2.创建mock.js文件"></a>2.创建mock.js文件</h4><p><img src="/2020/12/25/Vue/vue-mock-js/mock01.jpg" alt="mock.js文件"></p><ul><li><p><strong>mock.js内容如下：</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Mock <span class="token keyword">from</span> <span class="token string">'mockjs'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 引入mockjs</span><span class="token keyword">import</span> users <span class="token keyword">from</span> <span class="token string">'../assets/jsonData/user.json'</span>  <span class="token comment" spellcheck="true">// 这个是模拟数据库的json数据</span><span class="token comment" spellcheck="true">// 通过Mock.mock函数模拟登录接口</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'/api/login'</span><span class="token punctuation">,</span> <span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 这里的option是请求的相关参数   options.body是请求携带的参数（字符串）</span>  <span class="token keyword">let</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>body<span class="token punctuation">)</span>  <span class="token keyword">var</span> results <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> item<span class="token punctuation">.</span>loginName <span class="token operator">==</span> data<span class="token punctuation">.</span>loginName <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>password <span class="token operator">==</span> data<span class="token punctuation">.</span>password  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>results<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      code<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>      message<span class="token punctuation">:</span> <span class="token string">'登陆成功'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      code<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span>      message<span class="token punctuation">:</span> <span class="token string">'账号或密码错误，登陆失败'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul><h4 id="3-main-js文件引入"><a href="#3-main-js文件引入" class="headerlink" title="3.main.js文件引入"></a>3.main.js文件引入</h4><pre class=" language-js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./mock'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将上面创建的js文件全局引入</span></code></pre><h4 id="4-vue中调用接口"><a href="#4-vue中调用接口" class="headerlink" title="4.vue中调用接口"></a>4.vue中调用接口</h4><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Login'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      loginName<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      password<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里使用axios发送请求</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/login'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>      loginName<span class="token punctuation">:</span> <span class="token string">'xiaozhao'</span><span class="token punctuation">,</span>      password<span class="token punctuation">:</span> <span class="token string">'971122'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//打印结果看下图</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><img src="/2020/12/25/Vue/vue-mock-js/mock02.jpg" alt="mock.js文件"></p><h4 id="5-上面提到的user-json内容"><a href="#5-上面提到的user-json内容" class="headerlink" title="5.上面提到的user.json内容"></a>5.上面提到的user.json内容</h4><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token property">"loginName"</span><span class="token operator">:</span> <span class="token string">"xiaozhao"</span><span class="token punctuation">,</span>    <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"971122"</span><span class="token punctuation">,</span>    <span class="token property">"nickName"</span><span class="token operator">:</span> <span class="token string">"小赵"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token property">"loginName"</span><span class="token operator">:</span> <span class="token string">"xiaojun"</span><span class="token punctuation">,</span>    <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"970612"</span><span class="token punctuation">,</span>    <span class="token property">"nickName"</span><span class="token operator">:</span> <span class="token string">"小君"</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><blockquote><p>注意：mock模拟出来的接口在发送请求时是不能在浏览器的network中看到的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> mockjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础题</title>
      <link href="/2020/12/15/JS/basic-js/"/>
      <url>/2020/12/15/JS/basic-js/</url>
      
        <content type="html"><![CDATA[<h3 id="如何准确的判断复杂数据类型"><a href="#如何准确的判断复杂数据类型" class="headerlink" title="如何准确的判断复杂数据类型"></a>如何准确的判断复杂数据类型</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">judgeType</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">judgeType</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//  [object Array]</span></code></pre><h3 id="如何将多维数组进行扁平化处理"><a href="#如何将多维数组进行扁平化处理" class="headerlink" title="如何将多维数组进行扁平化处理"></a>如何将多维数组进行扁平化处理</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 扁平化处理就是将多维数组转化为一维数组</span><span class="token comment" spellcheck="true">// 1.通过扩展运算符</span><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 判断arr中是否含有Array,如果有就通过扩展运算符将二维数组转为一维数组，直到元素中不含有数组</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1,2,3,4,5]</span><span class="token comment" spellcheck="true">// 2.通过递归的方式</span><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1,2,3,4,5]</span></code></pre><h3 id="封装一个方法，排序对象数组"><a href="#封装一个方法，排序对象数组" class="headerlink" title="封装一个方法，排序对象数组"></a>封装一个方法，排序对象数组</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'xiaozhao'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">16</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'xiaozhang'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">14</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'xiaowang'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">17</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">/** * 我们要用到 sort() 函数，自定义排序规则 */</span><span class="token keyword">function</span> <span class="token function">objectSort</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> m<span class="token punctuation">[</span>property<span class="token punctuation">]</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> n<span class="token punctuation">[</span>property<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">objectSort</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">objectSort</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[{name: "xiaozhao", age: 14},{name: "xiaozhang", age: 16},{name: "xiaowang", age: 17}]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery实现导航锚点定位</title>
      <link href="/2020/12/11/nav-location/"/>
      <url>/2020/12/11/nav-location/</url>
      
        <content type="html"><![CDATA[<h3 id="jQuery实现导航锚点定位"><a href="#jQuery实现导航锚点定位" class="headerlink" title="jQuery实现导航锚点定位"></a>jQuery实现导航锚点定位</h3><p><a href="https://www.jq22.com/yanshi23494" target="_blank" rel="noopener">预览地址</a></p><p><img src="/.life//01.png" alt="效果展示"></p><h4 id="1、创建html写如下代码"><a href="#1、创建html写如下代码" class="headerlink" title="1、创建html写如下代码"></a>1、创建html写如下代码</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./css/main.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>导航锚点定位<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu-item active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>目录1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>目录2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>目录3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content4<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>目录4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content5<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>目录5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content6<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>目录6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container-div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text content1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        内容1      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text content2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        内容2      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text content3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        内容3      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text content4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        内容4      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text content5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        内容5      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text content6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        内容6      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="2、创建css文件写如下样式"><a href="#2、创建css文件写如下样式" class="headerlink" title="2、创建css文件写如下样式"></a>2、创建css文件写如下样式</h4><pre class=" language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">html,body </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token pseudo-class">:root</span> </span><span class="token punctuation">{</span>  <span class="token property">--accent-color</span><span class="token punctuation">:</span> <span class="token hexcode">#45494E</span><span class="token punctuation">;</span>  <span class="token property">--gradient-color</span><span class="token punctuation">:</span> <span class="token hexcode">#FBFBFB</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#FBFBFB</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> <span class="token number">.5</span>s<span class="token punctuation">;</span>  <span class="token property">transition-delay</span><span class="token punctuation">:</span> <span class="token number">.2</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menu</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">999</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menu</span> > ol </span><span class="token punctuation">{</span>  <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menu</span> > ol > li </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#3c3c3c</span><span class="token punctuation">;</span>  <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">5</span>px solid <span class="token function">var</span><span class="token punctuation">(</span>--gradient-color<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> <span class="token number">.5</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menu</span> > ol > li<span class="token pseudo-class">:nth-child(1)</span> </span><span class="token punctuation">{</span>  <span class="token property">--accent-color</span><span class="token punctuation">:</span> <span class="token hexcode">#FDA085</span><span class="token punctuation">;</span>  <span class="token property">--gradient-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F6D365</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menu</span> > ol > li<span class="token pseudo-class">:nth-child(2)</span> </span><span class="token punctuation">{</span>  <span class="token property">--accent-color</span><span class="token punctuation">:</span> <span class="token hexcode">#BFF098</span><span class="token punctuation">;</span>  <span class="token property">--gradient-color</span><span class="token punctuation">:</span> <span class="token hexcode">#6FD6FF</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menu</span> > ol > li<span class="token pseudo-class">:nth-child(3)</span> </span><span class="token punctuation">{</span>  <span class="token property">--accent-color</span><span class="token punctuation">:</span> <span class="token hexcode">#EA8D8D</span><span class="token punctuation">;</span>  <span class="token property">--gradient-color</span><span class="token punctuation">:</span> <span class="token hexcode">#A890FE</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menu</span> > ol > li<span class="token pseudo-class">:nth-child(4)</span> </span><span class="token punctuation">{</span>  <span class="token property">--accent-color</span><span class="token punctuation">:</span> <span class="token hexcode">#D8B5FF</span><span class="token punctuation">;</span>  <span class="token property">--gradient-color</span><span class="token punctuation">:</span> <span class="token hexcode">#1EAE98</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menu</span> > ol > li<span class="token pseudo-class">:nth-child(5)</span> </span><span class="token punctuation">{</span>  <span class="token property">--accent-color</span><span class="token punctuation">:</span> <span class="token hexcode">#C6EA8D</span><span class="token punctuation">;</span>  <span class="token property">--gradient-color</span><span class="token punctuation">:</span> <span class="token hexcode">#FE90AF</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menu</span> > ol > li<span class="token pseudo-class">:nth-child(6)</span> </span><span class="token punctuation">{</span>  <span class="token property">--accent-color</span><span class="token punctuation">:</span> <span class="token hexcode">#8dbaea</span><span class="token punctuation">;</span>  <span class="token property">--gradient-color</span><span class="token punctuation">:</span> <span class="token hexcode">#FE90AF</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menu</span> > ol > li a </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FBFBFB</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menu</span> > ol > <span class="token class">.active</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to left, <span class="token function">var</span><span class="token punctuation">(</span>--accent-color<span class="token punctuation">)</span>, <span class="token function">var</span><span class="token punctuation">(</span>--gradient-color<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">800</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menu</span> > ol > li<span class="token pseudo-class">:focus</span> <span class="token class">.sub-menu</span>,<span class="token class">.menu</span> > ol > li<span class="token pseudo-class">:focus-within</span> <span class="token class">.sub-menu</span> </span><span class="token punctuation">{</span>  <span class="token property">max-height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menu</span> > ol > li<span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#3c3c3c</span><span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> <span class="token number">.5</span>s<span class="token punctuation">;</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:hover</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.active</span> > a<span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menu</span> > ol </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">max-width</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menu</span> > ol > li </span><span class="token punctuation">{</span>    <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">5</span>px solid <span class="token function">var</span><span class="token punctuation">(</span>--accent-color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> top<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menu</span> > ol > <span class="token class">.active</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom, <span class="token function">var</span><span class="token punctuation">(</span>--accent-color<span class="token punctuation">)</span>, <span class="token function">var</span><span class="token punctuation">(</span>--gradient-color<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> -<span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> -<span class="token number">5</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.container-div</span> </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content1</span> </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">250</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">700</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>to bottom, <span class="token hexcode">#fda085</span><span class="token number">6</span>b, <span class="token hexcode">#f6d365</span><span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom, <span class="token hexcode">#fda085</span><span class="token number">6</span>b, <span class="token hexcode">#f6d365</span><span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content2</span> </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">250</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">700</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>to bottom, <span class="token hexcode">#bff098</span><span class="token number">6</span>b, <span class="token hexcode">#6fd6ff</span><span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom, <span class="token hexcode">#bff098</span><span class="token number">6</span>b, <span class="token hexcode">#6fd6ff</span><span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content3</span> </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">250</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">700</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>to bottom, <span class="token hexcode">#ea8d8d</span><span class="token number">6</span>b, <span class="token hexcode">#a890fe</span><span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom, <span class="token hexcode">#ea8d8d</span><span class="token number">6</span>b, <span class="token hexcode">#a890fe</span><span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content4</span> </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">250</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">700</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>to bottom, <span class="token hexcode">#d8b5ff</span><span class="token number">6</span>b, <span class="token hexcode">#1eae98</span><span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom, <span class="token hexcode">#d8b5ff</span><span class="token number">6</span>b, <span class="token hexcode">#1eae98</span><span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content5</span> </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">250</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">700</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>to bottom, <span class="token hexcode">#c6ea8d</span><span class="token number">6</span>b, <span class="token hexcode">#fe90af</span><span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom, <span class="token hexcode">#c6ea8d</span><span class="token number">6</span>b, <span class="token hexcode">#fe90af</span><span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content6</span> </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">250</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">700</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>to bottom, <span class="token hexcode">#8dbaea</span><span class="token number">6</span>b, <span class="token hexcode">#fe90af</span><span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom, <span class="token hexcode">#8dbaea</span><span class="token number">6</span>b, <span class="token hexcode">#fe90af</span><span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3、创建js文件写如下代码"><a href="#3、创建js文件写如下代码" class="headerlink" title="3、创建js文件写如下代码"></a>3、创建js文件写如下代码</h4><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ol li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 页面平滑的滚动到相应的位置</span>      <span class="token function">scrollToTop</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token operator">+</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* 监听滚动 */</span>  <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scroll</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//滚动条滑到底部啦</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ol li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ol li:last"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> top <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//滚动条距离顶部的高度</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".text"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top <span class="token operator">&lt;=</span> top<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ol li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token operator">+</span>item<span class="token punctuation">.</span>classList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/** 将滚动轴滚到相应位置 */</span><span class="token keyword">function</span> <span class="token function">scrollToTop</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>  window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      top<span class="token punctuation">:</span> number<span class="token punctuation">,</span>      behavior<span class="token punctuation">:</span> <span class="token string">"smooth"</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端每日基础题</title>
      <link href="/2020/12/05/DailyTopic/"/>
      <url>/2020/12/05/DailyTopic/</url>
      
        <content type="html"><![CDATA[<h3 id="2020-12-05"><a href="#2020-12-05" class="headerlink" title="2020-12-05"></a>2020-12-05</h3><h4 id="用递归算法实现，数组长度为-5-且元素的随机数在-2-32-间不重复的值"><a href="#用递归算法实现，数组长度为-5-且元素的随机数在-2-32-间不重复的值" class="headerlink" title="用递归算法实现，数组长度为 5 且元素的随机数在 2-32 间不重复的值"></a>用递归算法实现，数组长度为 5 且元素的随机数在 2-32 间不重复的值</h4><p>解：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 先创建长度为5的数组</span><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 定义count当作数组的索引来使用</span><span class="token function">getRandomNums</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调用方法</span><span class="token keyword">function</span> <span class="token function">getRandomNums</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">>=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 首先判断索引 如果索引等于数组的长度就调出递归</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 打印最终结果后退出</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> data <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">30</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 生成2-32的随机数</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断数组中不存在这个随机数将随机数放在索引为 count 的位置上</span>    array<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> data    count<span class="token operator">++</span> <span class="token comment" spellcheck="true">// 存入数据之后索引加 1</span>  <span class="token punctuation">}</span>  <span class="token function">getRandomNums</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//继续调用形成递归</span><span class="token punctuation">}</span></code></pre><h4 id="说说对圣杯布局和双飞翼布局的理解和区别"><a href="#说说对圣杯布局和双飞翼布局的理解和区别" class="headerlink" title="说说对圣杯布局和双飞翼布局的理解和区别"></a>说说对圣杯布局和双飞翼布局的理解和区别</h4><ul><li><p>两种布局方式都是两边固定，中间自适应的三栏布局，中间栏放在文档流前面优先渲染；</p></li><li><p>圣杯布局：为了中间部分不被遮挡，采用中间栏设置 <strong><font color="#249caf">padding-left</font></strong> 和 <strong><font color="#249caf">padding-right</font></strong> 后，将左右两栏通过相对布局 <strong><font color="#249caf">position: relative;配合 left right</font></strong> 的方式固定在两边；</p></li><li><p>双飞翼布局：为了中间部分不被遮挡，中间采用两个 div 做嵌套，子 div 设置<strong><font color="#249caf">margin-left</font></strong> 和 <strong><font color="#249caf">margin-right</font></strong> 给左右两边留出位置；</p></li></ul><h4 id="页面导入样式时，使用-link-和-import-有什么区别"><a href="#页面导入样式时，使用-link-和-import-有什么区别" class="headerlink" title="页面导入样式时，使用 link 和@import 有什么区别"></a>页面导入样式时，使用 link 和@import 有什么区别</h4><ul><li><p>link 是 HTML 标签，@import 是 css 提供的语法；</p></li><li><p>link 引入的样式页面加载时同时加载，@import 引入的样式需等页面加载完成后再加载；</p></li><li><p>link 没有兼容性问题，@import 不兼容 ie5 以下；</p></li><li><p>link 可以通过 js 操作 DOM 动态引入样式表改变样式，而@import 不可以；</p></li></ul><h3 id="2020-12-07"><a href="#2020-12-07" class="headerlink" title="2020-12-07"></a>2020-12-07</h3><h4 id="用-css-画一条-0-5px-的直线"><a href="#用-css-画一条-0-5px-的直线" class="headerlink" title="用 css 画一条 0.5px 的直线"></a>用 css 画一条 0.5px 的直线</h4><ul><li><p>这个题是考验 CSS3 的 <font color="#249caf">transform</font></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">      <span class="token selector"><span class="token class">.main</span> </span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* css的2D缩放转换 */</span>      <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul><h4 id="用-css-设置水平垂直居中"><a href="#用-css-设置水平垂直居中" class="headerlink" title="用 css 设置水平垂直居中"></a>用 css 设置水平垂直居中</h4><ul><li><p>水平居中：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 1.行级元素 */</span><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 2.块级元素 */</span><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 3.flex弹性布局 */</span><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 4.绝对定位配合transform */</span><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>垂直居中：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 1.设置line-height的值为元素的高度 */</span><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 2.flex弹性布局 */</span><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 3.绝对定位配合transform */</span><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 4.display: table的方式 */</span><span class="token selector"><span class="token class">.main</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 父元素 */</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 子元素 */</span>  <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="css-的-support、-media-和-calc-的区别"><a href="#css-的-support、-media-和-calc-的区别" class="headerlink" title="css 的 @support、@media 和 calc 的区别"></a>css 的 @support、@media 和 calc 的区别</h4><ul><li><p>@support 主要是用于检测浏览器是否支持 CSS 的某个属性，其实就是条件判断，如果支持某个属性，你可以写一套样式，如果不支持某个属性，你也可以提供另外一套样式作为替补；</p></li><li><p>@media 查询可以针对不同的媒体类型定义不同的样式；<br>@media 可以针对不同的屏幕尺寸设置不同的样式，特别是如果你需要设置设计响应式的页面，@media 是非常有用的；<br>当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面；</p></li><li><p>calc()函数用于动态计算长度，支持 ‘+’、 ‘-‘、 ‘*‘、 ‘/‘、 四种计算方式</p></li></ul><h4 id="用-js-写出一个去掉字符串空格的方法"><a href="#用-js-写出一个去掉字符串空格的方法" class="headerlink" title="用 js 写出一个去掉字符串空格的方法"></a>用 js 写出一个去掉字符串空格的方法</h4><ul><li><p>使用正则表达式的方法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 删除字符串左右两端的空格</span><span class="token keyword">function</span> <span class="token function">trim</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(^\s*)|(\s*$)/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 删除左端空格</span><span class="token keyword">function</span> <span class="token function">leftTrim</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(^\s*)/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 删除右端空格</span><span class="token keyword">function</span> <span class="token function">rightTrim</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(\s*$)/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 删除所有空格</span><span class="token keyword">function</span> <span class="token function">allTrim</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token string">' he l l o   '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "he l l o"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">leftTrim</span><span class="token punctuation">(</span><span class="token string">' he l l o   '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "he l l o   "</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">rightTrim</span><span class="token punctuation">(</span><span class="token string">' he l l o   '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// " he l l o"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">allTrim</span><span class="token punctuation">(</span><span class="token string">' he l l o   '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "hello"</span></code></pre></li></ul><h4 id="列举出常用的-html-标签"><a href="#列举出常用的-html-标签" class="headerlink" title="列举出常用的 html 标签"></a>列举出常用的 html 标签</h4><table><thead><tr><th align="center">块儿级元素</th><th align="center">描述</th><th align="center">行级元素</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">div</td><td align="center">常用的块级容器</td><td align="center">span</td><td align="center">常用的行内元素，定义文本内区块</td></tr><tr><td align="center">h1~h6</td><td align="center">标题</td><td align="center">a</td><td align="center">锚点、超链接</td></tr><tr><td align="center">hr</td><td align="center">水平分割线</td><td align="center">b</td><td align="center">文字内容加粗</td></tr><tr><td align="center">menu</td><td align="center">菜单列表</td><td align="center">strong</td><td align="center">文字内容加粗强调</td></tr><tr><td align="center">ol</td><td align="center">有序列表</td><td align="center">i</td><td align="center">文字内容斜体</td></tr><tr><td align="center">ul</td><td align="center">无序列表</td><td align="center">em</td><td align="center">文字内容斜体强调</td></tr><tr><td align="center">li</td><td align="center">列表项</td><td align="center">br</td><td align="center">强制换行</td></tr><tr><td align="center">dl</td><td align="center">定义列表</td><td align="center">input</td><td align="center">文本输入框</td></tr><tr><td align="center">table</td><td align="center">表格</td><td align="center">textarea</td><td align="center">多行文本输入框</td></tr><tr><td align="center">p</td><td align="center">段落</td><td align="center">img</td><td align="center">引入图片</td></tr><tr><td align="center">form</td><td align="center">交互表单</td><td align="center">select</td><td align="center">下拉列表</td></tr></tbody></table><h3 id="2020-12-08"><a href="#2020-12-08" class="headerlink" title="2020-12-08"></a>2020-12-08</h3><h4 id="1rem、1em、1vh、1px-各自代表的含义？"><a href="#1rem、1em、1vh、1px-各自代表的含义？" class="headerlink" title="1rem、1em、1vh、1px 各自代表的含义？"></a>1rem、1em、1vh、1px 各自代表的含义？</h4><ul><li><p><strong>rem</strong>： 表示相对于根节点 <strong><font color="#249caf">&lt;HTML&gt;</font></strong> 的长度;<br>通常情况下：我们给 <font color="#249caf">&lt;HTML&gt;</font> 设置字体大小，页面中其他长度就可以使用 <font color="#249caf">rem</font>；</p></li><li><p><strong>em</strong>：子元素的字体大小是相对于父元素的 <font color="#249caf">font-size</font> 来表示的；<br>元素的 width、height、padding、margin 使用 <strong>em</strong> 是相对于该元素的 <font color="#249caf">font-size</font>;</p></li><li><p><strong>vw</strong>/<strong>vh</strong>：Viewport Width 和 Viewport Height，表示视窗的宽度和高度，我经常配合<font color="#249caf">calc()</font>函数使用；</p></li><li><p><strong>px</strong>：相对长度单位，具体长度根据显示器的分辨率确定，常见的显示器分辨率为 <font color="#249caf">1920×1080</font>；</p></li></ul><h4 id="说一下盒模型"><a href="#说一下盒模型" class="headerlink" title="说一下盒模型"></a>说一下盒模型</h4><ul><li><p><strong><font color="#249caf">盒模型</font></strong> 是一种常用的页面布局方式，由内向外的结构为：<strong>content</strong> &gt; <strong>padding</strong> &gt; <strong>border</strong> &gt; <strong>margin</strong>;</p></li><li><p>标准的盒模型的 <strong>width</strong> 是 <strong>content</strong> 的宽度： <code>box-sizing: content-box;</code></p></li><li><p>IE 的盒模型的 <strong>width</strong> 是 <strong>content + padding + border</strong> 的宽度：<code>box-sizing: border-box;</code></p></li></ul><h3 id="2020-12-09"><a href="#2020-12-09" class="headerlink" title="2020-12-09"></a>2020-12-09</h3><h4 id="用-css-画一个三角形"><a href="#用-css-画一个三角形" class="headerlink" title="用 css 画一个三角形"></a>用 css 画一个三角形</h4><blockquote><p>我们通常会用组件库进行开发，但原生的 css 还是需要掌握的</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">      <span class="token comment" spellcheck="true">/* 三角形 */</span>      <span class="token selector"><span class="token class">.triangle</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>        <span class="token property">border-color</span><span class="token punctuation">:</span> transparent <span class="token hexcode">#0099cc</span> transparent transparent<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 三角形 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>triangle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="2020-12-12"><a href="#2020-12-12" class="headerlink" title="2020-12-12"></a>2020-12-12</h3><h4 id="CSS-BFC"><a href="#CSS-BFC" class="headerlink" title="CSS BFC"></a>CSS BFC</h4><ul><li><p><strong><font color="#249caf">block formatting context</font></strong> ：块级格式化上下文；</p></li><li><p><strong>bfc</strong>：是一个独立的渲染区域，只有 block-level box 参与，它规定了内部的 block-level box 如何布局，并且与这个区域外部毫不相干。</p></li><li><p><strong>如何创建 BFC</strong>：<br>满足以下任何一点都可以创建 bfc</p><ul><li><strong>float</strong> 属性不为 <strong>none</strong>；</li><li><strong>overflow</strong> 属性不为 <strong>visible</strong>（可以是<strong>hidden</strong>、<strong>scoll</strong>、<strong>auto</strong>）；</li><li><strong>position</strong> 为 <strong>absolute</strong>或<strong>fixed</strong>；</li><li><strong>display</strong> 为 <strong>inline-block</strong>、<strong>table-cell</strong>、<strong>table-caption</strong></li></ul></li><li><p><strong>BFC 的作用</strong></p><ul><li><strong>清除内部浮动</strong><br>我们在布局时经常会遇到这个问题：对子元素设置浮动后，父元素会发生高度塌陷，也就是父元素的高度变为 0。解决这个问题，只需要把把父元素变成一个 BFC 就行了。常用的办法是给父元素设置 overflow:hidden；</li><li><strong>垂直 margin 合并</strong><br>在 CSS 当中，相邻的两个盒子的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距;<ul><li>两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值;</li><li>两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值;</li><li>两个外边距一正一负时，折叠结果是两者的相加的和;</li></ul></li></ul><blockquote><p><strong>这里的两个盒子必须是垂直相邻的</strong>；</p></blockquote></li></ul><h3 id="2020-12-16"><a href="#2020-12-16" class="headerlink" title="2020-12-16"></a>2020-12-16</h3><h4 id="label-标签的用法"><a href="#label-标签的用法" class="headerlink" title="label 标签的用法"></a><strong>label</strong> 标签的用法</h4><ul><li><strong>label</strong> 标签的的主要作用是为了扩大可点击范围，增加用户体验；</li></ul><h4 id="遍历-a-节点下的所有子节点"><a href="#遍历-a-节点下的所有子节点" class="headerlink" title="遍历 a 节点下的所有子节点"></a>遍历 a 节点下的所有子节点</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token keyword">var</span> list <span class="token operator">=</span> a<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>childrenconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span></code></pre><h4 id="js-用递归的方式写-1-100-求和"><a href="#js-用递归的方式写-1-100-求和" class="headerlink" title="js 用递归的方式写 1-100 求和"></a>js 用递归的方式写 1-100 求和</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">101</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> sum  <span class="token punctuation">}</span>  sum <span class="token operator">+</span><span class="token operator">=</span> i  i<span class="token operator">++</span>  <span class="token function">getSum</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5050</span></code></pre><h4 id="HTML-页面的渲染过程"><a href="#HTML-页面的渲染过程" class="headerlink" title="HTML 页面的渲染过程"></a>HTML 页面的渲染过程</h4><ul><li><p>构建 <strong><font color="#249caf">DOM</font></strong> 树<br>将 Html 所有节点构建成 DOM 树，把所有节点构建出来；</p></li><li><p>构建 <strong><font color="#249caf">CSSOM</font></strong> 树<br>解析 CSS 来构建 CSSOM 树；</p></li><li><p>构建 <strong><font color="#249caf">render</font></strong> 树<br>有了 DOM 树和 CSSOM 树之后，浏览器会根据 DOM 树和 CSSOM 树来构建 render 树，从而知道了有哪些节点，每个节点的位置和 css 样式以及各个节点的从属关系；</p></li><li><p>布局<br>render 树有了之后，浏览器就开始计算各个节点的位置和样式；</p></li><li><p>绘制页面<br>遍历 render 树，在页面上绘制每个节点；</p></li><li><p>页面 <strong><font color="#249caf">回流 reflow</font></strong> 和 <strong><font color="#249caf">重绘 repaint</font></strong><br>有时候 javascript 中会有对 dom 节点和 css 的操作，这时候就需要重新构建 render 树；<br><strong><font color="#249caf">回流</font></strong>: 当 render 树中的一部分(或全部)因为元素的尺寸，布局，隐藏等改变而需要重新构建；<br>回流之后就会进行重绘;<br><strong><font color="#249caf">重绘</font></strong>：当只是元素的外观，风格变化，不影响布局的，重新渲染的过程就叫重绘。</p></li></ul><h4 id="HTML-解析过程中-js、css、dom-的加载顺序"><a href="#HTML-解析过程中-js、css、dom-的加载顺序" class="headerlink" title="HTML 解析过程中 js、css、dom 的加载顺序"></a>HTML 解析过程中 js、css、dom 的加载顺序</h4><ul><li><p>首先我们都知道 HTML 是按照 <strong><font color="#249caf">从上往下</font></strong> 的顺序进行加载的；</p></li><li><p>如果遇到 <strong><font color="#249caf">link</font></strong> 和 <strong><font color="#249caf">style</font></strong> ，就会去下载这些 css 资源，但是 css 和 dom 的构建是 <strong><font color="#249caf">并行的</font></strong> ，因此 css 资源的加载并不会阻塞 dom 树的构建；</p></li><li><p><strong><font color="#249caf">如果遇到 script，那么页面就会把控制权交给 JavaScript</font>，直到脚本加载完成或者构建完毕才会继续向下进行</strong>；</p></li><li><p>页面绘制依靠的是 render 树，因此如果<font color="#249caf">DOM 树和 CSSOM 树未构建完成，页面是不会显示的</font>；</p></li><li><p>JavaScript 执行过程中可能会对 css 进行操作，所以在 css 加载的时候会对 script 进行阻塞的；</p></li></ul><blockquote><p>注意：我们在写 HTML 页面的时候一般会把 css 放在页面头部，js 放在页面底部，是因为 js 中可能会出现操作 DOM 的情况，如果把 js 放在 dom 元素前面，那么按照加载顺序来看的话，js 阻塞了 DOM 树的构建，当 js 在操作 DOM 的时候 DOM 树还不存在，这时就会抛出异常；</p></blockquote><h3 id="2020-12-18"><a href="#2020-12-18" class="headerlink" title="2020-12-18"></a>2020-12-18</h3><h4 id="js-如何中断-ajax-请求"><a href="#js-如何中断-ajax-请求" class="headerlink" title="js 如何中断 ajax 请求"></a>js 如何中断 ajax 请求</h4><ul><li><p>第一种方式：在 ajax 中 <strong><font color="#249caf">设置超时时间</font></strong>，可以让 ajax 自动断开</p></li><li><p>第二种方式：调用 <strong><font color="#249caf">XMLHttpRequest</font></strong> 对象上的 <strong><font color="#249caf">abort()</font></strong> 方法</p></li></ul><h4 id="target-和-currentTarget-的区别"><a href="#target-和-currentTarget-的区别" class="headerlink" title="target 和 currentTarget 的区别"></a>target 和 currentTarget 的区别</h4><ul><li><p><strong><font color="#249caf">target</font></strong> 表示点击的节点</p></li><li><p><strong><font color="#249caf">currentTarget</font></strong> 表示触发事件的节点</p></li></ul><h4 id="说一下事件代理-事件委托"><a href="#说一下事件代理-事件委托" class="headerlink" title="说一下事件代理(事件委托)"></a>说一下事件代理(事件委托)</h4><ul><li><p>事件代理是指将事件绑定到 <strong><font color="#249caf">指定元素的父元素上</font></strong>，利用 <strong><font color="#249caf">事件的冒泡机制</font></strong> 让指定元素触发事件；</p></li><li><p>优点：当 <strong><font color="#249caf">重复元素特别多</font></strong> 的时候（例如：li），不需要循环绑定事件，可以很大程度的减少对 dom 的操作，提高页面性能；</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ul1'</span><span class="token punctuation">)</span>  list<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> ev <span class="token operator">=</span> ev <span class="token operator">||</span> window<span class="token punctuation">.</span>event    <span class="token keyword">var</span> target <span class="token operator">=</span> ev<span class="token punctuation">.</span>target <span class="token operator">||</span> ev<span class="token punctuation">.</span>srcElement    <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>nodeName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'li'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="2020-12-19"><a href="#2020-12-19" class="headerlink" title="2020-12-19"></a>2020-12-19</h3><h4 id="javascript-的宏任务和微任务"><a href="#javascript-的宏任务和微任务" class="headerlink" title="javascript 的宏任务和微任务"></a>javascript 的宏任务和微任务</h4><ul><li><p><strong><font color="#249caf">宏任务(macrotask)</font></strong>：当前执行栈中执行的任务就是宏任务，常见的有 <font color="#249caf">script 主代码块儿、定时器</font> 等；</p></li><li><p><strong><font color="#249caf">微任务(microtask)</font></strong>：在当前宏任务执行结束后，下一个宏任务开始之前执行的任务是微任务，常见的就是 promise 函数；</p></li><li><p>宏任务的宿主是 <font color="#249caf">浏览器或 node</font>、微任务的宿主是 <font color="#249caf">js 引擎</font></p></li></ul><h3 id="2020-12-28"><a href="#2020-12-28" class="headerlink" title="2020-12-28"></a>2020-12-28</h3><h4 id="export-和-export-default-的区别"><a href="#export-和-export-default-的区别" class="headerlink" title="export 和 export default 的区别"></a>export 和 export default 的区别</h4><ul><li><p><strong>export</strong> 的用法：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** 直接导出  */</span><span class="token keyword">export</span> <span class="token keyword">let</span> words <span class="token operator">=</span> <span class="token string">'hello world!!!'</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** 先定义在导出 */</span><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">'hahaha'</span><span class="token punctuation">;</span><span class="token keyword">export</span> data<span class="token punctuation">;</span></code></pre></li><li><p><strong>export default</strong> 的用法</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** 只能直接导出，而且一个文件中只能出现一次,不能先定义后导出  */</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li><p>两种方式的 <strong>import</strong> 是不一样的</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// export</span><span class="token keyword">import</span> <span class="token punctuation">{</span> words<span class="token punctuation">,</span> output<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'export'</span><span class="token comment" spellcheck="true">// export default</span><span class="token keyword">import</span> output <span class="token keyword">from</span> <span class="token string">'export default'</span></code></pre></li></ul><h4 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h4><ul><li><p>闭包的实质是：<strong>通过函数的嵌套而形成的作用域链</strong>；</p></li><li><p>闭包的定义：<strong>函数 A</strong> 的<strong>内部</strong>有一个 <strong>函数 B</strong>，<strong>函数 B</strong> 中可以访问到 <strong>函数 A</strong> 的变量，那么 <strong>函数 B 就是闭包</strong>；</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** 例 1 */</span><span class="token keyword">function</span> <span class="token function">funA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment" spellcheck="true">// funA的活动对象之中;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//匿名函数的活动对象;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">funA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** 例 2 */</span><span class="token keyword">function</span> <span class="token function">outerFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'外'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">innerFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    i<span class="token operator">++</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'内'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> innerFn<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** 每次外部函数执行的时候,都会开辟一块内存空间,外部函数的地址不同，都会重新创建一个新的地址 */</span><span class="token keyword">var</span> inner <span class="token operator">=</span> <span class="token function">outerFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 外  0</span><span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 内  1</span><span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 内  2</span><span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 内  3</span><span class="token keyword">var</span> inner2 <span class="token operator">=</span> <span class="token function">outerFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 外  0</span><span class="token function">inner2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 内  1</span><span class="token function">inner2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 内  2</span><span class="token function">inner2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 内  3</span></code></pre></li><li><p><strong>闭包的特点：</strong></p><ul><li>让外部访问函数内部变量成为可能；</li><li>局部变量会常驻在内存中；</li><li>可以避免使用全局变量，防止全局变量污染；</li><li>会造成内存泄漏（有一块内存空间被长期占用，而不被释放）</li></ul></li></ul><h4 id="什么是-cookie，什么是会话-cookie，什么是持久性-cookie"><a href="#什么是-cookie，什么是会话-cookie，什么是持久性-cookie" class="headerlink" title="什么是 cookie，什么是会话 cookie，什么是持久性 cookie"></a>什么是 cookie，什么是会话 cookie，什么是持久性 cookie</h4><ul><li><p><strong>什么是 cookie：</strong><br>Cookie 是 Web 服务器发送到浏览器的数据字符串。 当浏览器在将来请求来自同一个域的对象时，该浏览器会将同一日期字符串发送回原始服务器，该数据以一个称为“Set-Cookie”的 HTTP 报头格式从 Web 服务器发出。 浏览器以称为“Cookie”的 HTTP 报头格式将 cookie 发送回服务器。</p></li><li><p><strong>会话 cookie：</strong><br>当 cookie 中没有到期时间的时候，可视为会话 cookie，会话 cookie 的信息只会保存在内存中，当浏览器关闭时，cookie 信息就会永久丢失；</p></li><li><p><strong>持久性 cookie：</strong><br>当 cookie 中有到期时间的时候，是持久性 cookie，cookie 的信息会保存在磁盘中，在指定的到期日期，cookie 会自动删除；</p></li></ul><h3 id="2020-12-29"><a href="#2020-12-29" class="headerlink" title="2020-12-29"></a>2020-12-29</h3><h4 id="js-中数组条件查询的方法-find、findIndex、indexOf、lastIndexOf-、includes"><a href="#js-中数组条件查询的方法-find、findIndex、indexOf、lastIndexOf-、includes" class="headerlink" title="js 中数组条件查询的方法(find、findIndex、indexOf、lastIndexOf 、includes)"></a>js 中数组条件查询的方法(find、findIndex、indexOf、lastIndexOf 、includes)</h4><ul><li><p><strong><font color="#249caf">find()</font></strong>：返回数组中满足判断条件的第一个元素；</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 返回数组中 >= 15 的第一个元素</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token keyword">var</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> item <span class="token operator">>=</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 15</span></code></pre></li><li><p><strong><font color="#249caf">findIndex()</font></strong>：返回数组中满足判断条件的第一个元素的索引，不存在返回-1；</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 返回数组中 >= 15 的第一个元素的索引</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token keyword">var</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> item <span class="token operator">>=</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4</span></code></pre></li><li><p><strong><font color="#249caf">indexOf()</font></strong>：返回数组中找到给定元素第一次出现的索引，不存在返回-1；</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 返回数组中第一个15的索引</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token keyword">var</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 默认是从索引为0的位置往后查找</span><span class="token keyword">var</span> num1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 从索引为4的位置往后查找</span><span class="token keyword">var</span> num2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 从索引为10的位置往后查找</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -1</span></code></pre></li><li><p><strong><font color="#249caf">lastIndexOf()</font></strong>：返回数组中找到给定元素最后一次出现的索引，不存在返回-1；</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 返回数组中第一个15的索引</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token keyword">var</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 默认是从索引为arr.length-1的位置向前查找</span><span class="token keyword">var</span> num1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 从索引为4的位置向前查找</span><span class="token keyword">var</span> num2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 从索引为1的位置向前查找</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -1</span></code></pre></li><li><p><strong><font color="#249caf">includes()</font></strong>：用来判断当前数组是否包含某指定的值，如果是，则返回 true，否则返回 false</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true     从索引0位置往后查找是否存在5元素，是</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false    从索引10位置往后查找是否存在10元素，否</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Vue项目中使用wangEditor编辑器</title>
      <link href="/2020/12/02/Vue/vue-wangEditor/"/>
      <url>/2020/12/02/Vue/vue-wangEditor/</url>
      
        <content type="html"><![CDATA[<h3 id="1、在项目中安装-wangEditor"><a href="#1、在项目中安装-wangEditor" class="headerlink" title="1、在项目中安装 wangEditor"></a>1、在项目中安装 <strong>wangEditor</strong></h3><p>使用 <strong>npm</strong> 安装：</p><pre><code>npm install wangeditor --save</code></pre><h3 id="2、创建组件wangEditor"><a href="#2、创建组件wangEditor" class="headerlink" title="2、创建组件wangEditor"></a>2、创建组件wangEditor</h3><ul><li><p>在components中创建文件夹wangEditor</p></li><li><p>组件内容如下：</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"editor"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">"toolbar"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"toolbar"</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">"editor"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">import</span> E <span class="token keyword">from</span> <span class="token string">"wangeditor"</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'editor'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">{</span>        content<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span>        editor<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        info_<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        isChange<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    model<span class="token punctuation">:</span> <span class="token punctuation">{</span>      prop<span class="token punctuation">:</span> <span class="token string">'value'</span><span class="token punctuation">,</span>      event<span class="token punctuation">:</span> <span class="token string">'change'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>      isClear <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 触发清除文本域内容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>editor<span class="token punctuation">.</span>txt<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>info_ <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      value <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里的判断是为了解决编辑内容是光标乱跳的问题</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isChange<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>editor<span class="token punctuation">.</span>txt<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isChange<span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      isClear<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">seteditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      seteditor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">E</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>toolbar<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>editor<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>editor<span class="token punctuation">.</span>customConfig <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>editor<span class="token punctuation">.</span>customConfig <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>editor<span class="token punctuation">.</span>customConfig <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>editor<span class="token punctuation">.</span>config<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// this.editor.customConfig.uploadImgShowBase64 = true // base 64 存储图片</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>editor<span class="token punctuation">.</span>customConfig<span class="token punctuation">.</span>uploadImgServer <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>VUE_APP_BASE_API<span class="token comment" spellcheck="true">// 配置服务器端地址</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>editor<span class="token punctuation">.</span>customConfig<span class="token punctuation">.</span>uploadImgHeaders <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 自定义 header</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>editor<span class="token punctuation">.</span>customConfig<span class="token punctuation">.</span>uploadFileName <span class="token operator">=</span> <span class="token string">'file'</span> <span class="token comment" spellcheck="true">// 后端接受上传文件的参数名</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>editor<span class="token punctuation">.</span>customConfig<span class="token punctuation">.</span>uploadImgMaxSize <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token comment" spellcheck="true">// 将图片大小限制为 2M</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>editor<span class="token punctuation">.</span>customConfig<span class="token punctuation">.</span>uploadImgMaxLength <span class="token operator">=</span> <span class="token number">6</span> <span class="token comment" spellcheck="true">// 限制一次最多上传 3 张图片</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>editor<span class="token punctuation">.</span>customConfig<span class="token punctuation">.</span>uploadImgTimeout <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token comment" spellcheck="true">// 设置超时时间</span>        <span class="token comment" spellcheck="true">// 配置菜单</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>editor<span class="token punctuation">.</span>customConfig<span class="token punctuation">.</span>menus <span class="token operator">=</span> <span class="token punctuation">[</span>          <span class="token string">'head'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 标题</span>          <span class="token string">'bold'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 粗体</span>          <span class="token string">'fontSize'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 字号</span>          <span class="token string">'fontName'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 字体</span>          <span class="token string">'italic'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 斜体</span>          <span class="token string">'underline'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 下划线</span>          <span class="token string">'strikeThrough'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 删除线</span>          <span class="token string">'foreColor'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 文字颜色</span>          <span class="token string">'backColor'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 背景颜色</span>          <span class="token string">'link'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 插入链接</span>          <span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 列表</span>          <span class="token string">'justify'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 对齐方式</span>          <span class="token string">'quote'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 引用</span>          <span class="token comment" spellcheck="true">// 'emoticon', // 表情</span>          <span class="token string">'image'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 插入图片</span>          <span class="token string">'table'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 表格</span>          <span class="token comment" spellcheck="true">// 'video', // 插入视频</span>          <span class="token string">'code'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 插入代码</span>          <span class="token string">'undo'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 撤销</span>          <span class="token string">'redo'</span> <span class="token comment" spellcheck="true">// 重复</span>        <span class="token punctuation">]</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>editor<span class="token punctuation">.</span>customConfig<span class="token punctuation">.</span>uploadImgHooks <span class="token operator">=</span> <span class="token punctuation">{</span>          fail<span class="token punctuation">:</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">,</span> editor<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 插入图片失败回调</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          success<span class="token punctuation">:</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">,</span> editor<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 图片上传成功回调</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          timeout<span class="token punctuation">:</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">,</span> editor<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 网络超时的回调</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          error<span class="token punctuation">:</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">,</span> editor<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 图片上传错误的回调</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          customInsert<span class="token punctuation">:</span> <span class="token punctuation">(</span>insertImg<span class="token punctuation">,</span> result<span class="token punctuation">,</span> editor<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 图片上传成功，插入图片的回调</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>editor<span class="token punctuation">.</span>customConfig<span class="token punctuation">.</span>onchange <span class="token operator">=</span> <span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>isChange <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>info_ <span class="token operator">=</span> html <span class="token comment" spellcheck="true">// 绑定当前逐渐地值</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>info_<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 将内容同步到父组件中</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建富文本编辑器</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>editor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>editor<span class="token punctuation">.</span>txt<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token punctuation">.</span>editor <span class="token punctuation">{</span>  margin<span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>toolbar <span class="token punctuation">{</span>  border<span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>text <span class="token punctuation">{</span>  border<span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>  height<span class="token punctuation">:</span> 350px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h3 id="3、父组件中调用方法"><a href="#3、父组件中调用方法" class="headerlink" title="3、父组件中调用方法"></a>3、父组件中调用方法</h3><p>代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>wangEditor v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"noticeContent"</span> @change<span class="token operator">=</span><span class="token string">"changeContent"</span> <span class="token punctuation">:</span>isClear<span class="token operator">=</span><span class="token string">"isClear"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>wangEditor<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token keyword">import</span> wangEditor <span class="token keyword">from</span> <span class="token string">'@/components/wangEditor'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> wangEditor <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      noticeContent<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      content<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span>      isClear<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">//清除富文本编辑器内容</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">changeContent</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>noticeContent <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-生命周期</title>
      <link href="/2020/12/02/Vue/vue-lifecycle/"/>
      <url>/2020/12/02/Vue/vue-lifecycle/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue生命周期详解"><a href="#Vue生命周期详解" class="headerlink" title="Vue生命周期详解"></a>Vue生命周期详解</h3><h4 id="以下是一张官网的生命周期图示"><a href="#以下是一张官网的生命周期图示" class="headerlink" title="以下是一张官网的生命周期图示"></a>以下是一张官网的生命周期图示</h4><p><img src="/2020/12/02/Vue/vue-lifecycle/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg" alt="vue生命周期"></p><h4 id="1、beforeCreate-（vue实例创建前）"><a href="#1、beforeCreate-（vue实例创建前）" class="headerlink" title="1、beforeCreate （vue实例创建前）"></a>1、beforeCreate （vue实例创建前）</h4><p>在实例初始化之后，数据观测和事件配置之前被调用，此时组件的选项对象还未创建，el 和 data 并未初始化，因此<strong><em>无法访问 methods， data， computed 等上的方法和数据</em></strong>;</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">'linlin'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">getLists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">'aaa'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeCreate'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行上面代码之后控制台报错：</p><p><img src="/2020/12/02/Vue/vue-lifecycle/01.png" alt="beforeCreate函数调用资源结果"></p><p>因为就像前面说的这个钩子函数里拿不到 <strong>data</strong> 和 <strong>methods</strong></p><h4 id="2、created（vue实例创建后）"><a href="#2、created（vue实例创建后）" class="headerlink" title="2、created（vue实例创建后）"></a>2、created（vue实例创建后）</h4><ul><li><p>在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el属性目前不可见;</p></li><li><p>这是一个常用的生命周期钩子，因为你可以调用 <strong>methods</strong> 中的方法，改变 <strong>data</strong> 中的数据，并且修改可以通过vue的响应式绑定体现在页面上，获取computed中的计算属性等等;</p><blockquote><p>应用场景： 异步数据的获取和对实例数据的初始化操作都可以在这里面进行;</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">'linlin'</span><span class="token punctuation">,</span>      imgs<span class="token punctuation">:</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 异步请求获取数据修改data中的数据</span>    <span class="token function">getLists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>imgs <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>lists        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>imgs<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLists</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="3、beforeMount"><a href="#3、beforeMount" class="headerlink" title="3、beforeMount"></a>3、beforeMount</h4><ul><li><p>挂载开始之前被调用，相关的render函数首次被调用（虚拟DOM），实例已完成以下的配置： 编译模板，把data里面的数据和模板生成html，完成了 <strong>el</strong> 和 <strong>data</strong> 初始化，注意此时还没有挂载html到页面上；</p></li><li><p>因此：不论是 <strong>created</strong> 还是 <strong>beforeMount</strong> 在它们里面都拿不到真实的(也就是渲染完成后的)dom元素，如果我们需要拿到dom元素就需要在mounted里操作</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item,index) in arr"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 异步请求获取数据修改data中的数据</span>    <span class="token function">getLists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>imgs <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>lists        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>imgs<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'created'</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// created 1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeMount'</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// beforeMount 1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mounted'</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// mounted 3</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="4、mounted"><a href="#4、mounted" class="headerlink" title="4、mounted"></a>4、mounted</h4><ul><li><p>挂载完成，也就是模板中的 <em>HTML</em> 渲染到HTML页面中，此时一般可以做一些ajax操作;</p></li><li><p>mounted可以拿到dom元素，但也只是能拿到初始化数据里的dom元素，如果是存在异步对dom元素数据进行更改后渲染出来的dom元素这个时候是获取不到的，在 <strong>updated</strong> 钩子中可以获取到异步数据渲染到的dom节点</p></li><li><p>应用场景：初始数据（在data中有的）的dom渲染完毕，可以获取dom</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item,index) in arr"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'created'</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// created 3</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mounted'</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// mounted 3</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mounted'</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// mounted 4</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="5、beforeUpdate"><a href="#5、beforeUpdate" class="headerlink" title="5、beforeUpdate"></a>5、beforeUpdate</h4><ul><li><p>当数据更新后出发的钩子函数，这个钩子函数里拿到的是更改之前的数据，虚拟DOM重新渲染和打补丁之前被调用;</p></li><li><p>可以在这个钩子中进一步地修改data，这不会触发附加的重渲染过程;</p></li></ul><h4 id="6、updated"><a href="#6、updated" class="headerlink" title="6、updated"></a>6、updated</h4><ul><li>在由于数据更改导致地虚拟DOM重新渲染和打补丁只会调用，调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作，然后在大多是情况下，应该避免在此期间更改状态(修改数据)，因为这可能会导致更新无限循环，该钩子在服务器端渲染期间不被调用</li></ul><h4 id="7、beforeDestroy（销毁前）"><a href="#7、beforeDestroy（销毁前）" class="headerlink" title="7、beforeDestroy（销毁前）"></a>7、beforeDestroy（销毁前）</h4><ul><li><p>在实例销毁之前调用，实例仍然完全可用</p></li><li><p>这一步还可以用this来获取实例</p></li><li><p>一般在这一步做一些重置的操作，比如清除掉组件中的定时器 和 监听的dom事件</p></li></ul><h4 id="8、destroyed（销毁后）"><a href="#8、destroyed（销毁后）" class="headerlink" title="8、destroyed（销毁后）"></a>8、destroyed（销毁后）</h4><p>在实例销毁之后调用，调用后，所有的事件监听器会被移出，所有的子实例也会被销毁，该钩子在服务器端渲染期间不被调用;</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-centos7安装MySQL数据库</title>
      <link href="/2020/11/06/mysql-linux/"/>
      <url>/2020/11/06/mysql-linux/</url>
      
        <content type="html"><![CDATA[<h4 id="1、下载-MySQL源-的安装包"><a href="#1、下载-MySQL源-的安装包" class="headerlink" title="1、下载 MySQL源 的安装包"></a>1、下载 <strong>MySQL源</strong> 的安装包</h4><p><code>wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</code></p><h4 id="2、安装-MySQL源"><a href="#2、安装-MySQL源" class="headerlink" title="2、安装 MySQL源"></a>2、安装 <strong>MySQL源</strong></h4><p><code>yum localinstall mysql57-community-release-el7-8.noarch.rpm</code></p><h4 id="3、检查-MySQL源-是否安装成功"><a href="#3、检查-MySQL源-是否安装成功" class="headerlink" title="3、检查 MySQL源 是否安装成功"></a>3、检查 <strong>MySQL源</strong> 是否安装成功</h4><p><code>yum repolist enabled | grep &quot;mysql.*-community.*&quot;</code></p><h4 id="4、安装MySQL"><a href="#4、安装MySQL" class="headerlink" title="4、安装MySQL"></a>4、安装<strong>MySQL</strong></h4><p><code>yum install mysql-community-server</code></p><p><img src="/.life//mysql-linux01.jpg" alt><br>如果之前安装过MySQL或者安装失败过的话会出现以上错误,解决方法：</p><ul><li>先执行：<code>yum module disable mysql</code></li><li>后继续执行：<code>yum -y install mysql-community-server</code></li></ul><h4 id="5、修改MySQL登陆密码"><a href="#5、修改MySQL登陆密码" class="headerlink" title="5、修改MySQL登陆密码"></a>5、修改<strong>MySQL</strong>登陆密码</h4><ul><li><p>编辑 /etc/my.cnf ，在 [mysqld] 部分最后添加一行<br><code>skip-grant-tables</code></p></li><li><p>保存后重启mysql<br><code>service mysqld restart</code></p></li><li><p>输入以下命令，回车后输入密码再回车登录Mysql<br><code>mysql -uroot -p mysql</code></p></li><li><p>重新设置密码，其中 pwd 部分改为你自己想要设置的密码<br><code>update user set password=password(&quot;pwd&quot;) where user=&#39;root&#39;;</code></p></li><li><p>刷新权限 <code>flush privileges;</code></p></li><li><p>退出mysql 将前面添加的一行信息删除重新登录mysql</p></li></ul><h4 id="6、配置MySQL支持远程访问"><a href="#6、配置MySQL支持远程访问" class="headerlink" title="6、配置MySQL支持远程访问"></a>6、配置<strong>MySQL</strong>支持远程访问</h4><p><code>GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;pwd&#39; WITH GRANT OPTION;</code><br><code>FLUSH PRIVILEGES;</code></p><h4 id="7、开放MySQL端口：3306"><a href="#7、开放MySQL端口：3306" class="headerlink" title="7、开放MySQL端口：3306"></a>7、开放MySQL端口：3306</h4><p>这里是阿里云服务器：直接在阿里云控制台设置安全组<br><img src="/.life//mysql-linux02.jpg" alt></p><h4 id="8、本地连接"><a href="#8、本地连接" class="headerlink" title="8、本地连接"></a>8、本地连接</h4><p><img src="/.life//mysql-linux03.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack 学习笔记</title>
      <link href="/2020/09/14/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/webpack/"/>
      <url>/2020/09/14/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack-学习记录介绍"><a href="#webpack-学习记录介绍" class="headerlink" title="webpack 学习记录介绍"></a>webpack 学习记录介绍</h1><h2 id="一、webpack-简介"><a href="#一、webpack-简介" class="headerlink" title="一、webpack 简介"></a>一、<strong>webpack</strong> 简介</h2><h3 id="1-webpack-是什么？"><a href="#1-webpack-是什么？" class="headerlink" title="1. webpack 是什么？"></a>1. <strong>webpack</strong> 是什么？</h3><ul><li><p><strong>webpack 是一种前端资源构建工具，是一个静态模块打包器（<font color="#a273d6"> module bundler</font>）;</strong></p></li><li><p><strong>在 webpack 看来，前端的所有静态资源文件（js/json/css/img/less/……）都会被作为模块进行处理;</strong></p></li><li><p><strong>根据各个模块之间的依赖关系进行静态分析，打包生成对应的静态资源(<font color="#a273d6">bundle</font>);</strong><br><img src="/2020/09/14/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/webpack/webpack01.jpg" alt></p></li></ul><h3 id="2-webpack-的五个核心概念"><a href="#2-webpack-的五个核心概念" class="headerlink" title="2. webpack 的五个核心概念"></a>2. <strong>webpack</strong> 的五个核心概念</h3><h5 id="emsp-2-1-Entry"><a href="#emsp-2-1-Entry" class="headerlink" title="&emsp;2.1 Entry"></a>&emsp;2.1 Entry</h5><p>&emsp;&emsp;<strong>入口（<font color="#a273d6">Entry</font>）：</strong>指示 webpack 以哪个文件为入口或起点开始打包以及分析构建内部依赖图;</p><h5 id="emsp-2-2-Output"><a href="#emsp-2-2-Output" class="headerlink" title="&emsp;2.2 Output"></a>&emsp;2.2 Output</h5><p>&emsp;&emsp;<strong>输出（<font color="#a273d6">Output</font>）：</strong>指示 webpack 打包后的资源<font color="#a273d6">bundles</font>输出到哪里去，以及如何命名;</p><h5 id="emsp-2-3-Loader"><a href="#emsp-2-3-Loader" class="headerlink" title="&emsp;2.3 Loader"></a>&emsp;2.3 Loader</h5><p>&emsp;&emsp;<strong><font color="#a273d6">Loader</font>：</strong>让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只能处理 JavaScript）</p><h5 id="emsp-2-4-Plugins"><a href="#emsp-2-4-Plugins" class="headerlink" title="&emsp;2.4 Plugins"></a>&emsp;2.4 Plugins</h5><p>&emsp;&emsp;<strong>插件（<font color="#a273d6">Plugins</font>）：</strong>可以用于执行范围更广的任务，插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等;</p><h5 id="emsp-2-5-Mode-模式"><a href="#emsp-2-5-Mode-模式" class="headerlink" title="&emsp;2.5 Mode 模式"></a>&emsp;2.5 Mode 模式</h5><p>&emsp;&emsp;<strong>模式（<font color="#a273d6">Mode</font>）</strong>：指示 webpack 使用相应模式的配置，通过选择 <kbd>development</kbd> 或 <kbd>production</kbd> 之中的一个，来设置 mode 参数，你可以启用相应模式下的 webpack 内置的优化;</p><table><thead><tr><th align="center"><strong>选项</strong></th><th align="center"><strong>描述</strong></th><th align="center"><strong>特点</strong></th></tr></thead><tbody><tr><td align="center"><kbd>development</kbd></td><td align="center">会将 <b>process.env.NODE_ENV</b> 的值设为 <b>development</b><br>启用 <b>NamedChunksPlugin</b> 和 <b>NamedModulesPlugin</b></td><td align="center"><b>开发环境</b>，也就是让开发者可以<br>对代码进行本地调试运行的环境</td></tr><tr><td align="center"><kbd>production</kbd></td><td align="center">会将 <b>process.env.NODE_ENV</b> 的值设为 <b>production</b><br>启用 <b>FlagDependencyUsagePlugin</b>, <b>FlagIncludedChunksPlugin</b>,<br> <b>ModuleConcatenationPlugin</b>, <b>NoEmitOnErrorsPlugin</b>,<br> <b>OccurrenceOrderPlugin</b>, <b>SideEffectsFlagPlugin</b> 和 <b>UglifyJsPlugin</b></td><td align="center"><b>生产环境</b>可以让代码上线运行的环境</td></tr></tbody></table><h2 id="二、webpack-初体验"><a href="#二、webpack-初体验" class="headerlink" title="二、webpack 初体验"></a>二、<strong>webpack</strong> 初体验</h2><h3 id="1-初始化配置"><a href="#1-初始化配置" class="headerlink" title="1. 初始化配置"></a>1. 初始化配置</h3><h5 id="emsp-1-1-初始化-package-json"><a href="#emsp-1-1-初始化-package-json" class="headerlink" title="&emsp;1.1 初始化 package.json"></a>&emsp;1.1 初始化 package.json</h5><p>&emsp;&emsp;<b>输入指令：<code>npm init</code></b></p><h5 id="emsp-1-2-下载并安装-webpack"><a href="#emsp-1-2-下载并安装-webpack" class="headerlink" title="&emsp;1.2 下载并安装 webpack"></a>&emsp;1.2 下载并安装 webpack</h5><p>&emsp;&emsp;<b>全局安装 webpack</b> 输入指令：<code>npm install webpack webpack-cli -g</code></p><p>&emsp;&emsp;<b>本地安装 webpack</b> 输入指令：<code>npm install webpack webpack-cli -D</code></p><h3 id="2-打包应用测试"><a href="#2-打包应用测试" class="headerlink" title="2. 打包应用测试"></a>2. 打包应用测试</h3><h5 id="emsp-2-1-开发环境打包"><a href="#emsp-2-1-开发环境打包" class="headerlink" title="&emsp;2.1 开发环境打包"></a>&emsp;2.1 开发环境打包</h5><ul><li><p><strong>webpack</strong> 以 <font color="#a273d6">./src/index.js</font> 为入口文件开始打包，打包后输出到 <font color="#a273d6">./build/built.js</font></p></li><li><p>开发环境打包指令：<code>webpack ./src/index.js -o ./build/built.js --mode=development</code></p></li></ul><h5 id="emsp-2-2-生产环境打包"><a href="#emsp-2-2-生产环境打包" class="headerlink" title="&emsp;2.2 生产环境打包"></a>&emsp;2.2 生产环境打包</h5><ul><li>生产环境打包指令：<code>webpack ./src/index.js -o ./build/built.js --mode=production</code></li></ul><h5 id="emsp-2-3-结论"><a href="#emsp-2-3-结论" class="headerlink" title="&emsp;2.3 结论"></a>&emsp;2.3 结论</h5><ul><li>webpack 可以直接处理 js 和 json 资源，不能处理 css/img 等其他资源;</li><li>生产环境和开发环境可以将 ES6 的模块化语法转换成浏览器识别的模块化语法</li><li>生产环境相比于开发环境多了一个压缩 js 代码的功能</li></ul><h2 id="三、webpack-开发环境的基本配置"><a href="#三、webpack-开发环境的基本配置" class="headerlink" title="三、webpack 开发环境的基本配置"></a>三、<strong>webpack</strong> 开发环境的基本配置</h2><h3 id="1-创建配置文件"><a href="#1-创建配置文件" class="headerlink" title="1. 创建配置文件"></a>1. 创建配置文件</h3><h5 id="emsp-1-1-创建文件-webpack-config-js"><a href="#emsp-1-1-创建文件-webpack-config-js" class="headerlink" title="&emsp;1.1 创建文件 webpack.config.js"></a>&emsp;1.1 创建文件 <strong><font color="#a273d6">webpack.config.js</font></strong></h5><h5 id="emsp-1-2-配置如下内容"><a href="#emsp-1-2-配置如下内容" class="headerlink" title="&emsp;1.2 配置如下内容"></a>&emsp;1.2 配置如下内容</h5><ul><li><strong><font color="#a273d6">webpack</font></strong> 最基础的配置</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* * webpack.config.js 是webpack的配置文件 * 作用：知识webpack做哪些工作（当你运行 webpack 指令的时候加载其中的配置） * 所有的构建工具都是基于nodeJs平台运行的，模块化默认采用commonjs */</span><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//node内置核心模块，用来处理路径问题</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//webpack的配置</span>  <span class="token comment" spellcheck="true">// 模式</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//开发模式</span>  <span class="token comment" spellcheck="true">//mode: 'production'</span>  <span class="token comment" spellcheck="true">//入口起点</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//输出</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//输出文件名</span>    filename<span class="token punctuation">:</span> <span class="token string">'built.js'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//输出路径</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//Loader的配置</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">// 详细的loader配置</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 插件配置</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// pligins详细配置</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h5 id="emsp-1-3-运行指令-webpack"><a href="#emsp-1-3-运行指令-webpack" class="headerlink" title="&emsp;1.3 运行指令 webpack"></a>&emsp;1.3 运行指令 <strong><font color="#a273d6">webpack</font></strong></h5><h5 id="emsp-1-4-结论-同上"><a href="#emsp-1-4-结论-同上" class="headerlink" title="&emsp;1.4 结论 同上"></a>&emsp;1.4 结论 <strong><font color="#a273d6">同上</font></strong></h5><h3 id="2-打包样式资源"><a href="#2-打包样式资源" class="headerlink" title="2. 打包样式资源"></a>2. 打包样式资源</h3><h5 id="emsp-2-1-创建以下文件："><a href="#emsp-2-1-创建以下文件：" class="headerlink" title="&emsp;2.1 创建以下文件："></a>&emsp;2.1 创建以下文件：</h5><p><img src="/2020/09/14/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/webpack/webpack02.jpg" alt></p><h5 id="emsp-2-2-修改-webpack-配置文件如下："><a href="#emsp-2-2-修改-webpack-配置文件如下：" class="headerlink" title="&emsp;2.2 修改 webpack 配置文件如下："></a>&emsp;2.2 修改 webpack 配置文件如下：</h5><ul><li>配置 <strong><font color="#a273d6">loader</font></strong> 帮助打包 <strong><font color="#a273d6">css、less</font></strong> 资源</li><li><strong><font color="#a273d6">loader</font></strong> 步骤：1.<strong><font color="#a273d6">下载安装</font></strong> 2.<strong><font color="#a273d6">使用</font></strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//webpack的配置</span>  <span class="token comment" spellcheck="true">// 模式</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//开发模式</span>  <span class="token comment" spellcheck="true">//mode: 'production'</span>  <span class="token comment" spellcheck="true">//入口起点</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//输出</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//输出文件名</span>    filename<span class="token punctuation">:</span> <span class="token string">'built.js'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//输出路径</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//Loader的配置</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">// 详细的loader配置</span>      <span class="token comment" spellcheck="true">// 不同的文件必须配置不同的loader</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 表示匹配那些文件</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 使用哪些loader，use中loader的执行顺序是从右到左或者说是从下到上依次执行</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token comment" spellcheck="true">// 创建一个style标签，将js的样式资源插入进去，添加到页面的head中生效</span>          <span class="token string">'style-loader'</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 将css文件变成commonjs模块加载到js中，内容是样式字符串</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">'style-loader'</span><span class="token punctuation">,</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 将less文件编译成css文件</span>          <span class="token comment" spellcheck="true">// 需要下载两个包 less less-loader</span>          <span class="token string">'less-loader'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 插件配置</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// pligins详细配置</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h5 id="emsp-2-3-下载安装打包样式文件所需的-loader-包："><a href="#emsp-2-3-下载安装打包样式文件所需的-loader-包：" class="headerlink" title="&emsp;2.3 下载安装打包样式文件所需的 loader 包："></a>&emsp;2.3 下载安装打包样式文件所需的 <strong><font color="#a273d6">loader</font></strong> 包：</h5><ul><li>输入以下指令：<br><code>npm install less-loader css-loader style-loader -D</code></li><li>如何项目中有 <strong><font color="#a273d6">.less</font></strong> 文件，还需安装 <strong>less</strong><br><code>npm install less -D</code></li></ul><h5 id="emsp-2-4-运行指令：webpack"><a href="#emsp-2-4-运行指令：webpack" class="headerlink" title="&emsp;2.4 运行指令：webpack"></a>&emsp;2.4 运行指令：<code>webpack</code></h5><h3 id="3-打包-HTML-文件"><a href="#3-打包-HTML-文件" class="headerlink" title="3. 打包 HTML 文件"></a>3. 打包 HTML 文件</h3><h5 id="emsp-3-1-创建以下文件："><a href="#emsp-3-1-创建以下文件：" class="headerlink" title="&emsp;3.1 创建以下文件："></a>&emsp;3.1 创建以下文件：</h5><p><img src="/2020/09/14/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/webpack/webpack03.jpg" alt></p><h5 id="emsp-3-2-编写-webpack-配置文件如下："><a href="#emsp-3-2-编写-webpack-配置文件如下：" class="headerlink" title="&emsp;3.2 编写 webpack 配置文件如下："></a>&emsp;3.2 编写 webpack 配置文件如下：</h5><ul><li>配置 <strong><font color="#a273d6">plugin</font></strong> 帮助打包 <strong><font color="#a273d6">HTML</font></strong> 资源</li><li>配置 <strong><font color="#a273d6">plugin</font></strong> 步骤： 1.<strong><font color="#a273d6">下载安装</font></strong> 2.<strong><font color="#a273d6">引入</font></strong> 3.<strong><font color="#a273d6">使用</font></strong></li><li>下载 <strong><font color="#a273d6">html-webpack-plugin</font></strong> 插件：<code>npm install html-webpack-plugin -D</code></li><li>引入 <strong><font color="#a273d6">html-webpack-plugin</font></strong> 插件：<code>const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;)</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//引入html-webpack-plugin插件</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'built.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 插件配置 步骤：1.下载 2.引入 3.使用</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// 下载 html-webpack-plugin</span>    <span class="token comment" spellcheck="true">// 功能：此插件默认会创建一个空的html文件，自动引入打包输出的所有资源（JS/CSS）</span>    <span class="token comment" spellcheck="true">// 需求：现在我们需要有结构的html</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//加上这个属性之后打包会复制'./src/index.html'文件并自动引入打包输出的所有资源（JS/CSS）</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h3 id="4-打包图片资源"><a href="#4-打包图片资源" class="headerlink" title="4. 打包图片资源"></a>4. 打包图片资源</h3><h5 id="emsp-4-1-创建以下目录结构："><a href="#emsp-4-1-创建以下目录结构：" class="headerlink" title="&emsp;4.1 创建以下目录结构："></a>&emsp;4.1 创建以下目录结构：</h5><p><img src="/2020/09/14/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/webpack/webpack04.jpg" alt></p><h5 id="emsp-4-2-下载所需的包："><a href="#emsp-4-2-下载所需的包：" class="headerlink" title="&emsp;4.2 下载所需的包："></a>&emsp;4.2 下载所需的包：</h5><ul><li><p><strong><font color="#a273d6">url-loader</font></strong>： <code>npm install url-loader -D</code></p></li><li><p><strong><font color="#a273d6">file-loader</font></strong>： <code>npm install file-loader -D</code></p></li><li><p><strong><font color="#a273d6">html-loader</font></strong>： <code>npm install html-loader -D</code></p></li></ul><h5 id="emsp-4-3-文件配置："><a href="#emsp-4-3-文件配置：" class="headerlink" title="&emsp;4.3 文件配置："></a>&emsp;4.3 文件配置：</h5><ul><li><strong><font color="#a273d6">index.html</font></strong></li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>打包图片资源<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./img/angular.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>angular<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li><strong><font color="#a273d6">index.less</font></strong></li></ul><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.img1</span> </span><span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(./img/vue.jpg)</span><span class="token punctuation">;</span>  <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>  <span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">100%</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.img2</span> </span><span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(./img/angular.jpg)</span><span class="token punctuation">;</span>  <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>  <span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">100%</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.img3</span> </span><span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(./img/react.png)</span><span class="token punctuation">;</span>  <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>  <span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">100%</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><strong><font color="#a273d6">webpack.config.js</font></strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpcakPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'built.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 打包css资源的loader配置</span>        <span class="token comment" spellcheck="true">// 需要使用多个loader处理的话使用 use</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 打包图片资源的loader配置 需要用到url-loader</span>        <span class="token comment" spellcheck="true">// 使用单个loader处理使用 loader</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(jpg|png|gif)$/</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 需要下载两个包 url-loader file-loader</span>        <span class="token comment" spellcheck="true">// 问题：这个loader默认情况下是不能处理html中的图片</span>        loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 当图片大小小于8kb的话就会被转化成base64进行处理</span>          <span class="token comment" spellcheck="true">// 优点：减少请求数量，减轻服务器压力</span>          <span class="token comment" spellcheck="true">// 缺点：图片体积会更大（文件请求速度更慢一点）</span>          limit<span class="token punctuation">:</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 给打包后的文件命名：hash的前十位以及原文件的扩展名</span>          name<span class="token punctuation">:</span> <span class="token string">'[hash:10].[ext]'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.html$/</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 用来处理html文件中的img资源的（负责引入图片从而被url-loader进行处理）</span>        loader<span class="token punctuation">:</span> <span class="token string">'html-loader'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpcakPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h3 id="5-打包其他资源"><a href="#5-打包其他资源" class="headerlink" title="5. 打包其他资源"></a>5. 打包其他资源</h3><ul><li>这里的其他资源是指除了之前打包的资源之外的其他资源；</li><li>使用的 loader 是 <strong><font color="#a273d6">file-loader</font></strong>；</li><li>只需要在 <strong><font color="#a273d6">webpack.config.js</font></strong> 的 module 配置中添加下面代码：</li></ul><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// exclude 表示排除匹配的文件类型</span>    exclude<span class="token punctuation">:</span> <span class="token regex">/\.(js|css|html|less)/</span><span class="token punctuation">,</span>    loader<span class="token punctuation">:</span> <span class="token string">'file-loader'</span><span class="token punctuation">,</span>    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'[hash:10].[ext]'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6-devServer-配置"><a href="#6-devServer-配置" class="headerlink" title="6. devServer 配置"></a>6. devServer 配置</h3><ul><li><p>在我们实际开发过程中，我们是在一直修改 src 目录下的文件，目前我们学习的情况下，如果修改代码之后在浏览器查看效果的话，需要每次都执行 <code>webpack</code> 命令；</p></li><li><p>解决这个问题我们需要使用开发服务器 <strong><font color="#a273d6">devServer</font></strong> ,用来实现自动化,启动之后可以监控代码的变化，进而进行自动编译，自动刷新浏览器，集大程度的提高了我们的开发效率；</p></li><li><p>安装 <strong><font color="#a273d6">webpack-dev-server</font></strong>, 执行：<code>npm install webpack-dev-server -D</code></p></li><li><p>在 <strong><font color="#a273d6">webpack.config.js</font></strong> 的 <strong><font color="#a273d6">module.exports</font></strong> 配置中添加下面配置：</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 开发服务器是运行在内存中的，因此每次更新编译的时候不会对output位置的东西进行修改</span>devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 项目构建后的路径</span>    contentBase<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 启用gzip压缩</span>    compress<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 端口号</span>    port<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 启动后打开浏览器</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><ul><li>运行命令：<code>npx webpack-dev-server</code></li></ul><h3 id="7-开发环境配置整合"><a href="#7-开发环境配置整合" class="headerlink" title="7. 开发环境配置整合"></a>7. 开发环境配置整合</h3><h5 id="emsp-7-1-创建以下文件："><a href="#emsp-7-1-创建以下文件：" class="headerlink" title="&emsp;7.1 创建以下文件："></a>&emsp;7.1 创建以下文件：</h5><p><img src="/2020/09/14/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/webpack/webpack05.jpg" alt></p><h5 id="emsp-7-2-webpack-config-js-配置："><a href="#emsp-7-2-webpack-config-js-配置：" class="headerlink" title="&emsp;7.2 webpack.config.js 配置："></a>&emsp;7.2 <strong><font color="#a273d6">webpack.config.js</font></strong> 配置：</h5><ul><li>以下配置有两种打包方式：<ul><li><strong><font color="#a273d6">webpack</font></strong>：打包后会输出项目结构；</li><li><strong><font color="#a273d6">npx webpack-dev-server</font></strong>：打包后不会输出项目结构；</li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 开发模式配置</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 入口配置</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/js/index.js'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 输出配置</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'js/index.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// loader 配置</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理css文件</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理less文件</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理样式文件中的img路径</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(jpg|png|gif)$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          limit<span class="token punctuation">:</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">'[hash:10].[ext]'</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 图片资源打包后放在imgs文件夹下</span>          outputPath<span class="token punctuation">:</span> <span class="token string">'imgs'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理html中的img资源</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.html$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'html-loader'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理其他资源</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/\.(html|js|css|less|jpg|png|gif)$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'file-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token string">'[hash:10].[ext]'</span><span class="token punctuation">,</span>          outputPath<span class="token punctuation">:</span> <span class="token string">'media'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 插件配置</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// devServer配置</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    compress<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h5 id="emsp-7-3-打包后输出的目录结构："><a href="#emsp-7-3-打包后输出的目录结构：" class="headerlink" title="&emsp;7.3 打包后输出的目录结构："></a>&emsp;7.3 打包后输出的目录结构：</h5><p><img src="/2020/09/14/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/webpack/webpack06.jpg" alt></p><h2 id="四、webpack-生产环境的基本配置"><a href="#四、webpack-生产环境的基本配置" class="headerlink" title="四、webpack 生产环境的基本配置"></a>四、<strong>webpack</strong> 生产环境的基本配置</h2><h3 id="1-以上开发环境打包存在的一些问题"><a href="#1-以上开发环境打包存在的一些问题" class="headerlink" title="1. 以上开发环境打包存在的一些问题"></a>1. 以上开发环境打包存在的一些问题</h3><h5 id="emsp-1-1-打包之后可能会出现闪屏现象："><a href="#emsp-1-1-打包之后可能会出现闪屏现象：" class="headerlink" title="&emsp;1.1 打包之后可能会出现闪屏现象："></a>&emsp;1.1 打包之后可能会出现闪屏现象：</h5><ul><li>因为打包时通过<strong><font color="#a273d6">css-loader</font></strong>之后是将 css 添加在 js 文件中，又经过<strong><font color="#a273d6">style-loader</font></strong>创建 style 标签加入样式，当整个过程比较慢的时候页面会出现闪屏现象；</li><li>安装插件：<code>npm install mini-css-extract-plugin</code>;</li><li>配置文件做如下配置：(打包后将 css 文件提取出来通过 link 的方式引入页面)</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> MiniCssExtractPlugins <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'index.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token comment" spellcheck="true">// 作用：这个loader将css单独提取出来,通过link标签引入html</span>          MiniCssExtractPlugins<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 将css文件整合到js中</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugins</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 对输出的css文件进行重命名</span>      filename<span class="token punctuation">:</span> <span class="token string">'css/main.css'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h3 id="2-CSS-兼容性处理"><a href="#2-CSS-兼容性处理" class="headerlink" title="2. CSS 兼容性处理"></a>2. <strong><font color="#a273d6">CSS</font></strong> 兼容性处理</h3><ul><li><p>创建以下目录结构：<br><img src="/2020/09/14/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/webpack/webpack07.jpg" alt></p></li><li><p>安装 <font color="#a273d6">postcss-loader</font> <code>npm install postcss-loader -D</code></p></li><li><p>安装 <font color="#a273d6">postcss-preset-env</font> <code>npm install postcss-preset-env -D</code></p></li><li><p>配置文件做以下配置：</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> MiniCssExtractPlugins <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置nodejs的环境变量</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">=</span> <span class="token string">'development'</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'js/index.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          MiniCssExtractPlugins<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">/**                     * 要处理css兼容性问题，必须要使用postcss：postcss-loader,                     * 插件：postcss-preset-env 作用：帮助postcss在package.json中找到browserslist里面的配置，                     *      通过配置加载指定的css兼容性样式                     * "browserslist": {                     *      // 开发环境配置 --> 需要设置node的环境变量：process.env.NODE_ENV = 'development'                            "development": [                                "last 1 chrome version",                                "last 1 firefox version",                                "last 1 safari version"                            ],                            // 生产环境配置： 默认情况下都是生产环境配置                            "production": [                                ">0.2%",                                "not dead",                                "not op_mini all"                            ]                        }                     */</span>          <span class="token comment" spellcheck="true">// 使用loader的默认配置</span>          <span class="token comment" spellcheck="true">//'postcss-loader',</span>          <span class="token comment" spellcheck="true">// 修改loader的配置</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              postcssOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// ident: 'postcss',</span>                plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'postcss-preset-env'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugins</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'css/main.css'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><ul><li>修改 package.json</li></ul><pre class=" language-js"><code class="language-js"><span class="token string">"browserslist"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"development"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">"last 1 chrome version"</span><span class="token punctuation">,</span>        <span class="token string">"last 1 firefox version"</span><span class="token punctuation">,</span>        <span class="token string">"last 1 safari version"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"production"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">">0.2%"</span><span class="token punctuation">,</span>        <span class="token string">"not dead"</span><span class="token punctuation">,</span>        <span class="token string">"not op_mini all"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><ul><li>运行指令：<code>webpack</code></li><li>运行结果：我们发现<kbd>main.css</kbd>中的部分属性自动加上了浏览器前缀<br><img src="/2020/09/14/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/webpack/webpack08.jpg" alt="dist目录结构"> <img src="/2020/09/14/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/webpack/webpack09.jpg" alt="main.css"></li></ul><h3 id="3-CSS-文件压缩处理"><a href="#3-CSS-文件压缩处理" class="headerlink" title="3. CSS 文件压缩处理"></a>3. <strong><font color="#a273d6">CSS</font></strong> 文件压缩处理</h3><ul><li><p>安装插件 <font color="#a273d6">optimize-css-assets-webpack-plugin</font> <code>npm install optimize-css-assets-webpack-plugin -D</code></p></li><li><p>在 <font color="#a273d6">webpack.config.js</font> 的<kbd>plugins</kbd>中添加以下配置：</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 文件上边引入插件</span><span class="token keyword">const</span> OptimizeCssAssetsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'optimize-css-assets-webpack-plugin'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// plugins中添加下面配置</span><span class="token keyword">new</span> <span class="token class-name">OptimizeCssAssetsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>执行 <code>webpack</code>后我们发现打包后的 css 文件只有一行内容，并且所占内存缩小！</li></ul><h3 id="4-eslint-对-js-进行语法检查"><a href="#4-eslint-对-js-进行语法检查" class="headerlink" title="4. eslint 对 js 进行语法检查"></a>4. <strong><font color="#a273d6">eslint</font></strong> 对 js 进行语法检查</h3><ul><li><p>安装以下插件：<br><code>npm install eslint-config-airbnb-base eslint-plugin-import eslint-loader eslint -D</code></p></li><li><p>配置文件进行如下配置：</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/js/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'js/index.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">/**       *  语法检查 eslint-loader eslint       *  注意：只检查用户自己写的源代码，第三方的库是不检查的,       *  设置检查规则：       *      在package.json的eslintConfig中设置       *      "eslintConfig": {       *          "extends": "airbnb-base"       *      }       *  我们需要安装的东西：eslint-config-airbnb-base  eslint-plugin-import eslint-loader eslint       */</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'eslint-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 自动修复eslint的错误</span>          fix<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><ul><li><font color="#a273d6">package.json</font> 添加以下配置</li></ul><pre class=" language-js"><code class="language-js"><span class="token string">"eslintConfig"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"extends"</span><span class="token punctuation">:</span> <span class="token string">"airbnb-base"</span><span class="token punctuation">}</span></code></pre><h3 id="5-js-兼容性处理"><a href="#5-js-兼容性处理" class="headerlink" title="5. js 兼容性处理"></a>5. js 兼容性处理</h3><ul><li><p>下载安装包：<br><code>npm install babel-loader@8.0.0-beta.0 @babel/core @babel/preset-env -D</code></p></li><li><p>配置文件进行如下配置：</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> version <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/js/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'js/index.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">/**       * js兼容性处理：安装 npm install babel-loader@8.0.0-beta.0 @babel/core @babel/preset-env -D       * 1.基本的兼容性处理 --> @babel/preset-env       *      问题：只能转换基本语法（如：promise）不能转换       * 2.全部的js兼容性处理 --> @babel/polyfill3(目前不考虑)       *      问题：我只需要解决部分兼容性问题，但是这个方法将锁头的兼容性代码全部引入，体积太大       * 3.需要做兼容性处理的叫做：按需加载 --> core-js       */</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 预设：指示babel做怎样的兼容性处理</span>          presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">[</span>              <span class="token string">'@babel/preset-env'</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 按需加载</span>                useBuiltIns<span class="token punctuation">:</span> <span class="token string">'usage'</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//指定core-js的版本</span>                corejs<span class="token punctuation">:</span> <span class="token punctuation">{</span>                  version<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 兼容性做到哪个版本浏览器</span>                targets<span class="token punctuation">:</span> <span class="token punctuation">{</span>                  chrome<span class="token punctuation">:</span> <span class="token string">'60'</span><span class="token punctuation">,</span>                  firefox<span class="token punctuation">:</span> <span class="token string">'60'</span><span class="token punctuation">,</span>                  ie<span class="token punctuation">:</span> <span class="token string">'9'</span><span class="token punctuation">,</span>                  safari<span class="token punctuation">:</span> <span class="token string">'10'</span><span class="token punctuation">,</span>                  edge<span class="token punctuation">:</span> <span class="token string">'17'</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode常用快捷键</title>
      <link href="/2020/09/07/vsCodeShortcutKey/"/>
      <url>/2020/09/07/vsCodeShortcutKey/</url>
      
        <content type="html"><![CDATA[<h2 id="VSCode常用快捷键"><a href="#VSCode常用快捷键" class="headerlink" title="VSCode常用快捷键"></a>VSCode常用快捷键</h2><h3 id="编辑器与窗口管理"><a href="#编辑器与窗口管理" class="headerlink" title="编辑器与窗口管理"></a>编辑器与窗口管理</h3><ol><li><p>新建文件：&#9;<kbd>Ctrl</kbd>+<kbd>N</kbd></p></li><li><p>文件之间切换：&#9;<kbd>Ctrl</kbd>+<kbd>Tab</kbd></p></li><li><p>打开一个新的VS Code编辑器：&#9;<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>N</kbd></p></li><li><p>关闭当前窗口：&#9;<kbd>Ctrl</kbd>+<kbd>W</kbd></p></li><li><p>关闭当前的VS Code编辑器：&#9;<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>W</kbd></p></li><li><p>切换左中右3个编辑器窗口：&#9;<kbd>Ctrl</kbd>+<kbd>1</kbd>、<kbd>Ctrl</kbd>+<kbd>2</kbd>、<kbd>Ctrl</kbd>+<kbd>3</kbd></p></li></ol><h3 id="代码编辑"><a href="#代码编辑" class="headerlink" title="代码编辑"></a>代码编辑</h3><h4 id="格式调整"><a href="#格式调整" class="headerlink" title="格式调整"></a>格式调整</h4><ol><li><p>代码向左或向右缩进：&#9;<kbd>Ctrl</kbd>+<kbd>[</kbd> 、<kbd>Ctrl</kbd>+<kbd>]</kbd></p></li><li><p>代码格式化：&#9;<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>L</kbd></p></li><li><p>向上或向下移动一行：&#9;<kbd>Alt</kbd>+<kbd>up</kbd>、<kbd>Alt</kbd>+<kbd>down</kbd></p></li><li><p>向上或向下复制一行: &#9;<kbd>Shift</kbd>+<kbd>Alt</kbd>+<kbd>Up</kbd>、<kbd>Shift</kbd>+<kbd>Alt</kbd>+<kbd>Down</kbd></p></li><li><p>在当前行下方插入一行: &#9;<kbd>Ctrl</kbd>+<kbd>Enter</kbd></p></li><li><p>在当前行上方插入一行: &#9;<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>Enter</kbd></p></li></ol><h4 id="光标调整"><a href="#光标调整" class="headerlink" title="光标调整"></a>光标调整</h4><ol><li><p>移动到行首：&#9;<kbd>Home</kbd></p></li><li><p>移动到行尾：&#9;<kbd>End</kbd></p></li><li><p>移动到文件结尾：&#9;<kbd>Ctrl</kbd>+<kbd>End</kbd></p></li><li><p>移动到文件开头：&#9;<kbd>Ctrl</kbd>+<kbd>Home</kbd></p></li><li><p>移动到定义处：&#9;<kbd>F12</kbd></p></li><li><p>查看定义处缩略图(只看一眼而不跳转过去)：&#9;<kbd>Alt</kbd>+<kbd>F12</kbd></p></li><li><p>选择从光标到行尾的内容：&#9;<kbd>Shift</kbd>+<kbd>End</kbd></p></li><li><p>选择从光标到行首的内容：&#9;<kbd>Shift</kbd>+<kbd>Home</kbd></p></li><li><p>删除光标右侧的所有内容(当前行)：&#9;<kbd>Ctrl</kbd>+<kbd>Delete</kbd></p></li><li><p>扩展/缩小选取范围：&#9;<kbd>Shift</kbd>+<kbd>Alt</kbd>+<kbd>Right</kbd>和<kbd>Shift</kbd>+<kbd>Alt</kbd>+<kbd>Left</kbd></p></li><li><p>多行编辑(列编辑)：&#9;<kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>左键</kbd>和<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Down或Up</kbd></p></li><li><p>同时选中所有匹配编辑(与当前行或选定内容匹配)：&#9;<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>L</kbd></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6语法的实用方法</title>
      <link href="/2020/08/07/JS/ES6/"/>
      <url>/2020/08/07/JS/ES6/</url>
      
        <content type="html"><![CDATA[<h3 id="隐藏-HTML-中指定的元素"><a href="#隐藏-HTML-中指定的元素" class="headerlink" title="隐藏 HTML 中指定的元素"></a>隐藏 HTML 中指定的元素</h3><br><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定义一个方法 hide</span><span class="token keyword">const</span> hide <span class="token operator">=</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//调用此方法并且传入要隐藏的元素 ' 隐藏页面中所有的&lt;img>元素 '</span><span class="token function">hide</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p><font color="#0b7309">效果如下：</font><br><img src="/2020/08/07/JS/ES6/ES601.jpg" alt></p></blockquote><h3 id="检查元素是否含有指定的类"><a href="#检查元素是否含有指定的类" class="headerlink" title="检查元素是否含有指定的类"></a>检查元素是否含有指定的类</h3><br>页面DOM里的每个节点都有一个<font color="red">classList</font>对象，程序员可以使用里面的方法新增、删除、修改节点上的<font color="red">class</font>,包括节点是否被赋予了某个<font color="red">class</font><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定义一个方法 hasClass, 判断el是否含有className</span><span class="token keyword">const</span> hasClass <span class="token operator">=</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> className<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//调用函数</span><span class="token function">hasClass</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'p.special'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'special'</span><span class="token punctuation">)</span></code></pre><blockquote><p><font color="#0b7309">效果如下：</font><br><img src="/2020/08/07/JS/ES6/ES602.jpg" alt></p></blockquote><h3 id="切换一个元素的类-class"><a href="#切换一个元素的类-class" class="headerlink" title="切换一个元素的类 class"></a>切换一个元素的类 class</h3><br><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定义一个方法 toggleClass</span><span class="token keyword">const</span> toggleClass <span class="token operator">=</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> className<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>className<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//调用此方法并且传入元素和替换的className</span><span class="token function">toggleClass</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'span.active'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'unactive'</span><span class="token punctuation">)</span></code></pre><p>例：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">div</span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.active</span></span><span class="token punctuation">{</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.unactive</span></span><span class="token punctuation">{</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#CCCCCC</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><blockquote><p><font color="#0b7309">效果如下：</font><br><img src="/2020/08/07/JS/ES6/ES603.jpg" alt></p></blockquote><h3 id="获取当前页面的滚动位置"><a href="#获取当前页面的滚动位置" class="headerlink" title="获取当前页面的滚动位置"></a>获取当前页面的滚动位置</h3><br><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//el代表window对象，</span><span class="token comment" spellcheck="true">//pageXOffset返回文档在窗口左上角水平方向滚动的像素</span><span class="token comment" spellcheck="true">//pageYOffset返回文档在窗口左上角垂直方向滚动的像素</span><span class="token keyword">const</span> getScrollPosition <span class="token operator">=</span> <span class="token punctuation">(</span>el <span class="token operator">=</span> window<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  x<span class="token punctuation">:</span> el<span class="token punctuation">.</span>pageXOffset <span class="token operator">!==</span> undefined <span class="token operator">?</span> el<span class="token punctuation">.</span>pageXOffset <span class="token punctuation">:</span> el<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">,</span>  y<span class="token punctuation">:</span> el<span class="token punctuation">.</span>pageYOffset <span class="token operator">!==</span> undefined <span class="token operator">?</span> el<span class="token punctuation">.</span>pageYOffset <span class="token punctuation">:</span> el<span class="token punctuation">.</span>scrollTop<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//调用</span><span class="token function">getScrollPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p><font color="#0b7309">效果如下：</font><br><img src="/2020/08/07/JS/ES6/ES604.jpg" alt></p></blockquote><h3 id="将页面平滑的滚动到顶部"><a href="#将页面平滑的滚动到顶部" class="headerlink" title="将页面平滑的滚动到顶部"></a>将页面平滑的滚动到顶部</h3><br><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> scrollToTop <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//这里用到js中的或运算 ‘ || ’如果前边的存在返回前边的，否则返回后边的</span>  <span class="token keyword">const</span> c <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop  <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//requestAnimationFrame是html5提供的用于请求动画的，请求动画帧</span>    <span class="token comment" spellcheck="true">//它的有点是：由系统决定回调函数的执行时机。60Hz的刷新频率，那么每次刷新的间隔中会执行一次回调函数，不会引起丢帧，不会卡顿</span>    window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>scrollToTop<span class="token punctuation">)</span>    window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> c <span class="token operator">-</span> c <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 事例</span><span class="token function">scrollToTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p><strong>window.requestAnimationFrame()</strong> 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。<br><strong>requestAnimationFrame</strong>：优势：由系统决定回调函数的执行时机。60Hz 的刷新频率，那么每次刷新的间隔中会执行一次回调函数，不会引起丢帧，不会卡顿。</p></blockquote><h3 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h3><p>顾名思义，用于对象或数组之前的展开操作符（…），将一个结构展开为列表。演示一下：</p><blockquote><p>用法 1：合并数组或者向数组中添加元素</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//使用展开运算符</span><span class="token keyword">let</span> firstHalf <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token number">1</span> <span class="token punctuation">,</span>  <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> secondHalf <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">3</span> <span class="token punctuation">,</span>  <span class="token number">4</span> <span class="token punctuation">,</span> <span class="token operator">...</span>firstHalf<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不用展开运算符</span><span class="token keyword">let</span> firstHalf <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token number">1</span> <span class="token punctuation">,</span>  <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> secondHalf <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">3</span> <span class="token punctuation">,</span>  <span class="token number">4</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">&lt;</span>firstHalf<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    secondHalf<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>firstHalf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>用法 2：传参或接收不确定的参数</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//传参</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span><span class="token comment" spellcheck="true">//接收不确定的参数</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">...</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">of</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">=</span> s <span class="token operator">+</span> i  <span class="token punctuation">}</span>  <span class="token keyword">return</span> s<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span></code></pre><blockquote><p>用法 3：合并对象属性</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//合并对象属性</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">12</span> <span class="token punctuation">}</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> age<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span> addr<span class="token punctuation">:</span> <span class="token string">'gz'</span> <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>obj<span class="token punctuation">,</span> <span class="token operator">...</span>obj2 <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {name:"zs",age:14,addr:"gz"}</span></code></pre><blockquote><p>用法 4：合并数组</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//合并数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1 2 3 4</span></code></pre><blockquote><p>用法 5：解构赋值</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//解构赋值</span><span class="token keyword">var</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//注意：展开运算符之能放在左后一个元素上</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 数组[4,5]</span></code></pre><blockquote><p>用法 6：分解字符串</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//分解字符串</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'test'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>str<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// t e s t</span><span class="token keyword">var</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>str<span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// t</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// e</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// s</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// t</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> ES6 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue面试题总结</title>
      <link href="/2020/07/20/Vue/vue%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2020/07/20/Vue/vue%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="vue面试题汇总"><a href="#vue面试题汇总" class="headerlink" title="vue面试题汇总"></a>vue面试题汇总</h2><h3 id="1-vuex-的作用"><a href="#1-vuex-的作用" class="headerlink" title="1. vuex 的作用"></a>1. <strong>vuex</strong> 的作用</h3><ul><li><p>vuex是一个专门为vue.js应用程序开发提供的全局状态管理；</p></li><li><p>vuex是一个状态管理的插件，可以解决不同组件之间的数据共享和数据持久化；</p></li><li><p>vuex的几个核心概念：</p><ul><li><p>vuex使用store对象管理应用的状态，store包括：state，getter，mutation，action四个属性</p></li><li><p>state：状态，是vuex状态管理的数据源；</p></li><li><p>getter：getter的作用相当于vue中的computed(计算属性)，可以将state的数据加工之后返回，当state中的数据发生变化的时候，返回的数据可以跟着变化；</p></li><li><p>mutation：mutation是vuex中唯一可以修改state中状态的途径，需要通过commit进行调用，而且mutation可以接收参数，也就是载荷（payload）： <strong>store.commit(‘add’, 5)</strong></p></li><li><p>action：一些对state的异步操作可以放在action中，并通过在action提交mutation变更状态；</p></li><li><p>module：当我们vuex状态管理的数据相当多的时候，就需要用到module，将store分割成多个模块，每个模块拥有自己的state、mutation、action、getter、甚至是嵌套子模块</p></li></ul></li><li><p>使用的时候：我们可以在组件中触发 Action，Action 则会提交 Mutation，Mutaion 会对 State 进行修改，组件再根据 State 、Getter 渲染页面。</p></li></ul><h3 id="2-vuex-的路由拦截器的作用和使用"><a href="#2-vuex-的路由拦截器的作用和使用" class="headerlink" title="2. vuex 的路由拦截器的作用和使用"></a>2. <strong>vuex</strong> 的路由拦截器的作用和使用</h3><ul><li>作用：<ul><li>可以用来判断token是否存在，不存在的话跳转到登陆界面；</li></ul></li><li>使用：<br><img src="/2020/07/20/Vue/vue%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/01.png" alt="路由拦截"></li></ul><h3 id="3-axios-的作用"><a href="#3-axios-的作用" class="headerlink" title="3. axios 的作用"></a>3. <strong>axios</strong> 的作用</h3><ul><li><p>axios也就是实现异步请求的工具，与js的ajax作用相同；</p></li><li><p>axios的特点：</p><ul><li><p>从浏览器中创建XMLHttpRequests；</p></li><li><p>从node.js创建http请求；</p></li><li><p>支持promise API；</p></li><li><p>可以拦截请求和响应；</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//请求拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//响应拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> response<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>可以转换请求和相应中的数据；</p></li><li><p>客户端支持防御XSRF/CSRF (是一种跨站的伪造的请求，指的是跨站伪造用户的请求，模拟用户的操作);</p></li></ul></li><li><p>promise:</p><ul><li><p>是一个对象，用来传递异步操作的信息；</p></li><li><p>有效的解决了多次回调中请求的问题；</p></li></ul></li></ul><h3 id="4-列举vue中常见的指令"><a href="#4-列举vue中常见的指令" class="headerlink" title="4. 列举vue中常见的指令"></a>4. 列举vue中常见的指令</h3><ul><li><p>Vue的渲染</p><ul><li><p><strong>插值表达式：</strong></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 文本插值： {{ msg }} --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> {{ message }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>v-html：它可以加标签，它会解析成html</p></li><li><p>v-text：不能加标签，如果加了，它会当作字符串展示出来；</p></li><li><p>v-text与插值表达式的区别：</p><blockquote><p>默认v-text没有闪烁的问题的，而插值表达式有闪烁问题 v-text 会覆盖元素中原本的内容，但是插值表达式只会替换自己的这个占位符，不会把整个元素的内容清空</p></blockquote></li><li><p>v-html 与 v-text的区别：</p><blockquote><p>v-html会解析html格式;v-text与插值表达式会把内容当做文本来解析;v-html和 v-text都会覆盖元素中原有的内容</p></blockquote></li><li><p>指令绑定一个事件监听器：v-on</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 绑定click事件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeMessage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> {{ message }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- vue2.0写法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeMessage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> {{ message }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>DOM属性绑定：<strong>v-bind</strong></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 绑定class属性 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>active<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> {{ message }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- vue2.0写法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>active<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> {{ message }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>实现表单输入和应用状态之间的双向绑定：<strong>v-model</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app-6<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>message<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>控制一个元素的显示： <strong>v-if &nbsp; v-show</strong> ( 两者的区别是v-if如果为false的话dom元素就不存在，v-show为false的话相当于将dom节点隐藏起来，其实是进行了加载的 )</p></li><li><p>列表渲染：<strong>v-for</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>(todo,i) in todos<span class="token punctuation">'</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {{todo.text}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul><h3 id="5-对于-MVVM-的理解"><a href="#5-对于-MVVM-的理解" class="headerlink" title="5. 对于 MVVM 的理解"></a>5. 对于 <strong>MVVM</strong> 的理解</h3><ul><li><p><strong>MVVM</strong> 是 Model-View-ViewModel 的缩写；</p></li><li><p><strong>Model</strong> 代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑；</p></li><li><p><strong>View</strong> 代表 UI 组件，它负责将数据模型转化成 UI 展现出来；</p></li><li><p><strong>ViewModel</strong> 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步View 和 Model的对象，连接Model和View；</p></li><li><p><strong>ViewModel 和 Model</strong>实现了数据的双向绑定;</p></li></ul><h3 id="6-Vue实现数据双向绑定的原理"><a href="#6-Vue实现数据双向绑定的原理" class="headerlink" title="6.Vue实现数据双向绑定的原理"></a>6.Vue实现数据双向绑定的原理</h3><p>采用<strong>数据劫持</strong>结合<strong>发布者-订阅者模式</strong>的方式，通过<strong>Object.defineProperty()</strong>来劫持各个属性的getter和setter，在数据变动后发布消息给订阅者，触发相应监听回调。</p><ul><li><p>Vue的核心<strong><font color="red">数据劫持</font></strong><br>数据劫持是借助到Object.defineProprety(obj,prop,descriptor)函数的；</p><ul><li><p>参数：<br>obj:目标对象<br>prop:需要定义的属性或方法的名称<br>descriptor:目标属性所拥有的特性</p></li><li><p>可供定义的特性列表:</p><p>value：属性的值<br>writable：如果为false，属性的值就不能被重写。<br>get： 一旦目标属性被访问就会调回此方法，并将此方法的运算结果返回用户。<br>set：一旦目标属性被赋值，就会调回此方法。<br>configurable: 如果为false，则任何尝试删除目标属性或修改属性性以下特性（writable, configurable, enumerable）的行为将被无效化。<br>enumerable： 是否能在for…in循环中遍历出来或在Object.keys中列举出来。</p></li></ul></li><li><p>什么是数据劫持？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过对Object.defineProprety(obj,prop,descriptor)的了解，我们不难发现，当我们访问或者设置对象属性的时候，都会触发相应的函数，然后在这个函数里返回一些东西；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;既然我们了解到会触发的这些函数，那我们就可以在这个函数中进行一些我们需要的操作，而这个过程也就是<strong><font color="red">劫持</font></strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Vue中其实就是利用Object.defineProprety()来劫持对象属性的setter和getter操作，并设置一个监听器，当数据发生变化的时候发出通知；</p><p>例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span><span class="token string">'lhl'</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token punctuation">{</span>        enumerable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>         configurable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>         <span class="token keyword">get</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token keyword">set</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'监听到数据发生了变化'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>name <span class="token comment" spellcheck="true">//控制台会打印出 “get”</span>data<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'hxx'</span> <span class="token comment" spellcheck="true">//控制台会打印出 "监听到数据发生了变化"</span></code></pre><p>这里我们可以看出，我们可以控制对象属性的设置和读取；</p></li></ul><h3 id="7-nextTick的使用"><a href="#7-nextTick的使用" class="headerlink" title="7.$nextTick的使用"></a>7.$nextTick的使用</h3><h4 id="7-1-什么是-nextTick"><a href="#7-1-什么是-nextTick" class="headerlink" title="7.1 什么是$nextTick"></a>7.1 什么是$nextTick</h4><ul><li><p><strong>简单回答</strong>：因为Vue的异步更新队列，$nextTick是用来知道什么时候DOM更新完成的;</p></li><li><p><strong>详细案例</strong>：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;先来看这样一个场景：有一个div，默认用v-if将它隐藏，点击一个按钮后，改变v-if的值，让它显示出来，同时拿到这个div的文本内容。如果v-if的值是 false，直接去获取div内容是获取不到的，因为此时div还没有被创建出来，那么应该在点击按钮后，改变v-if的值为 true，div才会被创建，此时再去获取，示例代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">'msg'</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"show"</span><span class="token operator">></span>Hello World<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      show<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">showDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">showDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token boolean">true</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>这段代码运行后控制台会抛出错误信息：<font color="red">Cannot read property ‘innnerHTML of null，意思就是获取不到 li 元素</font><br>这里就涉及到 <strong>Vue</strong> 一个重要的概念：<font color="#316fe0">异步更新队列</font></p></li></ul><h4 id="7-2-异步更新队列"><a href="#7-2-异步更新队列" class="headerlink" title="7.2 异步更新队列"></a>7.2 异步更新队列</h4><ul><li><p>Vue在观察到数据变化时 <font color="#316fe0">并不是直接更新DOM，而是开启一个队列，</font> 并缓冲在同一个事件循环中发生的所有数据改变。在缓冲时会<font color="#316fe0">去除重复数据，</font> 从而避免不必要的计算和DOM操作。然后，在下一个事件循环tick中，Vue刷新队列并执行实际（已去重的）工作。所以如果你用一个for循环来动态改变数据100次，其实它只会应用最后一次改变，如果没有这种机制，DOM就要重绘100次，这固然是一个很大的开销;</p></li><li><p>Vue会根据当前浏览器环境优先使用原生的Promise.then和MutationObserver，如果都不支持，就会采用setTimeout代替。</p></li><li><p>因此上面的示例报错的原因是执行过<code>this.show = true</code>之后 <strong>Dom</strong> 节点还没有创建，在下一个Vue事件循环试才开始创建，<font color="#316fe0">$nextTick</font>就是用来知道 <strong>Dom</strong> 是什么时候更新完成的，示例修改为以下情况就会输出正常：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">'msg'</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"show"</span><span class="token operator">></span>Hello World<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      show<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">showDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">showDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre></li></ul><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>理论上我们在使用Vue开发过程中是不需要对Dom进行操作的，但是在一些业务里边，我们不可避免的会使用一些第三方插库，比如 popper.js、swiper等，这些基于原生javascript的库都有创建和更新及销毁的完整生命周期，与Vue配合使用时，就要利用好$nextTick</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Grid 网格布局</title>
      <link href="/2020/07/14/CSS/css-grid/"/>
      <url>/2020/07/14/CSS/css-grid/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Grid-布局简介"><a href="#一、Grid-布局简介" class="headerlink" title="一、Grid 布局简介"></a>一、Grid 布局简介</h2><ul><li><p>网格布局 <strong>(Grid)</strong> 是最强大的 <strong>CSS</strong> 布局方案；</p></li><li><p>它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。以前，只能通过复杂的 CSS 框架达到的效果，现在浏览器内置了；<br><img src="/2020/07/14/CSS/css-grid/shili.jpg" alt="Grid拿手效果"></p></li><li><p><strong>Flex</strong> 相当于一维布局，<strong>Grid</strong> 相当于二维布局，因此 <strong>Grid</strong> 相比于 <strong>Flex</strong> 要强大得多。</p></li></ul><h2 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h2><h3 id="（1）-容器和项目"><a href="#（1）-容器和项目" class="headerlink" title="（1） 容器和项目"></a>（1） 容器和项目</h3><ul><li><p>采用网格布局的区域，称为”容器”（<strong>container</strong>），容器内部采用网格定位的子元素，称为”项目”（<strong>item</strong>）。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item item-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item item-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item item-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item item-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item item-5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item item-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item item-7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item item-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item item-9<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p><font color="#389a6e"><strong>注意：项目只能是容器的顶层子元素，不包含项目的孙子元素。</strong></font></p></li></ul><h3 id="（2）-行和列"><a href="#（2）-行和列" class="headerlink" title="（2） 行和列"></a>（2） 行和列</h3><ul><li>容器里面的水平区域称为”行”（<strong>row</strong>），垂直区域称为”列”（<strong>column</strong>）；</li></ul><h3 id="（3）-单元格"><a href="#（3）-单元格" class="headerlink" title="（3） 单元格"></a>（3） 单元格</h3><ul><li>行和列的交叉区域，称为”单元格”（cell）。<br>正常情况下，n 行和 m 列会产生 <strong>n * m</strong> 个单元格。比如，3 行 3 列会产生 9 个单元格。</li></ul><h3 id="（4）-网格线"><a href="#（4）-网格线" class="headerlink" title="（4） 网格线"></a>（4） 网格线</h3><ul><li>划分网格的线，称为”网格线”（grid line）。水平网格线划分出行，垂直网格线划分出列。<br>正常情况下，n 行有 <strong>n + 1</strong> 根水平网格线，m 列有 <strong>m + 1</strong> 根垂直网格线，比如三行就有四根水平网格线。<br><img src="/2020/07/14/CSS/css-grid/gridLine.jpg" alt="4 x 4 的网格，共有5根水平网格线和5根垂直网格线。"></li></ul><h2 id="三、容器-container-属性"><a href="#三、容器-container-属性" class="headerlink" title="三、容器 (container) 属性"></a>三、容器 (container) 属性</h2><p>首先展示一下<a href="https://jsbin.com/rorubug/edit?html,css,output" target="_blank" rel="noopener">未设置网格属性</a>时的样式和效果</p><p><img src="/2020/07/14/CSS/css-grid/01.jpg" alt="未设置时的效果图"></p><h3 id="（1）-display-属性"><a href="#（1）-display-属性" class="headerlink" title="（1） display 属性"></a>（1） display 属性</h3><ul><li><p><code>display: grid</code> 设置一个元素为网格布局；</p></li><li><p><code>display: inline-grid</code> 设置元素为行内网格布局；</p></li></ul><blockquote><p>注意：<strong>设置网格布局之后</strong>，容器的子元素（项目）的 <code>float、display: inline-block、display: table-cell、vertical-align 和 column-*</code> 属性都将失效；</p></blockquote><h3 id="（2）grid-template-columns-属性和-grid-template-rows-属性"><a href="#（2）grid-template-columns-属性和-grid-template-rows-属性" class="headerlink" title="（2）grid-template-columns 属性和 grid-template-rows 属性"></a>（2）grid-template-columns 属性和 grid-template-rows 属性</h3><ul><li><p>容器指定了网格布局以后，接着就要划分行和列。<strong>grid-template-columns</strong>属性定义每一列的列宽，<strong>grid-template-rows</strong>属性定义每一行的行高。</p><pre class=" language-css"><code class="language-css"><span class="token selector">// 指定了一个三行三列的网格，列宽和行高都是100px。<span class="token id">#container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">// 还可以使用百分比<span class="token id">#container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">33.3%</span> <span class="token number">33.3%</span> <span class="token number">33.3%</span><span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p><img src="/2020/07/14/CSS/css-grid/02.png" alt="设置一个三行三列的网格"></p><h4 id="（2-1）-repeat-函数"><a href="#（2-1）-repeat-函数" class="headerlink" title="（2.1） repeat() 函数"></a>（2.1） <strong>repeat()</strong> 函数</h4><ul><li><p><strong>repeat()</strong> 接受两个参数，第一个参数是重复的次数，第二个参数是所要重复的值。</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span>, <span class="token number">20%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span>, <span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p><img src="/2020/07/14/CSS/css-grid/03.png" alt="效果如图"></p><ul><li><p><strong>repeat()</strong> 也可以用来重复某种格式；</p><p><code>grid-template-columns: repeat(2, 100px 20px 80px);</code> 设置网格 6 列 第一列和第四列的宽度为 100px，第二列和第五列为 20px，第三列和第六列为 80px<br><img src="/2020/07/14/CSS/css-grid/04.png" alt="网格6列，三列重复两次"></p></li><li><p><strong>auto-fill</strong> 关键字配合 <strong>repeat()</strong> 的使用；</p><p><code>grid-template-columns: repeat(auto-fill, 100px);</code> 表示每列宽度 100px，然后自动填充，直到容器不能放置更多的列；<br><img src="/2020/07/14/CSS/css-grid/auto-fill.png" alt="100px自动填充"></p></li></ul><h4 id="（2-2）fr-关键字"><a href="#（2-2）fr-关键字" class="headerlink" title="（2.2）fr 关键字"></a>（2.2）<strong>fr</strong> 关键字</h4><ul><li><p><strong>fr</strong> 关键字是为了表示行或者列的比例关系<br><code>grid-template-columns: 1fr 1fr;</code> 表示设置两个宽度的列；</p></li><li><p><strong>fr</strong> 可以和绝对长度的单位结合使用；<br><code>grid-template-columns: 150px 1fr 2fr;</code> 表示第一列的宽度为 150 像素，第二列的宽度是第三列的一半；<br><img src="/2020/07/14/CSS/css-grid/fr.png" alt="fr和px结合使用"></p></li></ul><h4 id="（2-3）minmax-函数"><a href="#（2-3）minmax-函数" class="headerlink" title="（2.3）minmax() 函数"></a>（2.3）<strong>minmax()</strong> 函数</h4><ul><li><strong>minmax()</strong> 函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值；<br><code>grid-template-columns: 1fr 1fr minmax(100px, 1fr);</code> 表示列宽<strong>不小于 100px，不大于 1fr</strong></li></ul><h4 id="（2-4）auto-关键字"><a href="#（2-4）auto-关键字" class="headerlink" title="（2.4）auto 关键字"></a>（2.4）<strong>auto</strong> 关键字</h4><ul><li><strong>auto</strong> 关键字表示由浏览器自己决定长度；<br><code>grid-template-columns: 100px auto 100px;</code> 第二列的宽度，基本上等于该列单元格的最大宽度，除非单元格内容设置了 min-width，且这个值大于最大宽度;</li></ul><h4 id="（2-5）网格线的名称"><a href="#（2-5）网格线的名称" class="headerlink" title="（2.5）网格线的名称"></a>（2.5）网格线的名称</h4><ul><li><p>grid-template-columns 属性和 grid-template-rows 属性里面，还可以使用方括号，指定每一根网格线的名字，方便以后的引用。</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> [c<span class="token number">1</span>] <span class="token number">100</span>px [c<span class="token number">2</span>] <span class="token number">100</span>px [c<span class="token number">3</span>] auto [c<span class="token number">4</span> last]<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> [r<span class="token number">1</span>] <span class="token number">100</span>px [r<span class="token number">2</span>] <span class="token number">100</span>px [r<span class="token number">3</span>] auto [r<span class="token number">4</span> last]<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面代码指定网格布局为 3 行 x 3 列，因此有 4 根垂直网格线和 4 根水平网格线。方括号里面依次是这八根线的名字; <strong>线的名称可以定义两个，也可以是多个</strong>；</p></li></ul><h4 id="（2-6）布局实例"><a href="#（2-6）布局实例" class="headerlink" title="（2.6）布局实例"></a>（2.6）布局实例</h4><ul><li><p><code>grid-template-columns: 70% 30%;</code> 实现了<strong>两栏布局</strong>；</p></li><li><p><code>grid-template-columns: repeat(12, 1fr);</code> 实现了传统栅格模式的 <strong>12 栏布局</strong>；</p></li></ul><h3 id="（3）row-gap、column-gap-和-grid-gap-属性"><a href="#（3）row-gap、column-gap-和-grid-gap-属性" class="headerlink" title="（3）row-gap、column-gap 和 grid-gap 属性"></a>（3）row-gap、column-gap 和 grid-gap 属性</h3><ul><li><p><strong>row-gap</strong> 属性设置行与行的间隔（行间距）；<br><code>row-gap: 20px;</code> 行间距设为 20px</p></li><li><p><strong>column-gap</strong> 属性设置列与列的间隔（列间距）；<br><code>column-gap: 20px;</code> 列间距设为 20px</p></li><li><p><strong>grid-gap</strong> 是 column-gap 和 row-gap 的合并简写形式<br><code>grid-gap: 20px 20px;</code> 行间距和列间距都是 20px；等同于 <code>grid-gap: 20px;</code></p></li></ul><h3 id="（4）grid-template-areas-属性"><a href="#（4）grid-template-areas-属性" class="headerlink" title="（4）grid-template-areas 属性"></a>（4）grid-template-areas 属性</h3><ul><li><p>网格布局允许指定”区域”（area），一个区域由单个或多个单元格组成;</p></li><li><p><strong>grid-template-areas</strong> 属性用于定义区域。</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">grid-template-areas</span><span class="token punctuation">:</span>    <span class="token string">'a b c'</span>    <span class="token string">'d e f'</span>    <span class="token string">'g h i'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>先划分出 9 个单元格，然后将其定名为 a 到 i 的九个区域，分别对应这九个单元格。</p></li><li><p>多个单元格合并成一个区域的写法如下。</p><pre class=" language-css"><code class="language-css">将 <span class="token number">9</span> 个单元格分成 a、b、c 三个区域。<span class="token property">grid-template-areas</span><span class="token punctuation">:</span>  <span class="token string">'a a a'</span>  <span class="token string">'b b b'</span>  <span class="token string">'c c c'</span><span class="token punctuation">;</span></code></pre><p>如果某些区域不需要利用，则使用”点”（.）表示。</p><pre class=" language-css"><code class="language-css">// 中间一列为点，表示没有用到该单元格，或者该单元格不属于任何区域<span class="token property">grid-template-areas</span><span class="token punctuation">:</span>  <span class="token string">'a . c'</span>  <span class="token string">'d . f'</span>  <span class="token string">'g . i'</span><span class="token punctuation">;</span></code></pre></li></ul><blockquote><p>注意，区域的命名会影响到网格线。每个区域的起始网格线，会自动命名为 <strong>区域名-start</strong>，终止网格线自动命名为 <strong>区域名-end</strong>。</p></blockquote><h3 id="（5）grid-auto-flow-属性"><a href="#（5）grid-auto-flow-属性" class="headerlink" title="（5）grid-auto-flow 属性"></a>（5）grid-auto-flow 属性</h3><ul><li><p>划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。<strong>默认的放置顺序是”先行后列”，即先填满第一行，再开始放入第二行，</strong> 这个顺序由 <strong>grid-auto-flow</strong> 属性决定，默认值是 <strong>row</strong>，即”<strong>先行后列</strong>“。也可以将它设成 <strong>column</strong>，变成”<strong>先列后行</strong>“。</p></li><li><p><strong>grid-auto-flow</strong> 属性除了设置成 row 和 column，还可以设成 <strong>row dense</strong> 和 <strong>column dense</strong>。这两个值主要用于，某些项目指定位置以后，<strong>剩下的项目怎么自动放置</strong>。</p></li></ul><h3 id="（6）justify-items，align-items，place-items"><a href="#（6）justify-items，align-items，place-items" class="headerlink" title="（6）justify-items，align-items，place-items"></a>（6）justify-items，align-items，place-items</h3><ul><li><p>justify-items 属性设置单元格内容的水平位置（左中右），align-items 属性设置单元格内容的垂直位置（上中下）;</p><ul><li><strong>start：对齐单元格的起始边缘</strong></li><li><strong>end：对齐单元格的结束边缘</strong></li><li><strong>center：单元格内部居中</strong></li><li><strong>stretch：拉伸，占满单元格的整个宽度（默认值）</strong></li></ul><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">justify-items</span><span class="token punctuation">:</span> start | end | center | stretch<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> start | end | center | stretch<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><code>.container { justify-items: start; }</code> 表示单元格的内容左对齐<br><img src="/2020/07/14/CSS/css-grid/justify-items.png" alt="内容左对齐"></p></li><li><p><code>.container { align-items: start; }</code> 表示单元格的内容头部对齐<br><img src="/2020/07/14/CSS/css-grid/align-items.png" alt="内容头部对齐"></p></li><li><p><strong>place-items</strong> 属性是 <strong>align-items</strong> 属性和 <strong>justify-items</strong> 属性的合并简写形式: <code>place-items: &lt;align-items&gt; &lt;justify-items&gt;;</code></p></li></ul><h3 id="（7）justify-content、align-content、place-content"><a href="#（7）justify-content、align-content、place-content" class="headerlink" title="（7）justify-content、align-content、place-content"></a>（7）justify-content、align-content、place-content</h3><ul><li><p><strong>justify-content</strong> 属性是整个内容区域在容器里面的水平位置（左中右），</p></li><li><p><strong>align-content</strong> 属性是整个内容区域的垂直位置（上中下）</p><ul><li><p><strong>start - 对齐容器的起始边框</strong></p></li><li><p><strong>end - 对齐容器的结束边框</strong></p></li><li><p><strong>center - 容器内部居中</strong></p></li><li><p><strong>stretch - 项目大小没有指定时，拉伸占据整个网格容器</strong></p></li><li><p><strong>space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍</strong></p></li><li><p><strong>space-between - 项目与项目的间隔相等，项目与容器边框之间没有间隔</strong></p></li><li><p><strong>space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔；</strong></p></li></ul></li><li><p><strong>place-content</strong> 属性是 <strong>align-content</strong> 属性和 <strong>justify-content</strong> 属性的合并简写形式：<code>place-content: &lt;align-content&gt; &lt;justify-content&gt;</code></p></li></ul><h3 id="（8）grid-auto-columns、grid-auto-rows"><a href="#（8）grid-auto-columns、grid-auto-rows" class="headerlink" title="（8）grid-auto-columns、grid-auto-rows"></a>（8）grid-auto-columns、grid-auto-rows</h3><ul><li><p>有时候，一些子元素（项目）的指定位置，在现有网格的外部。比如网格只有 3 行，但是某一个项目指定在第 5 行。这时，浏览器会自动生成多余的网格，以便放置项目</p></li><li><p><strong>grid-auto-columns</strong> 属性和 <strong>grid-auto-rows</strong> 属性用来设置，浏览器自动创建的多余网格的列宽和行高。它们的写法与 <strong>grid-template-columns</strong> 和 <strong>grid-template-rows</strong> 完全相同。如果不指定这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高。</p></li><li><p>下面的例子里面，划分好的网格是 3 行 x 3 列，但是，8 号项目指定在第 4 行，9 号项目指定在第 5 行。</p></li></ul><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">grid-auto-rows</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2020/07/14/CSS/css-grid/05.png" alt="行高填充为50px"></p><h2 id="四、项目属性"><a href="#四、项目属性" class="headerlink" title="四、项目属性"></a>四、项目属性</h2><h3 id="（1）指定项目的位置"><a href="#（1）指定项目的位置" class="headerlink" title="（1）指定项目的位置"></a>（1）指定项目的位置</h3><ul><li><p><strong>grid-column-start</strong>：左边框所在的垂直网格线</p></li><li><p><strong>grid-column-end</strong>：右边框所在的垂直网格线</p></li><li><p><strong>grid-row-start</strong>：上边框所在的水平网格线</p></li><li><p><strong>grid-row-end</strong>：下边框所在的水平网格线</p><p>下面的例子是<strong>指定四个边框位置</strong>的效果：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">grid-row-start</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">grid-row-end</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2020/07/14/CSS/css-grid/06.png" alt="指定四个边框位置"></p><p><strong>这四个属性的值，除了指定为第几个网格线，还可以指定为网格线的名字</strong>:</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> header-start<span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> header-end<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这四个属性的值还可以使用 <strong>span</strong> 关键字，表示”跨越”，即<strong>左右边框（上下边框）之间跨越多少个网格</strong>: <code>.item-1 { grid-column-start: span 2; }</code><br><img src="/2020/07/14/CSS/css-grid/07.png" alt="1号项目的左边框距离右边框跨越2个网格"></p></li></ul><blockquote><p><strong>使用这四个属性，如果产生了项目的重叠，则使用 z-index 属性指定项目的重叠顺序。</strong></p></blockquote><h3 id="（2）grid-column、grid-row"><a href="#（2）grid-column、grid-row" class="headerlink" title="（2）grid-column、grid-row"></a>（2）grid-column、grid-row</h3><ul><li><p><strong>grid-column</strong> 属性是 <strong>grid-column-start</strong> 和 <strong>grid-column-end</strong> 的合并简写形式：<code>grid-column: &lt;start-line&gt; / &lt;end-line&gt;;</code></p></li><li><p><strong>grid-row</strong> 属性是 <strong>grid-row-start</strong> 属性和 <strong>grid-row-end</strong> 的合并简写形式：<code>grid-row: &lt;start-line&gt; / &lt;end-line&gt;;</code></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 等同于 */</span><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">grid-row-start</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">grid-row-end</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* ====================== */</span><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#b03532</span><span class="token punctuation">;</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 等同于 */</span><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#b03532</span><span class="token punctuation">;</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span> / span <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span> / span <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="（3）grid-area-属性"><a href="#（3）grid-area-属性" class="headerlink" title="（3）grid-area 属性"></a>（3）grid-area 属性</h3><ul><li><p>grid-area 属性指定项目放在哪一个区域。</p><p>1 号项目位于 e 区域：<code>.item { grid-area: e; }</code></p><p><img src="/2020/07/14/CSS/css-grid/08.png" alt="grid-area"></p></li><li><p><strong>grid-area</strong> 属性还可用作 <strong>grid-row-start</strong>、<strong>grid-column-start</strong>、<strong>grid-row-end</strong>、<strong>grid-column-end</strong> 的合并简写形式，直接指定项目的位置：<code>grid-area: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;</code></p></li></ul><h3 id="（4）justify-self、align-self、place-self"><a href="#（4）justify-self、align-self、place-self" class="headerlink" title="（4）justify-self、align-self、place-self"></a>（4）justify-self、align-self、place-self</h3><ul><li><p><strong>justify-self</strong> 属性设置单元格内容的水平位置（左中右），跟 <strong>justify-items</strong> 属性的用法完全一致，但只作用于单个项目；</p></li><li><p><strong>align-self</strong> 属性设置单元格内容的垂直位置（上中下），跟 <strong>align-items</strong> 属性的用法完全一致，也是只作用于单个项目。</p></li><li><p><strong>place-self</strong> 属性是 <strong>align-self</strong> 属性和 <strong>justify-self</strong> 属性的合并简写形式：<code>place-self: &lt;align-self&gt; &lt;justify-self&gt;;</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
          <category> 布局 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
            <tag> flex </tag>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS样式优先级</title>
      <link href="/2020/07/13/CSS/cssPriority/"/>
      <url>/2020/07/13/CSS/cssPriority/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当创建的样式文件越来越复杂时，一个标签的样式将会受到越来越多的影响，这种影响可能来自周围的标签，也可能来自其自身。下面我们从这两方面去看看 CSS 样式的优先级。</p></blockquote><h3 id="CSS的继承性"><a href="#CSS的继承性" class="headerlink" title="CSS的继承性"></a>CSS的<strong>继承性</strong></h3><p>CSS 的继承特性指的是应用在一个标签上的那些 CSS 属性被传到其子标签上。看下面的 HTML 结构：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>如果 <strong>&#60;div&#62;</strong> 有个属性 <strong>color: red</strong>，则这个属性将被 <strong>&#60;p&#62;</strong> 继承，即 <strong>&#60;p&#62;</strong> 也拥有属性 <strong>color: red</strong>。<br><br>由上可见，当网页比较复杂， HTML 结构嵌套较深时，一个标签的样式将深受其祖先标签样式的影响。影响的规则是：</p><h4 id="CSS-优先规则"><a href="#CSS-优先规则" class="headerlink" title="CSS 优先规则"></a>CSS 优先规则</h4><ol><li>最近的祖先样式比其他祖先样式优先级高。</li></ol><p>例1：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 类名为 son 的 div 的 color 为 blue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> blue</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>如果我们把一个标签从祖先那里继承来的而自身没有的属性叫做 <strong>祖先样式</strong> ，那么 <strong>直接样式</strong> 就是一个标签直接拥有的属性。又有如下规则：</p><ol start="2"><li><strong>直接样式</strong> 比 <strong>祖先样式</strong> 优先级高。</li></ol><p>例2：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 类名为 son 的 div 的 color 为 blue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> blue</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="CSS-选择器的优先级"><a href="#CSS-选择器的优先级" class="headerlink" title="CSS 选择器的优先级"></a>CSS 选择器的优先级</h4><p>上面讨论了一个标签从祖先继承来的属性，现在讨论标签自有的属性。在讨论 CSS 优先级之前，先说说 CSS 7 种基础的选择器：</p><ul><li>ID 选择器， 如 #id{}</li><li>类选择器， 如 .class{}</li><li>属性选择器， 如 a[href=”segmentfault.com”]{}</li><li>伪类选择器， 如 :hover{}</li><li>伪元素选择器， 如 ::before{}</li><li>标签选择器， 如 span{}</li><li>通配选择器， 如 *{}</li></ul><blockquote><p>优先级关系：内联样式 &gt; ID 选择器 &gt; 类选择器 = 属性选择器 = 伪类选择器 &gt; 标签选择器 = 伪元素选择器</p></blockquote><p>例3：</p><pre class=" language-html"><code class="language-html">// HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-class<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-id<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> black</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector">// CSS<span class="token id">#content-id</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content-class</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最终的 color 为 black，因为内联样式比其他选择器的优先级高。</p><p>所有 CSS 的选择符由上述 7 种基础的选择器或者组合而成，组合的方式有 3 种：</p><ul><li>后代选择符： .father .child{}</li><li>子选择符： .father &gt; .child{}</li><li>相邻选择符: .bro1 + .bro2{}</li></ul><p>当一个标签同时被多个选择符选中，我们便需要确定这些选择符的优先级。我们有如下规则：</p><blockquote><p>计算选择符中 ID 选择器的个数（a），计算选择符中类选择器、属性选择器以及伪类选择器的个数之和（b），计算选择符中标签选择器和伪元素选择器的个数之和（c）。按 a、b、c 的顺序依次比较大小，大的则优先级高，相等则比较下一个。若最后两个的选择符中 a、b、c 都相等，则按照”就近原则”来判断。</p></blockquote><p>例4：</p><pre class=" language-html"><code class="language-html">// HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>con-id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>con-span<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector">// CSS<span class="token id">#con-id</span> span </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div <span class="token class">.con-span</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>此例中：（a）的个数为 1；（b）的个数为 1；（c）的个数为 2；两个标签选择器根据 <strong>就近原则</strong> 的话最终生效的是 <strong>color：red</strong> 的属性 <br><br>如果外部样式表和内部样式表中的样式发生冲突会出现什么情况呢？这与样式表在 HTML 文件中所处的位置有关。样式被应用的位置越在下面则优先级越高，其实这仍然可以用 <strong>例 4</strong> 来解释。</p><p>例5：</p><pre class=" language-css"><code class="language-css">// HTML&lt;link rel=<span class="token string">"stylesheet"</span> type=<span class="token string">"text/css"</span> href=<span class="token string">"style-link.css"</span>>&lt;style type=<span class="token string">"text/css"</span>><span class="token atrule"><span class="token rule">@import</span> <span class="token url">url(style-import.css)</span><span class="token punctuation">;</span></span> <span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">&lt;/style>&lt;div>&lt;/div>// style-link<span class="token class">.css</span>div </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> lime<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">// style-import<span class="token class">.css</span>div </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从顺序上看，内部样式在最下面，被最晚引用，所以<strong>&#60;div&#62;</strong>的背景色为 blue。</p><p>上面代码中，@import 语句必须出现在内部样式之前，否则文件引入无效。</p><p>CSS 还提供了一种可以完全忽略以上规则的方法，当你一定、必须确保某一个特定的属性要显示时，可以使用这个技术。</p><blockquote><p>属性后插有 !important 的属性拥有最高优先级。若同时插有 !important，则再利用规则 3、4 判断优先级。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie的优缺点</title>
      <link href="/2020/07/08/cookie/"/>
      <url>/2020/07/08/cookie/</url>
      
        <content type="html"><![CDATA[<h2 id="cookie的优缺点"><a href="#cookie的优缺点" class="headerlink" title="cookie的优缺点"></a>cookie的优缺点</h2><h3 id="cookie的弊端"><a href="#cookie的弊端" class="headerlink" title="cookie的弊端"></a>cookie的弊端</h3><blockquote><p>cookie虽然在持久板寸客户端数据提供了方便，分担了服务器储存的负担，但是还是有许多局限性的</p></blockquote><ul><li>不同的浏览器和不同版本会限制每个域名的cookie个数</li><li>IE6或更低版本最多20个cookie </li><li>IE7和之后的版本最多50个cookie</li><li>Firefox最多50个cookie</li><li>Chrome和Safari没有硬性限制</li><li>IE和Opera会清理掉近期最少使用的cookie而Firefox会随机清理掉一些cookie</li><li>Cookie的最大大约为4096字节，为了兼容性，一般不能超过4095字节</li></ul><h3 id="cookie的优点：极高的扩展性和可用性"><a href="#cookie的优点：极高的扩展性和可用性" class="headerlink" title="cookie的优点：极高的扩展性和可用性"></a>cookie的优点：极高的扩展性和可用性</h3><ul><li>通过良好的编程习惯，控制保存在cookie中的session对象的大小</li><li>通过加密和安全传输技术（SSL），减少cookie被破解的可能性</li><li>只在cookie中存放不敏感数据，即使被盗也不会有重大损失</li><li>控制cookie的生命期，使之不会永远有效。偷盗者很可能拿到一个过期的cookie</li></ul><p><a href="https://www.cnblogs.com/keyng/p/12883343.html" target="_blank" rel="noopener">参考博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客在云服务器上的部署</title>
      <link href="/2020/07/07/hexoDeploy/"/>
      <url>/2020/07/07/hexoDeploy/</url>
      
        <content type="html"><![CDATA[<h1 id="今天来记录一下部署hexo的步骤"><a href="#今天来记录一下部署hexo的步骤" class="headerlink" title="今天来记录一下部署hexo的步骤"></a>今天来记录一下部署hexo的步骤</h1><h2 id="部署所需的系统配置"><a href="#部署所需的系统配置" class="headerlink" title="部署所需的系统配置"></a>部署所需的系统配置</h2><ul><li>本地windows 10系统；</li><li>云服务器是阿里云 CentOS7 系统；</li><li>如果想要使用域名的话可以准备一个域名；</li></ul><h2 id="本地主机所需配置"><a href="#本地主机所需配置" class="headerlink" title="本地主机所需配置"></a>本地主机所需配置</h2><ul><li>安装 Git；</li><li>安装 NodeJs；</li><li>安装 Hexo；</li><li>根据 <a href="https://hexo.bootcss.com/" target="_blank" rel="noopener">Hexo官网</a> 创建自己的博客，可以选择一个自己喜欢的主题；</li></ul><h2 id="云主机所需配置"><a href="#云主机所需配置" class="headerlink" title="云主机所需配置"></a>云主机所需配置</h2><ul><li>安装git，为了在云服务器上创建仓库；</li><li>安装nginx，利用反向代理将请求代理到博客资源所在的位置；</li></ul><h2 id="接下来开始进行配置"><a href="#接下来开始进行配置" class="headerlink" title="接下来开始进行配置"></a>接下来开始进行配置</h2><h3 id="1、-生成-ssh-公钥"><a href="#1、-生成-ssh-公钥" class="headerlink" title="1、 生成 ssh 公钥"></a>1、 生成 <strong><em>ssh</em></strong> 公钥</h3><p>&nbsp;&nbsp;在本地windows进入win+R进入cmd(命令行终端)执行以下命令：</p><pre><code>  ssh-keygen -t rsa</code></pre><p>&nbsp;&nbsp;如果有选择就同意，没有的话就一直点击回车；执行成功之后会在<br></p><blockquote><p>我的电脑/C盘/用户/你自己的用户名/.shh/ </p></blockquote><p>&nbsp;&nbsp;所在的位置生成 <em>id_rsa，id_rsa.pub</em> 文件，如果出现这些文件，证明成功。</p><blockquote><p>注：如果后边遇到问题需要重新生成公钥的话，<strong>建议删除该文件夹下的所有文件重新生成</strong>！</p></blockquote><h3 id="2、-远程CentOS系统配置步骤"><a href="#2、-远程CentOS系统配置步骤" class="headerlink" title="2、 远程CentOS系统配置步骤"></a>2、 远程CentOS系统配置步骤</h3><h4 id="安装git，使用下面命令："><a href="#安装git，使用下面命令：" class="headerlink" title="安装git，使用下面命令："></a>安装git，使用下面命令：</h4><pre><code>  yum install git</code></pre><h4 id="创建Git账户："><a href="#创建Git账户：" class="headerlink" title="创建Git账户："></a>创建Git账户：</h4><pre><code>  addUser git</code></pre><p>设置git账户密码</p><pre><code>  sudo passwd git</code></pre><p>按照提示输入两次密码</p><h4 id="给账户添加权限："><a href="#给账户添加权限：" class="headerlink" title="给账户添加权限："></a>给账户添加权限：</h4><pre><code>  chmod 740 /etc/sudoers  vim /etc/sudoers</code></pre><p>找到以下配置：</p><pre><code>## Allow root to run any commands anywhereroot    ALL=(ALL)     ALL</code></pre><p>在后面添加：</p><pre><code>git    ALL=(ALL)     ALL</code></pre><p>保存退出并且改回权限</p><pre><code>chmod 400 /etc/sudoers</code></pre><h4 id="配置云服务器上的-ssh"><a href="#配置云服务器上的-ssh" class="headerlink" title="配置云服务器上的 ssh"></a>配置云服务器上的 <strong><em>ssh</em></strong></h4><p>首先切换到git用户，创建 ~/.ssh 文件夹和 ~/.ssh/authorized_keys 文件，设置相应的权限</p><pre><code>su gitmkdir ~/.sshvim ~/.ssh/authorized_keys# 然后将win10中生成的.ssh文件夹下的 id_rsa.pub 文件中的公钥复制到authorized_keyschmod 600 /home/git/.ssh/authorized_keyschmod 700 /home/git/.ssh</code></pre><p>完成之后需要在本地windows主机上测试是否可以免密登录git,在windows的命令行中使用：</p><pre><code>#SERVER 代表云主机的ip地址ssh -v git@SERVER</code></pre><p>如果选择yes之后直接登陆成功的话说明配置成功。</p><h4 id="在云服务器上配置-git-仓库"><a href="#在云服务器上配置-git-仓库" class="headerlink" title="在云服务器上配置 git 仓库"></a>在云服务器上配置 git 仓库</h4><p>首先创建文件夹作为git仓库的目录并修改权限(使用root用户)</p><pre><code>mkdir /var/repositorychown -R git:git /var/repositorychmod -R 755 /var/repository</code></pre><p>然后创建网站的根目录(也就是博客文件的目录),x修改权限</p><pre><code>mkdir /home/hexochown -R git:git /home/hexochmod -R 755 /home/hexo</code></pre><p>然后创建一个 Git 裸仓库</p><pre><code>cd /var/repositorygit init --bare hexoBlog.git</code></pre><p>创建一个新的 Git 钩子，用于自动部署<br><br>我们找到 /var/repository/hexoBlog.git 下自动生成的hooks文件夹，在里边新建post-receive文件</p><pre><code>vim /var/repository/hexoBlog.git/hooks/post-receive</code></pre><p>并且在里边配置如下命令：</p><pre><code>#!/bin/bashgit --work-tree=/home/hexo --git-dir=/var/repository/hexoBlog.git checkout -f</code></pre><p>将工作树( <strong><em>项目地址</em></strong> )和git仓库( <strong><em>hexoBlog.git</em></strong> )关联起来,这样从本机提交上的项目就可以同步到 <strong><em>/home/hexo</em></strong> 路径下，保存后修改文件权限，添加可执行权限：</p><pre><code>chown -R git:git /var/repository/hexoBlog.git/hooks/post-receivechmod +x /var/repository/hexoBlog.git/hooks/post-receive</code></pre><h4 id="在云服务器上配置-Nginx"><a href="#在云服务器上配置-Nginx" class="headerlink" title="在云服务器上配置 Nginx"></a>在云服务器上配置 Nginx</h4><p>安装nginx ( 大家到百度自行查询安装方法 )</p><p>修改nginx配置文件 nginx.conf 中的配置</p><pre><code>server {        listen       80;    #nginx反向代理的端口号        server_name  【填写域名或者云主机IP地址】;         root       /home/hexo;       #网站的根目录        location / {        }        error_page 404 /404.html;         #配置40x页面        location = /40x.html {        }    }</code></pre><p>修改完成之后重启nginx服务</p><h4 id="配置本地hexo项目的配置文件-config-yml"><a href="#配置本地hexo项目的配置文件-config-yml" class="headerlink" title="配置本地hexo项目的配置文件 _config.yml"></a>配置本地hexo项目的配置文件 _config.yml</h4><p>找到 deploy: 进行如下配置</p><pre><code>deploy:  type: git  repo: root@Server:/var/repository/hexoBlog.git      branch: master      # 分支</code></pre><blockquote><p>** 注意：这里的格式一定要严格的按照缩进来进行 **</p></blockquote><p>然后找到hexo项目目录 ， 在文件路径输入 cmd 进入命令行 执行下面命令：</p><pre><code>hexo chexo g -d</code></pre><p>如果执行结束之后显示成功，就可以在浏览器输入IP地址进行访问了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
